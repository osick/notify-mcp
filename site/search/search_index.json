{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Notify-MCP","text":""},{"location":"#seamless-team-collaboration-across-ai-platforms","title":"Seamless Team Collaboration Across AI Platforms","text":"<p>Notify-MCP is a powerful pub-sub MCP server that enables teams to share notifications, decisions, and status updates across different AI assistants (Claude, ChatGPT, Gemini).</p> <p>Get Started View Use Cases</p>"},{"location":"#why-notify-mcp","title":"Why Notify-MCP?","text":"<ul> <li> <p> Cross-Platform Collaboration</p> <p>Share information seamlessly between Claude, ChatGPT, Gemini, and other AI assistants. Your team stays synchronized regardless of which platform they use.</p> <p> Learn more</p> </li> <li> <p> Persistent Storage</p> <p>SQLite-based persistent storage enables true team collaboration. Share a database file and everyone sees the same channels and notifications.</p> <p> Storage Guide</p> </li> <li> <p> Smart Filtering</p> <p>Subscribe to channels with intelligent filters based on priority, tags, themes, and sender roles. Only receive what matters to you.</p> <p> Configuration</p> </li> <li> <p> Production Ready</p> <p>62 passing tests, 70% code coverage, comprehensive documentation. Built with SQLAlchemy, aiosqlite, and modern async Python.</p> <p> Architecture</p> </li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":""},{"location":"#1-developer-publishes-architecture-decision-in-claude","title":"1. Developer publishes architecture decision in Claude","text":"<pre><code># In Claude Code or Claude Desktop\n\"Create a channel called 'architecture' and publish a decision about\nmigrating to microservices architecture\"\n</code></pre>"},{"location":"#2-team-members-receive-notification","title":"2. Team members receive notification","text":"<p>All team members subscribed to the <code>architecture</code> channel\u2014whether using Claude, ChatGPT, or Gemini\u2014see the decision:</p> <pre><code>{\n  \"title\": \"Migration to Microservices\",\n  \"body\": \"Decision: Moving from monolith to microservices using Docker/K8s\",\n  \"priority\": \"high\",\n  \"theme\": \"architecture-decision\",\n  \"sender\": \"Alice (Developer)\",\n  \"timestamp\": \"2025-01-12T10:30:00Z\"\n}\n</code></pre>"},{"location":"#3-everyone-stays-aligned","title":"3. Everyone stays aligned","text":"<p>No more information silos! Architecture decisions, incidents, and project updates flow seamlessly across your entire team.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#multi-channel-system","title":"\ud83c\udfaf Multi-Channel System","text":"<p>Create dedicated channels for teams, projects, or topics. Organize notifications logically.</p>"},{"location":"#pub-sub-architecture","title":"\ud83d\udd14 Pub-Sub Architecture","text":"<p>Decoupled notification delivery. Publishers and subscribers don't need to know about each other.</p>"},{"location":"#persistent-storage","title":"\ud83d\udcbe Persistent Storage","text":"<p>Version 1.1.0+ includes SQLite storage for team collaboration. Notifications survive server restarts.</p>"},{"location":"#rich-notification-model","title":"\ud83d\udcca Rich Notification Model","text":"<ul> <li>Sender info: User ID, name, role, AI tool</li> <li>Context: Theme, priority, tags, validity</li> <li>Information: Title, body (text/markdown/json)</li> <li>Actions: Optional action buttons</li> <li>Metadata: ID, timestamp, sequence, threading</li> </ul>"},{"location":"#type-safe","title":"\ud83d\udd10 Type-Safe","text":"<p>Full Pydantic validation with JSON Schema. Catch errors early.</p>"},{"location":"#well-tested","title":"\ud83e\uddea Well-Tested","text":"<p>62 unit tests, 70% code coverage, comprehensive test suite.</p>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li> <p>Architecture Decisions</p> <p>Document and broadcast architectural decisions to all stakeholders. Maintain a searchable history of technical choices.</p> <p> View scenario</p> </li> <li> <p>DevOps Incidents</p> <p>Alert teams about production incidents. Critical notifications reach everyone instantly, regardless of their AI platform.</p> <p> View scenario</p> </li> <li> <p>Team Coordination</p> <p>Coordinate work across distributed teams. Share status updates, milestones, and blockers in real-time.</p> <p> View scenario</p> </li> <li> <p>Project Updates</p> <p>Broadcast project milestones, sprint updates, and requirement changes. Keep stakeholders informed automatically.</p> <p> View scenario</p> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to enable seamless collaboration across your team's AI assistants?</p> <ol> <li>Install Notify-MCP - Set up in 5 minutes</li> <li>Configure Storage - Enable team collaboration</li> <li>Create Channels - Organize your notifications</li> <li>Explore Use Cases - Learn real-world applications</li> </ol>"},{"location":"#community-support","title":"Community &amp; Support","text":"<p> GitHub</p> <p>Find the source code, report issues, and contribute on GitHub.</p> <p> Documentation</p> <p>Comprehensive guides, API reference, and examples available throughout this site.</p> <p> Discussions</p> <p>Join the conversation in GitHub Discussions.</p> <p> Bug Reports</p> <p>Found a bug? Create an issue on GitHub.</p>"},{"location":"#whats-new","title":"What's New","text":""},{"location":"#version-110-persistent-storage","title":"Version 1.1.0 - Persistent Storage \ud83c\udf89","text":"<p>The latest release introduces SQLite-based persistent storage, enabling true team collaboration:</p> <ul> <li>\u2705 Persistent across restarts - Notifications survive server restarts</li> <li>\u2705 Team collaboration - Share database files for cross-team sync</li> <li>\u2705 Zero setup - File-based SQLite requires no server</li> <li>\u2705 Production ready - 62 tests, 70% coverage</li> </ul> <p>View Release Notes</p> <p>Built with \u2764\ufe0f for seamless AI collaboration</p> <p>Made with MCP (Model Context Protocol) by Anthropic</p>"},{"location":"API/","title":"Notify-MCP Server API Documentation","text":""},{"location":"API/#overview","title":"Overview","text":"<p>This document defines the MCP server API for the Notify-MCP notification system. All communication uses JSON-RPC 2.0 over the Model Context Protocol.</p> <p>Protocol: MCP (Model Context Protocol) Message Format: JSON-RPC 2.0 Transport Options: stdio, HTTP, WebSocket</p>"},{"location":"API/#mcp-server-information","title":"MCP Server Information","text":""},{"location":"API/#server-metadata","title":"Server Metadata","text":"<pre><code>{\n  \"name\": \"notify-mcp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Team notification server for genAI collaboration\",\n  \"capabilities\": {\n    \"notifications\": {\n      \"supported\": true,\n      \"channels\": true,\n      \"filters\": true,\n      \"history\": false\n    }\n  }\n}\n</code></pre>"},{"location":"API/#api-methods","title":"API Methods","text":""},{"location":"API/#1-initialize","title":"1. Initialize","text":"<p>Method: <code>initialize</code> Description: Initialize MCP connection and negotiate capabilities Required by: MCP Protocol</p>"},{"location":"API/#request","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"1.0\",\n    \"clientInfo\": {\n      \"name\": \"claude-client\",\n      \"version\": \"1.0.0\"\n    },\n    \"capabilities\": {\n      \"notifications\": {\n        \"supported\": true\n      }\n    }\n  },\n  \"id\": \"init-1\"\n}\n</code></pre>"},{"location":"API/#response","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"protocolVersion\": \"1.0\",\n    \"serverInfo\": {\n      \"name\": \"notify-mcp\",\n      \"version\": \"1.0.0\"\n    },\n    \"capabilities\": {\n      \"notifications\": {\n        \"supported\": true,\n        \"channels\": true,\n        \"filters\": true\n      }\n    }\n  },\n  \"id\": \"init-1\"\n}\n</code></pre>"},{"location":"API/#2-subscribe-to-channel","title":"2. Subscribe to Channel","text":"<p>Method: <code>notifications/subscribe</code> Description: Subscribe to a notification channel with optional filters</p>"},{"location":"API/#request_1","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/subscribe\",\n  \"params\": {\n    \"channel\": \"project-alpha\",\n    \"filters\": {\n      \"priority\": [\"high\", \"critical\"],\n      \"tags\": [\"backend\", \"security\"],\n      \"themes\": [\"architecture-decision\", \"alert\"],\n      \"roles\": [\"dev\"]\n    }\n  },\n  \"id\": \"sub-1\"\n}\n</code></pre>"},{"location":"API/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>channel</code> string Yes Channel name to subscribe to <code>filters</code> object No Filter criteria (see below)"},{"location":"API/#filter-options","title":"Filter Options","text":"Filter Type Description Example <code>priority</code> array[string] Priority levels <code>[\"high\", \"critical\"]</code> <code>tags</code> array[string] Tag matching <code>[\"backend\", \"security\"]</code> <code>themes</code> array[string] Notification themes <code>[\"decision\", \"alert\"]</code> <code>roles</code> array[string] Sender roles <code>[\"dev\", \"consulting\"]</code> <code>senders</code> array[string] Specific sender IDs <code>[\"user-123\"]</code>"},{"location":"API/#response-success","title":"Response (Success)","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"subscribed\": true,\n    \"channel\": \"project-alpha\",\n    \"subscriptionId\": \"sub-7b8e9f10\",\n    \"subscribedAt\": \"2025-10-11T14:30:00Z\",\n    \"subscriberCount\": 5\n  },\n  \"id\": \"sub-1\"\n}\n</code></pre>"},{"location":"API/#response-error","title":"Response (Error)","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": -32001,\n    \"message\": \"Channel not found\",\n    \"data\": {\n      \"channel\": \"project-alpha\"\n    }\n  },\n  \"id\": \"sub-1\"\n}\n</code></pre>"},{"location":"API/#3-unsubscribe-from-channel","title":"3. Unsubscribe from Channel","text":"<p>Method: <code>notifications/unsubscribe</code> Description: Unsubscribe from a notification channel</p>"},{"location":"API/#request_2","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/unsubscribe\",\n  \"params\": {\n    \"channel\": \"project-alpha\"\n  },\n  \"id\": \"unsub-1\"\n}\n</code></pre>"},{"location":"API/#parameters_1","title":"Parameters","text":"Parameter Type Required Description <code>channel</code> string Yes Channel name to unsubscribe from"},{"location":"API/#response_1","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"unsubscribed\": true,\n    \"channel\": \"project-alpha\"\n  },\n  \"id\": \"unsub-1\"\n}\n</code></pre>"},{"location":"API/#4-publish-notification","title":"4. Publish Notification","text":"<p>Method: <code>notifications/publish</code> Description: Publish a notification to a channel</p>"},{"location":"API/#request_3","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/publish\",\n  \"params\": {\n    \"channel\": \"project-alpha\",\n    \"notification\": {\n      \"schemaVersion\": \"1.0.0\",\n      \"sender\": {\n        \"id\": \"user-alice-123\",\n        \"name\": \"Alice Developer\",\n        \"role\": \"dev\",\n        \"aiTool\": \"claude\"\n      },\n      \"context\": {\n        \"theme\": \"architecture-decision\",\n        \"priority\": \"high\",\n        \"tags\": [\"backend\", \"database\"],\n        \"projectId\": \"proj-456\"\n      },\n      \"information\": {\n        \"title\": \"Database Migration Strategy\",\n        \"body\": \"Team decided to use Blue-Green deployment...\",\n        \"format\": \"markdown\"\n      },\n      \"actions\": [\n        {\n          \"type\": \"review\",\n          \"label\": \"Review Decision\",\n          \"url\": \"https://wiki.example.com/decision\"\n        }\n      ],\n      \"visibility\": {\n        \"teams\": [\"dev\", \"consulting\"]\n      }\n    }\n  },\n  \"id\": \"pub-1\"\n}\n</code></pre>"},{"location":"API/#parameters_2","title":"Parameters","text":"Parameter Type Required Description <code>channel</code> string Yes Target channel name <code>notification</code> object Yes Notification object (see schema)"},{"location":"API/#response-success_1","title":"Response (Success)","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"published\": true,\n    \"notificationId\": \"notif-7b8e9f10\",\n    \"channel\": \"project-alpha\",\n    \"timestamp\": \"2025-10-11T14:30:00Z\",\n    \"deliveredTo\": 5,\n    \"metadata\": {\n      \"id\": \"notif-7b8e9f10\",\n      \"sequence\": 42\n    }\n  },\n  \"id\": \"pub-1\"\n}\n</code></pre>"},{"location":"API/#response-error-invalid-schema","title":"Response (Error - Invalid Schema)","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": -32002,\n    \"message\": \"Invalid notification schema\",\n    \"data\": {\n      \"schemaErrors\": [\n        {\n          \"field\": \"sender.role\",\n          \"error\": \"must be one of: dev, consulting, business, other\"\n        }\n      ]\n    }\n  },\n  \"id\": \"pub-1\"\n}\n</code></pre>"},{"location":"API/#5-list-channels","title":"5. List Channels","text":"<p>Method: <code>notifications/channels/list</code> Description: Get list of available channels</p>"},{"location":"API/#request_4","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/channels/list\",\n  \"params\": {\n    \"filter\": {\n      \"tags\": [\"active\"],\n      \"permissions\": \"subscribe\"\n    }\n  },\n  \"id\": \"list-1\"\n}\n</code></pre>"},{"location":"API/#parameters-all-optional","title":"Parameters (All Optional)","text":"Parameter Type Description <code>filter.tags</code> array[string] Filter by channel tags <code>filter.permissions</code> string Filter by permission: <code>subscribe</code>, <code>publish</code>, <code>admin</code>"},{"location":"API/#response_2","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"channels\": [\n      {\n        \"id\": \"project-alpha\",\n        \"name\": \"Project Alpha\",\n        \"description\": \"Notifications for Project Alpha team\",\n        \"subscriberCount\": 12,\n        \"createdAt\": \"2025-10-01T10:00:00Z\",\n        \"permissions\": {\n          \"subscribe\": [\"dev\", \"consulting\", \"business\"],\n          \"publish\": [\"dev\", \"consulting\"]\n        },\n        \"metadata\": {\n          \"projectId\": \"proj-456\",\n          \"tags\": [\"active\", \"high-priority\"]\n        }\n      },\n      {\n        \"id\": \"general\",\n        \"name\": \"General Announcements\",\n        \"description\": \"General team announcements\",\n        \"subscriberCount\": 45,\n        \"createdAt\": \"2025-09-15T08:00:00Z\",\n        \"permissions\": {\n          \"subscribe\": [\"all\"],\n          \"publish\": [\"admin\"]\n        }\n      }\n    ],\n    \"total\": 2\n  },\n  \"id\": \"list-1\"\n}\n</code></pre>"},{"location":"API/#6-create-channel","title":"6. Create Channel","text":"<p>Method: <code>notifications/channels/create</code> Description: Create a new notification channel</p>"},{"location":"API/#request_5","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/channels/create\",\n  \"params\": {\n    \"channel\": {\n      \"id\": \"project-beta\",\n      \"name\": \"Project Beta\",\n      \"description\": \"Notifications for Project Beta team\",\n      \"permissions\": {\n        \"subscribe\": [\"dev\", \"consulting\", \"business\"],\n        \"publish\": [\"dev\"],\n        \"admin\": [\"dev\"]\n      },\n      \"metadata\": {\n        \"projectId\": \"proj-789\",\n        \"tags\": [\"new\", \"active\"]\n      }\n    }\n  },\n  \"id\": \"create-1\"\n}\n</code></pre>"},{"location":"API/#parameters_3","title":"Parameters","text":"Parameter Type Required Description <code>channel.id</code> string Yes Unique channel identifier <code>channel.name</code> string Yes Display name <code>channel.description</code> string No Channel description <code>channel.permissions</code> object Yes Access control settings <code>channel.metadata</code> object No Additional metadata"},{"location":"API/#response_3","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"created\": true,\n    \"channel\": {\n      \"id\": \"project-beta\",\n      \"name\": \"Project Beta\",\n      \"createdAt\": \"2025-10-11T14:35:00Z\",\n      \"createdBy\": \"user-alice-123\"\n    }\n  },\n  \"id\": \"create-1\"\n}\n</code></pre>"},{"location":"API/#7-delete-channel","title":"7. Delete Channel","text":"<p>Method: <code>notifications/channels/delete</code> Description: Delete a notification channel</p>"},{"location":"API/#request_6","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/channels/delete\",\n  \"params\": {\n    \"channel\": \"project-beta\"\n  },\n  \"id\": \"del-1\"\n}\n</code></pre>"},{"location":"API/#response_4","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"deleted\": true,\n    \"channel\": \"project-beta\",\n    \"unsubscribedClients\": 5\n  },\n  \"id\": \"del-1\"\n}\n</code></pre>"},{"location":"API/#8-get-channel-info","title":"8. Get Channel Info","text":"<p>Method: <code>notifications/channels/info</code> Description: Get detailed information about a channel</p>"},{"location":"API/#request_7","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/channels/info\",\n  \"params\": {\n    \"channel\": \"project-alpha\"\n  },\n  \"id\": \"info-1\"\n}\n</code></pre>"},{"location":"API/#response_5","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"channel\": {\n      \"id\": \"project-alpha\",\n      \"name\": \"Project Alpha\",\n      \"description\": \"Notifications for Project Alpha team\",\n      \"createdAt\": \"2025-10-01T10:00:00Z\",\n      \"createdBy\": \"user-admin-1\",\n      \"subscriberCount\": 12,\n      \"notificationCount\": 156,\n      \"lastNotificationAt\": \"2025-10-11T14:25:00Z\",\n      \"permissions\": {\n        \"subscribe\": [\"dev\", \"consulting\", \"business\"],\n        \"publish\": [\"dev\", \"consulting\"],\n        \"admin\": [\"dev\"]\n      },\n      \"metadata\": {\n        \"projectId\": \"proj-456\",\n        \"tags\": [\"active\", \"high-priority\"]\n      }\n    }\n  },\n  \"id\": \"info-1\"\n}\n</code></pre>"},{"location":"API/#9-list-my-subscriptions","title":"9. List My Subscriptions","text":"<p>Method: <code>notifications/subscriptions/list</code> Description: Get current client's subscriptions</p>"},{"location":"API/#request_8","title":"Request","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/subscriptions/list\",\n  \"params\": {},\n  \"id\": \"mysubs-1\"\n}\n</code></pre>"},{"location":"API/#response_6","title":"Response","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"subscriptions\": [\n      {\n        \"channel\": \"project-alpha\",\n        \"subscriptionId\": \"sub-7b8e9f10\",\n        \"subscribedAt\": \"2025-10-11T14:00:00Z\",\n        \"filters\": {\n          \"priority\": [\"high\", \"critical\"],\n          \"tags\": [\"backend\"]\n        }\n      },\n      {\n        \"channel\": \"general\",\n        \"subscriptionId\": \"sub-8c9fa01\",\n        \"subscribedAt\": \"2025-10-10T09:00:00Z\",\n        \"filters\": {}\n      }\n    ],\n    \"total\": 2\n  },\n  \"id\": \"mysubs-1\"\n}\n</code></pre>"},{"location":"API/#server-to-client-notifications","title":"Server-to-Client Notifications","text":""},{"location":"API/#notification-delivery","title":"Notification Delivery","text":"<p>Method: <code>notifications/message</code> (server-initiated) Description: Server sends notification to subscribed client</p>"},{"location":"API/#notification","title":"Notification","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/message\",\n  \"params\": {\n    \"channel\": \"project-alpha\",\n    \"notification\": {\n      \"schemaVersion\": \"1.0.0\",\n      \"sender\": {\n        \"id\": \"user-alice-123\",\n        \"name\": \"Alice Developer\",\n        \"role\": \"dev\",\n        \"aiTool\": \"claude\"\n      },\n      \"context\": {\n        \"theme\": \"architecture-decision\",\n        \"priority\": \"high\",\n        \"tags\": [\"backend\", \"database\"],\n        \"projectId\": \"proj-456\"\n      },\n      \"information\": {\n        \"title\": \"Database Migration Strategy\",\n        \"body\": \"Team decided to use Blue-Green deployment for database migration...\",\n        \"format\": \"markdown\"\n      },\n      \"metadata\": {\n        \"id\": \"notif-7b8e9f10\",\n        \"timestamp\": \"2025-10-11T14:30:00Z\",\n        \"channel\": \"project-alpha\",\n        \"sequence\": 42\n      },\n      \"actions\": [\n        {\n          \"type\": \"review\",\n          \"label\": \"Review Decision\",\n          \"url\": \"https://wiki.example.com/decision\"\n        }\n      ],\n      \"visibility\": {\n        \"teams\": [\"dev\", \"consulting\"]\n      }\n    }\n  }\n}\n</code></pre> <p>Note: This is a one-way notification from server to client. No response expected.</p>"},{"location":"API/#error-codes","title":"Error Codes","text":""},{"location":"API/#standard-json-rpc-errors","title":"Standard JSON-RPC Errors","text":"Code Message Description -32700 Parse error Invalid JSON -32600 Invalid Request Request format invalid -32601 Method not found Unknown method -32602 Invalid params Parameter validation failed -32603 Internal error Server internal error"},{"location":"API/#custom-application-errors","title":"Custom Application Errors","text":"Code Message Description -32001 Channel not found Requested channel doesn't exist -32002 Invalid notification schema Notification doesn't match schema -32003 Permission denied Client lacks required permission -32004 Already subscribed Already subscribed to channel -32005 Not subscribed Not subscribed to channel -32006 Channel already exists Channel ID already in use -32007 Rate limit exceeded Too many requests -32008 Invalid filter Subscription filter is invalid"},{"location":"API/#usage-examples","title":"Usage Examples","text":""},{"location":"API/#example-1-simple-subscribe-and-receive","title":"Example 1: Simple Subscribe and Receive","text":"<pre><code>// 1. Initialize connection\nawait client.initialize();\n\n// 2. Subscribe to channel\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\"\n  }\n});\n\n// 3. Handle incoming notifications\nclient.onNotification(\"notifications/message\", (notification) =&gt; {\n  console.log(\"Received:\", notification.params.notification);\n});\n</code></pre>"},{"location":"API/#example-2-publish-with-filters","title":"Example 2: Publish with Filters","text":"<pre><code>// 1. Subscribe with filters (dev team only, high priority)\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\",\n    filters: {\n      priority: [\"high\", \"critical\"],\n      roles: [\"dev\"]\n    }\n  }\n});\n\n// 2. Publish notification\nawait client.request({\n  method: \"notifications/publish\",\n  params: {\n    channel: \"project-alpha\",\n    notification: {\n      schemaVersion: \"1.0.0\",\n      sender: {\n        id: \"user-alice\",\n        name: \"Alice\",\n        role: \"dev\"\n      },\n      context: {\n        theme: \"alert\",\n        priority: \"high\"\n      },\n      information: {\n        title: \"Build Failed\",\n        body: \"Main branch build failed on commit abc123\"\n      }\n    }\n  }\n});\n</code></pre>"},{"location":"API/#example-3-create-custom-channel","title":"Example 3: Create Custom Channel","text":"<pre><code>// Create a project-specific channel\nawait client.request({\n  method: \"notifications/channels/create\",\n  params: {\n    channel: {\n      id: \"security-alerts\",\n      name: \"Security Alerts\",\n      description: \"Critical security notifications\",\n      permissions: {\n        subscribe: [\"dev\", \"consulting\", \"business\"],\n        publish: [\"dev\"],\n        admin: [\"dev\"]\n      },\n      metadata: {\n        tags: [\"security\", \"critical\"]\n      }\n    }\n  }\n});\n</code></pre>"},{"location":"API/#rate-limits","title":"Rate Limits","text":""},{"location":"API/#default-limits-configurable","title":"Default Limits (Configurable)","text":"Operation Limit Window Publish notification 100 per minute Subscribe 20 per minute Unsubscribe 20 per minute List channels 60 per minute Create channel 10 per hour <p>Rate Limit Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": -32007,\n    \"message\": \"Rate limit exceeded\",\n    \"data\": {\n      \"limit\": 100,\n      \"window\": \"60s\",\n      \"retryAfter\": \"2025-10-11T14:35:00Z\"\n    }\n  },\n  \"id\": \"pub-1\"\n}\n</code></pre></p>"},{"location":"API/#transport-specific-details","title":"Transport-Specific Details","text":""},{"location":"API/#stdio-transport","title":"stdio Transport","text":"<ul> <li>Use for local MCP clients (Claude Desktop, etc.)</li> <li>Request/response via stdin/stdout</li> <li>One client per process</li> </ul>"},{"location":"API/#http-transport","title":"HTTP Transport","text":"<ul> <li>RESTful-style over HTTP POST</li> <li>Supports multiple concurrent clients</li> <li>Endpoint: <code>http://localhost:3000/mcp</code></li> </ul>"},{"location":"API/#websocket-transport","title":"WebSocket Transport","text":"<ul> <li>Real-time bidirectional communication</li> <li>Best for web clients</li> <li>Endpoint: <code>ws://localhost:8080/mcp</code></li> </ul>"},{"location":"API/#versioning","title":"Versioning","text":""},{"location":"API/#api-versioning","title":"API Versioning","text":"<ul> <li>Current version: <code>1.0.0</code></li> <li>Version negotiated during <code>initialize</code></li> <li>Backward compatibility maintained within major version</li> </ul>"},{"location":"API/#schema-versioning","title":"Schema Versioning","text":"<ul> <li>Notification schema versioned separately</li> <li>Schema version in each notification: <code>schemaVersion</code></li> <li>Multiple schema versions supported simultaneously</li> </ul>"},{"location":"API/#references","title":"References","text":"<ul> <li>Model Context Protocol Specification</li> <li>JSON-RPC 2.0 Specification</li> <li>Notification Schema Documentation</li> <li>Architecture Documentation</li> </ul>"},{"location":"ARCHITECTURE/","title":"Notify-MCP Server Architecture","text":""},{"location":"ARCHITECTURE/#overview","title":"Overview","text":"<p>The Notify-MCP server is a Pub-Sub (Publish-Subscribe) notification system built on the Model Context Protocol (MCP). It enables team collaboration across genAI platforms (ChatGPT, Claude, Gemini) by providing a flexible, channel-based notification infrastructure.</p> <p>Architecture Pattern: Pub-Sub (Publish-Subscribe) Protocol: Model Context Protocol (MCP) over JSON-RPC 2.0 Communication Style: Asynchronous, event-driven</p>"},{"location":"ARCHITECTURE/#system-architecture","title":"System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        MCP Clients                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502  \u2502  Claude  \u2502  \u2502 ChatGPT  \u2502  \u2502  Gemini  \u2502  \u2502  Custom  \u2502       \u2502\n\u2502  \u2502  Client  \u2502  \u2502  Client  \u2502  \u2502  Client  \u2502  \u2502   App    \u2502       \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502       \u2502             \u2502              \u2502             \u2502              \u2502\n\u2502       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2502                     \u2502                                           \u2502\n\u2502              MCP Transport Layer                                \u2502\n\u2502         (stdio / HTTP / WebSocket)                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Notify-MCP Server                              \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502              MCP Protocol Handler                         \u2502 \u2502\n\u2502  \u2502  \u2022 Request handling                                       \u2502 \u2502\n\u2502  \u2502  \u2022 Notification delivery                                  \u2502 \u2502\n\u2502  \u2502  \u2022 JSON-RPC 2.0 message processing                       \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                            \u2502                                    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502              Core Services Layer                          \u2502 \u2502\n\u2502  \u2502                                                           \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502 \u2502\n\u2502  \u2502  \u2502  Subscription    \u2502  \u2502   Notification   \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502   Manager        \u2502  \u2502     Router       \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502                  \u2502  \u2502                  \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502 \u2022 Subscribe      \u2502  \u2502 \u2022 Publish        \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502 \u2022 Unsubscribe    \u2502  \u2502 \u2022 Route          \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502 \u2022 List channels  \u2502  \u2502 \u2022 Filter         \u2502            \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502 \u2502\n\u2502  \u2502                                                           \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502 \u2502\n\u2502  \u2502  \u2502     Channel      \u2502  \u2502    Notification  \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502     Manager      \u2502  \u2502     Validator    \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502                  \u2502  \u2502                  \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502 \u2022 Create channel \u2502  \u2502 \u2022 Schema check   \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502 \u2022 Delete channel \u2502  \u2502 \u2022 Validate       \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502 \u2022 Permissions    \u2502  \u2502 \u2022 Transform      \u2502            \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                            \u2502                                    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502              Storage Layer (Optional)                     \u2502 \u2502\n\u2502  \u2502                                                           \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502 \u2502\n\u2502  \u2502  \u2502   Subscription   \u2502  \u2502   Notification   \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502      Store       \u2502  \u2502     History      \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502                  \u2502  \u2502                  \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502 \u2022 In-memory      \u2502  \u2502 \u2022 In-memory      \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502 \u2022 File-based     \u2502  \u2502 \u2022 File-based     \u2502            \u2502 \u2502\n\u2502  \u2502  \u2502 \u2022 Redis (future) \u2502  \u2502 \u2022 Redis (future) \u2502            \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ARCHITECTURE/#core-components","title":"Core Components","text":""},{"location":"ARCHITECTURE/#1-mcp-protocol-handler","title":"1. MCP Protocol Handler","text":"<p>Responsibility: Handle MCP protocol communication with clients</p> <p>Functions: - Accept client connections (stdio, HTTP, WebSocket) - Parse JSON-RPC 2.0 messages - Route requests to appropriate services - Send notifications to subscribed clients - Handle capability negotiation</p> <p>MCP Methods Supported: - <code>initialize</code>: Client initialization - <code>notifications/subscribe</code>: Subscribe to channels - <code>notifications/unsubscribe</code>: Unsubscribe from channels - <code>notifications/publish</code>: Publish notification - <code>notifications/list</code>: List available channels - Server-sent notifications via MCP notification mechanism</p>"},{"location":"ARCHITECTURE/#2-subscription-manager","title":"2. Subscription Manager","text":"<p>Responsibility: Manage client subscriptions to notification channels</p> <p>Data Structure: <pre><code>{\n  \"channel-name\": [\n    {\n      \"clientId\": \"client-123\",\n      \"filters\": {\n        \"priority\": [\"high\", \"critical\"],\n        \"tags\": [\"backend\", \"security\"],\n        \"roles\": [\"dev\", \"consulting\"]\n      },\n      \"subscribedAt\": \"2025-10-11T14:00:00Z\"\n    }\n  ]\n}\n</code></pre></p> <p>Operations: - <code>subscribe(clientId, channel, filters)</code>: Add subscription - <code>unsubscribe(clientId, channel)</code>: Remove subscription - <code>getSubscribers(channel)</code>: Get all subscribers for a channel - <code>getSubscriptions(clientId)</code>: Get all subscriptions for a client - <code>applyFilters(notification, filters)</code>: Check if notification matches filters</p>"},{"location":"ARCHITECTURE/#3-notification-router","title":"3. Notification Router","text":"<p>Responsibility: Route notifications to subscribed clients</p> <p>Algorithm: 1. Receive notification from publisher 2. Identify target channel(s) 3. Get all subscribers for channel(s) 4. Apply filters for each subscriber 5. Deliver notification to matching subscribers 6. Track delivery status</p> <p>Delivery Modes: - Broadcast: Send to all subscribers (no filters) - Filtered: Send only to matching subscribers - Direct: Send to specific client(s)</p>"},{"location":"ARCHITECTURE/#4-channel-manager","title":"4. Channel Manager","text":"<p>Responsibility: Manage notification channels</p> <p>Channel Properties: <pre><code>{\n  \"id\": \"project-alpha\",\n  \"name\": \"Project Alpha\",\n  \"description\": \"Notifications for Project Alpha team\",\n  \"createdAt\": \"2025-10-11T10:00:00Z\",\n  \"createdBy\": \"user-123\",\n  \"permissions\": {\n    \"publish\": [\"dev\", \"consulting\", \"business\"],\n    \"subscribe\": [\"dev\", \"consulting\", \"business\", \"viewer\"]\n  },\n  \"metadata\": {\n    \"projectId\": \"proj-456\",\n    \"tags\": [\"active\", \"high-priority\"]\n  }\n}\n</code></pre></p> <p>Operations: - <code>createChannel(name, permissions)</code>: Create new channel - <code>deleteChannel(channelId)</code>: Delete channel - <code>listChannels()</code>: List all channels - <code>getChannel(channelId)</code>: Get channel details - <code>updatePermissions(channelId, permissions)</code>: Update access control</p>"},{"location":"ARCHITECTURE/#5-notification-validator","title":"5. Notification Validator","text":"<p>Responsibility: Validate and transform notifications</p> <p>Functions: - Schema validation (using <code>schemas/notification-schema.json</code>) - Version compatibility checking - Default value injection - Metadata generation (id, timestamp, sequence) - Format transformation (if needed)</p> <p>Validation Flow: <pre><code>Incoming Notification\n    \u2502\n    \u251c\u2500&gt; Check schemaVersion\n    \u251c\u2500&gt; Validate against JSON Schema\n    \u251c\u2500&gt; Inject system metadata\n    \u251c\u2500&gt; Apply defaults\n    \u251c\u2500&gt; Transform if needed\n    \u2502\n    \u2514\u2500&gt; Valid Notification \u2192 Router\n         Invalid \u2192 Error response\n</code></pre></p>"},{"location":"ARCHITECTURE/#6-storage-layer-pluggable","title":"6. Storage Layer (Pluggable)","text":"<p>Responsibility: Persist subscriptions and notification history</p> <p>Initial Implementation: In-memory Future Options: File-based, Redis, PostgreSQL</p> <p>Storage Interface: <pre><code>interface StorageAdapter {\n  // Subscriptions\n  saveSubscription(subscription: Subscription): Promise&lt;void&gt;;\n  deleteSubscription(clientId: string, channel: string): Promise&lt;void&gt;;\n  getSubscriptions(channel: string): Promise&lt;Subscription[]&gt;;\n\n  // Notification history\n  saveNotification(notification: Notification): Promise&lt;void&gt;;\n  getNotifications(channel: string, limit?: number): Promise&lt;Notification[]&gt;;\n\n  // Channels\n  saveChannel(channel: Channel): Promise&lt;void&gt;;\n  deleteChannel(channelId: string): Promise&lt;void&gt;;\n  getChannels(): Promise&lt;Channel[]&gt;;\n}\n</code></pre></p>"},{"location":"ARCHITECTURE/#data-flow","title":"Data Flow","text":""},{"location":"ARCHITECTURE/#publishing-a-notification","title":"Publishing a Notification","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Client  \u2502\n\u2502 (Alice) \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 1. publish_notification\n     \u2502    {channel: \"project-alpha\", ...}\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  MCP Protocol   \u2502\n\u2502    Handler      \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 2. Validate\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Notification   \u2502\n\u2502   Validator     \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 3. Route\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Notification   \u2502\n\u2502     Router      \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 4. Get subscribers\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Subscription   \u2502\n\u2502    Manager      \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 5. Filter &amp; Deliver\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u25bc                \u25bc                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Client  \u2502     \u2502 Client  \u2502     \u2502 Client  \u2502\n\u2502  (Bob)  \u2502     \u2502 (Carol) \u2502     \u2502 (Dave)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   (Dev)        (Consulting)      (Business)\n</code></pre>"},{"location":"ARCHITECTURE/#subscribing-to-a-channel","title":"Subscribing to a Channel","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Client  \u2502\n\u2502 (Bob)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 1. subscribe\n     \u2502    {channel: \"project-alpha\", filters: {...}}\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  MCP Protocol   \u2502\n\u2502    Handler      \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 2. Check permissions\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Channel     \u2502\n\u2502     Manager     \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 3. Add subscription\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Subscription   \u2502\n\u2502    Manager      \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 4. Persist (optional)\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Storage Layer  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 5. Success response\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Client  \u2502\n\u2502 (Bob)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ARCHITECTURE/#communication-patterns","title":"Communication Patterns","text":""},{"location":"ARCHITECTURE/#1-broadcast-pattern","title":"1. Broadcast Pattern","text":"<ul> <li>Publisher sends to channel</li> <li>All subscribers receive notification</li> <li>No filtering applied</li> <li>Use case: General announcements</li> </ul>"},{"location":"ARCHITECTURE/#2-filtered-pattern","title":"2. Filtered Pattern","text":"<ul> <li>Publisher sends to channel</li> <li>Subscribers specify filters (priority, tags, roles)</li> <li>Only matching subscribers receive notification</li> <li>Use case: Targeted team notifications</li> </ul>"},{"location":"ARCHITECTURE/#3-direct-pattern","title":"3. Direct Pattern","text":"<ul> <li>Publisher sends to specific client(s)</li> <li>Bypasses channel subscriptions</li> <li>Use case: Direct messages, responses</li> </ul>"},{"location":"ARCHITECTURE/#4-threading-pattern","title":"4. Threading Pattern","text":"<ul> <li>Notifications can reference parent (replyTo)</li> <li>Enables conversation threads</li> <li>Use case: Decision discussions</li> </ul>"},{"location":"ARCHITECTURE/#security-access-control","title":"Security &amp; Access Control","text":""},{"location":"ARCHITECTURE/#channel-level-permissions","title":"Channel-Level Permissions","text":"<pre><code>{\n  \"permissions\": {\n    \"publish\": [\"dev\", \"consulting\"],      // Who can publish\n    \"subscribe\": [\"dev\", \"consulting\", \"business\"],  // Who can subscribe\n    \"admin\": [\"dev\"]                      // Who can manage channel\n  }\n}\n</code></pre>"},{"location":"ARCHITECTURE/#notification-level-visibility","title":"Notification-Level Visibility","text":"<pre><code>{\n  \"visibility\": {\n    \"teams\": [\"dev\", \"consulting\"],       // Team-based filtering\n    \"private\": false,                     // Private notifications\n    \"allowedUsers\": [\"user-123\"]          // User-specific access\n  }\n}\n</code></pre>"},{"location":"ARCHITECTURE/#authentication-future","title":"Authentication (Future)","text":"<ul> <li>Client authentication via MCP capabilities</li> <li>API tokens or OAuth integration</li> <li>Role-based access control (RBAC)</li> </ul>"},{"location":"ARCHITECTURE/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"ARCHITECTURE/#phase-1-single-server-mvp","title":"Phase 1: Single Server (MVP)","text":"<ul> <li>In-memory storage</li> <li>Single server instance</li> <li>stdio/HTTP transport</li> <li>Supports 10-100 concurrent clients</li> </ul>"},{"location":"ARCHITECTURE/#phase-2-persistent-storage","title":"Phase 2: Persistent Storage","text":"<ul> <li>File-based or Redis storage</li> <li>Notification history</li> <li>Subscription persistence</li> <li>Supports 100-1000 clients</li> </ul>"},{"location":"ARCHITECTURE/#phase-3-distributed-future","title":"Phase 3: Distributed (Future)","text":"<ul> <li>Multiple server instances</li> <li>Redis Pub-Sub backend</li> <li>Load balancing</li> <li>Horizontal scaling</li> <li>Supports 1000+ clients</li> </ul>"},{"location":"ARCHITECTURE/#technology-stack","title":"Technology Stack","text":""},{"location":"ARCHITECTURE/#language-options","title":"Language Options","text":"<ol> <li>Node.js/TypeScript (Recommended)</li> <li>Excellent MCP SDK support</li> <li>Strong async/event-driven model</li> <li> <p>Large ecosystem</p> </li> <li> <p>Python</p> </li> <li>Good MCP SDK</li> <li>Strong data processing</li> <li> <p>ML/AI integration potential</p> </li> <li> <p>Go</p> </li> <li>High performance</li> <li>Native concurrency</li> <li>Small footprint</li> </ol>"},{"location":"ARCHITECTURE/#dependencies","title":"Dependencies","text":"<ul> <li>MCP SDK (@modelcontextprotocol/sdk)</li> <li>JSON Schema validator (ajv, jsonschema)</li> <li>WebSocket library (ws, socket.io)</li> <li>Storage adapter (redis, sqlite, etc.)</li> </ul>"},{"location":"ARCHITECTURE/#deployment-modes","title":"Deployment Modes","text":""},{"location":"ARCHITECTURE/#1-standalone-server","title":"1. Standalone Server","text":"<pre><code>mcp-server --transport stdio\nmcp-server --transport http --port 3000\nmcp-server --transport ws --port 8080\n</code></pre>"},{"location":"ARCHITECTURE/#2-embedded-mode","title":"2. Embedded Mode","text":"<ul> <li>Library integration</li> <li>Run within application</li> <li>Direct API access</li> </ul>"},{"location":"ARCHITECTURE/#3-cloud-deployment","title":"3. Cloud Deployment","text":"<ul> <li>Docker container</li> <li>Kubernetes pod</li> <li>Serverless function (future)</li> </ul>"},{"location":"ARCHITECTURE/#configuration","title":"Configuration","text":""},{"location":"ARCHITECTURE/#server-configuration","title":"Server Configuration","text":"<pre><code>{\n  \"server\": {\n    \"name\": \"notify-mcp\",\n    \"version\": \"1.0.0\",\n    \"transport\": \"stdio\",\n    \"host\": \"localhost\",\n    \"port\": 3000\n  },\n  \"storage\": {\n    \"type\": \"memory\",\n    \"path\": \"./data\",\n    \"ttl\": 86400\n  },\n  \"notifications\": {\n    \"maxHistoryPerChannel\": 1000,\n    \"defaultExpiry\": 604800,\n    \"enablePersistence\": false\n  },\n  \"security\": {\n    \"requireAuth\": false,\n    \"allowAnonymous\": true\n  }\n}\n</code></pre>"},{"location":"ARCHITECTURE/#mcp-capabilities","title":"MCP Capabilities","text":""},{"location":"ARCHITECTURE/#server-capabilities","title":"Server Capabilities","text":"<pre><code>{\n  \"capabilities\": {\n    \"notifications\": {\n      \"supported\": true,\n      \"channels\": true,\n      \"filters\": true,\n      \"persistence\": false\n    }\n  }\n}\n</code></pre>"},{"location":"ARCHITECTURE/#error-handling","title":"Error Handling","text":""},{"location":"ARCHITECTURE/#error-types","title":"Error Types","text":"<ul> <li><code>INVALID_SCHEMA</code>: Notification doesn't match schema</li> <li><code>CHANNEL_NOT_FOUND</code>: Target channel doesn't exist</li> <li><code>PERMISSION_DENIED</code>: Client lacks permission</li> <li><code>RATE_LIMIT_EXCEEDED</code>: Too many notifications</li> <li><code>INVALID_FILTER</code>: Subscription filter invalid</li> </ul>"},{"location":"ARCHITECTURE/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": -32600,\n    \"message\": \"Invalid notification schema\",\n    \"data\": {\n      \"schemaErrors\": [...]\n    }\n  },\n  \"id\": \"request-123\"\n}\n</code></pre>"},{"location":"ARCHITECTURE/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"ARCHITECTURE/#metrics-to-track","title":"Metrics to Track","text":"<ul> <li>Active connections</li> <li>Subscriptions per channel</li> <li>Notifications published per channel</li> <li>Delivery success rate</li> <li>Average latency</li> <li>Error rates</li> </ul>"},{"location":"ARCHITECTURE/#logging","title":"Logging","text":"<ul> <li>Notification events</li> <li>Subscription changes</li> <li>Errors and exceptions</li> <li>Performance metrics</li> </ul>"},{"location":"ARCHITECTURE/#future-enhancements","title":"Future Enhancements","text":""},{"location":"ARCHITECTURE/#phase-2","title":"Phase 2","text":"<ul> <li> Persistent storage (Redis/PostgreSQL)</li> <li> Notification history API</li> <li> Search and filtering</li> <li> Authentication system</li> </ul>"},{"location":"ARCHITECTURE/#phase-3","title":"Phase 3","text":"<ul> <li> Distributed architecture</li> <li> Load balancing</li> <li> High availability</li> <li> Rate limiting</li> </ul>"},{"location":"ARCHITECTURE/#phase-4","title":"Phase 4","text":"<ul> <li> Web UI for management</li> <li> Analytics dashboard</li> <li> Integration webhooks</li> <li> AI-powered notification summarization</li> </ul>"},{"location":"ARCHITECTURE/#references","title":"References","text":"<ul> <li>Model Context Protocol Specification</li> <li>JSON-RPC 2.0 Specification</li> <li>Pub-Sub Pattern</li> </ul>"},{"location":"MCP_PRIMITIVES/","title":"MCP Server Primitives: Tools, Resources, and Prompts","text":""},{"location":"MCP_PRIMITIVES/#overview","title":"Overview","text":"<p>The Model Context Protocol (MCP) defines three core primitives that servers can expose to clients. This document explains how to define and implement these primitives in the Notify-MCP server.</p> <p>Specification Version: 2025-06-18 Protocol: JSON-RPC 2.0</p>"},{"location":"MCP_PRIMITIVES/#the-three-primitives","title":"The Three Primitives","text":""},{"location":"MCP_PRIMITIVES/#1-tools-model-controlled","title":"1. Tools (Model-controlled)","text":"<p>Definition: Executable functions that perform actions or computations.</p> <p>Control: The AI model decides when to invoke tools based on user requests.</p> <p>Purpose: Enable the AI to interact with external systems, perform operations, and modify state.</p> <p>Examples in Notify-MCP: - <code>publish_notification</code>: Publish a notification to a channel - <code>create_channel</code>: Create a new notification channel - <code>subscribe_to_channel</code>: Subscribe to notifications</p>"},{"location":"MCP_PRIMITIVES/#2-resources-application-controlled","title":"2. Resources (Application-controlled)","text":"<p>Definition: Data sources that provide context to the AI without side effects.</p> <p>Control: The application (client) provides these as context to the model.</p> <p>Purpose: Give the AI access to data for reading and understanding.</p> <p>Examples in Notify-MCP: - <code>notification://project-alpha/recent</code>: Recent notifications from a channel - <code>channel://project-alpha/info</code>: Channel information and metadata - <code>subscription://my-subscriptions</code>: Current user's subscriptions</p>"},{"location":"MCP_PRIMITIVES/#3-prompts-user-controlled","title":"3. Prompts (User-controlled)","text":"<p>Definition: Pre-defined templates that guide AI interactions.</p> <p>Control: The user explicitly selects which prompts to use.</p> <p>Purpose: Provide reusable templates for common workflows and interactions.</p> <p>Examples in Notify-MCP: - <code>create_decision_notification</code>: Template for architecture decisions - <code>send_alert</code>: Template for critical alerts - <code>start_discussion</code>: Template for team discussions</p>"},{"location":"MCP_PRIMITIVES/#tools-definition","title":"Tools Definition","text":""},{"location":"MCP_PRIMITIVES/#tool-structure","title":"Tool Structure","text":"<pre><code>{\n  \"name\": \"publish_notification\",\n  \"title\": \"Publish Notification\",\n  \"description\": \"Publish a notification to a channel\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"channel\": {\n        \"type\": \"string\",\n        \"description\": \"Target channel name\"\n      },\n      \"title\": {\n        \"type\": \"string\",\n        \"description\": \"Notification title\"\n      },\n      \"body\": {\n        \"type\": \"string\",\n        \"description\": \"Notification body\"\n      },\n      \"priority\": {\n        \"type\": \"string\",\n        \"enum\": [\"low\", \"medium\", \"high\", \"critical\"],\n        \"description\": \"Priority level\"\n      },\n      \"theme\": {\n        \"type\": \"string\",\n        \"enum\": [\"architecture-decision\", \"state-update\", \"alert\", \"question\", \"discussion\"],\n        \"description\": \"Notification theme\"\n      }\n    },\n    \"required\": [\"channel\", \"title\", \"body\"]\n  }\n}\n</code></pre>"},{"location":"MCP_PRIMITIVES/#tool-methods","title":"Tool Methods","text":""},{"location":"MCP_PRIMITIVES/#list-tools","title":"List Tools","text":"<p>Method: <code>tools/list</code></p> <p>Request: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/list\",\n  \"id\": \"tools-1\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"publish_notification\",\n        \"title\": \"Publish Notification\",\n        \"description\": \"Publish a notification to a channel\",\n        \"inputSchema\": { /* JSON Schema */ }\n      },\n      {\n        \"name\": \"subscribe_to_channel\",\n        \"title\": \"Subscribe to Channel\",\n        \"description\": \"Subscribe to notifications from a channel\",\n        \"inputSchema\": { /* JSON Schema */ }\n      }\n    ]\n  },\n  \"id\": \"tools-1\"\n}\n</code></pre></p>"},{"location":"MCP_PRIMITIVES/#call-tool","title":"Call Tool","text":"<p>Method: <code>tools/call</code></p> <p>Request: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"publish_notification\",\n    \"arguments\": {\n      \"channel\": \"project-alpha\",\n      \"title\": \"Database Migration Decided\",\n      \"body\": \"Team decided on Blue-Green deployment\",\n      \"priority\": \"high\",\n      \"theme\": \"architecture-decision\"\n    }\n  },\n  \"id\": \"call-1\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Notification published successfully to project-alpha. Notification ID: notif-7b8e9f10, delivered to 5 subscribers.\"\n      }\n    ]\n  },\n  \"id\": \"call-1\"\n}\n</code></pre></p>"},{"location":"MCP_PRIMITIVES/#notify-mcp-tools","title":"Notify-MCP Tools","text":""},{"location":"MCP_PRIMITIVES/#1-publish_notification","title":"1. <code>publish_notification</code>","text":"<p>Publish a notification to a channel.</p> <p>Input: - <code>channel</code> (required): Target channel - <code>title</code> (required): Notification title - <code>body</code> (required): Notification content - <code>priority</code>: Priority level (default: medium) - <code>theme</code>: Notification theme - <code>tags</code>: Array of tags - <code>format</code>: Content format (text/markdown/json)</p> <p>Output: Notification ID and delivery status</p>"},{"location":"MCP_PRIMITIVES/#2-subscribe_to_channel","title":"2. <code>subscribe_to_channel</code>","text":"<p>Subscribe to a notification channel.</p> <p>Input: - <code>channel</code> (required): Channel to subscribe to - <code>priority_filter</code>: Filter by priority - <code>tag_filter</code>: Filter by tags - <code>theme_filter</code>: Filter by themes</p> <p>Output: Subscription confirmation and ID</p>"},{"location":"MCP_PRIMITIVES/#3-unsubscribe_from_channel","title":"3. <code>unsubscribe_from_channel</code>","text":"<p>Unsubscribe from a channel.</p> <p>Input: - <code>channel</code> (required): Channel to unsubscribe from</p> <p>Output: Unsubscribe confirmation</p>"},{"location":"MCP_PRIMITIVES/#4-list_channels","title":"4. <code>list_channels</code>","text":"<p>List available channels.</p> <p>Input: - <code>filter_tags</code>: Optional tag filter</p> <p>Output: Array of channel information</p>"},{"location":"MCP_PRIMITIVES/#5-create_channel","title":"5. <code>create_channel</code>","text":"<p>Create a new notification channel.</p> <p>Input: - <code>channel_id</code> (required): Unique channel identifier - <code>name</code> (required): Display name - <code>description</code>: Channel description - <code>permissions</code>: Access control settings</p> <p>Output: Channel creation confirmation</p>"},{"location":"MCP_PRIMITIVES/#6-get_my_subscriptions","title":"6. <code>get_my_subscriptions</code>","text":"<p>Get current user's subscriptions.</p> <p>Input: None</p> <p>Output: Array of subscription details</p>"},{"location":"MCP_PRIMITIVES/#resources-definition","title":"Resources Definition","text":""},{"location":"MCP_PRIMITIVES/#resource-structure","title":"Resource Structure","text":"<p>Resources are identified by URI: <pre><code>&lt;scheme&gt;://&lt;path&gt;\n</code></pre></p> <p>Examples: - <code>notification://project-alpha/recent</code> - <code>channel://project-alpha/info</code> - <code>subscription://my-subscriptions</code></p>"},{"location":"MCP_PRIMITIVES/#resource-methods","title":"Resource Methods","text":""},{"location":"MCP_PRIMITIVES/#list-resources","title":"List Resources","text":"<p>Method: <code>resources/list</code></p> <p>Request: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/list\",\n  \"id\": \"res-1\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"resources\": [\n      {\n        \"uri\": \"notification://project-alpha/recent\",\n        \"name\": \"Recent Notifications - Project Alpha\",\n        \"description\": \"Last 50 notifications from Project Alpha channel\",\n        \"mimeType\": \"application/json\"\n      },\n      {\n        \"uri\": \"channel://project-alpha/info\",\n        \"name\": \"Project Alpha Channel Info\",\n        \"description\": \"Metadata and statistics for Project Alpha channel\",\n        \"mimeType\": \"application/json\"\n      }\n    ]\n  },\n  \"id\": \"res-1\"\n}\n</code></pre></p>"},{"location":"MCP_PRIMITIVES/#read-resource","title":"Read Resource","text":"<p>Method: <code>resources/read</code></p> <p>Request: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"notification://project-alpha/recent\"\n  },\n  \"id\": \"read-1\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"contents\": [\n      {\n        \"uri\": \"notification://project-alpha/recent\",\n        \"mimeType\": \"application/json\",\n        \"text\": \"[{\\\"id\\\": \\\"notif-1\\\", \\\"title\\\": \\\"...\\\", ...}, ...]\"\n      }\n    ]\n  },\n  \"id\": \"read-1\"\n}\n</code></pre></p>"},{"location":"MCP_PRIMITIVES/#notify-mcp-resources","title":"Notify-MCP Resources","text":""},{"location":"MCP_PRIMITIVES/#1-notificationchannelrecent","title":"1. <code>notification://&lt;channel&gt;/recent</code>","text":"<p>Recent notifications from a channel.</p> <p>Returns: Last 50 notifications (JSON array)</p> <p>Example: <pre><code>[\n  {\n    \"id\": \"notif-7b8e9f10\",\n    \"title\": \"Database Migration Decided\",\n    \"priority\": \"high\",\n    \"timestamp\": \"2025-10-11T14:30:00Z\",\n    ...\n  }\n]\n</code></pre></p>"},{"location":"MCP_PRIMITIVES/#2-channelchannelinfo","title":"2. <code>channel://&lt;channel&gt;/info</code>","text":"<p>Channel information and metadata.</p> <p>Returns: Channel details (JSON object)</p> <p>Example: <pre><code>{\n  \"id\": \"project-alpha\",\n  \"name\": \"Project Alpha\",\n  \"subscriberCount\": 12,\n  \"notificationCount\": 156,\n  \"permissions\": {...}\n}\n</code></pre></p>"},{"location":"MCP_PRIMITIVES/#3-subscriptionmy-subscriptions","title":"3. <code>subscription://my-subscriptions</code>","text":"<p>Current user's subscriptions.</p> <p>Returns: Array of subscription details</p>"},{"location":"MCP_PRIMITIVES/#4-notificationchannelhistorydays7","title":"4. <code>notification://&lt;channel&gt;/history?days=7</code>","text":"<p>Historical notifications from a channel.</p> <p>Parameters: - <code>days</code>: Number of days to look back</p> <p>Returns: Notification history</p>"},{"location":"MCP_PRIMITIVES/#prompts-definition","title":"Prompts Definition","text":""},{"location":"MCP_PRIMITIVES/#prompt-structure","title":"Prompt Structure","text":"<pre><code>{\n  \"name\": \"create_decision_notification\",\n  \"title\": \"Create Architecture Decision Notification\",\n  \"description\": \"Template for broadcasting architecture decisions to the team\",\n  \"arguments\": [\n    {\n      \"name\": \"decision_title\",\n      \"description\": \"Brief title of the decision\",\n      \"required\": true\n    },\n    {\n      \"name\": \"context\",\n      \"description\": \"Background and context for the decision\",\n      \"required\": true\n    },\n    {\n      \"name\": \"decision\",\n      \"description\": \"The decision that was made\",\n      \"required\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"MCP_PRIMITIVES/#prompt-methods","title":"Prompt Methods","text":""},{"location":"MCP_PRIMITIVES/#list-prompts","title":"List Prompts","text":"<p>Method: <code>prompts/list</code></p> <p>Request: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"prompts/list\",\n  \"id\": \"prompt-1\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"prompts\": [\n      {\n        \"name\": \"create_decision_notification\",\n        \"title\": \"Create Architecture Decision\",\n        \"description\": \"Template for architecture decisions\",\n        \"arguments\": [...]\n      },\n      {\n        \"name\": \"send_alert\",\n        \"title\": \"Send Critical Alert\",\n        \"description\": \"Template for critical alerts\",\n        \"arguments\": [...]\n      }\n    ]\n  },\n  \"id\": \"prompt-1\"\n}\n</code></pre></p>"},{"location":"MCP_PRIMITIVES/#get-prompt","title":"Get Prompt","text":"<p>Method: <code>prompts/get</code></p> <p>Request: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"prompts/get\",\n  \"params\": {\n    \"name\": \"create_decision_notification\",\n    \"arguments\": {\n      \"decision_title\": \"Blue-Green Database Migration\",\n      \"context\": \"Need zero-downtime deployments\",\n      \"decision\": \"Implement Blue-Green deployment strategy\"\n    }\n  },\n  \"id\": \"get-1\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"Please create an architecture decision notification with the following details:\\n\\nTitle: Blue-Green Database Migration\\n\\nContext: Need zero-downtime deployments\\n\\nDecision: Implement Blue-Green deployment strategy\\n\\nFormat this as a professional team notification with consequences and next steps.\"\n        }\n      }\n    ]\n  },\n  \"id\": \"get-1\"\n}\n</code></pre></p>"},{"location":"MCP_PRIMITIVES/#notify-mcp-prompts","title":"Notify-MCP Prompts","text":""},{"location":"MCP_PRIMITIVES/#1-create_decision_notification","title":"1. <code>create_decision_notification</code>","text":"<p>Template for architecture/design decisions.</p> <p>Arguments: - <code>decision_title</code>: Brief title - <code>context</code>: Background - <code>decision</code>: What was decided - <code>consequences</code>: Optional consequences - <code>next_steps</code>: Optional next steps</p> <p>Output: Formatted message for publishing decision</p>"},{"location":"MCP_PRIMITIVES/#2-send_alert","title":"2. <code>send_alert</code>","text":"<p>Template for critical alerts.</p> <p>Arguments: - <code>alert_title</code>: Alert title - <code>severity</code>: Severity level - <code>impact</code>: Impact description - <code>action_required</code>: Required actions</p> <p>Output: Formatted alert notification</p>"},{"location":"MCP_PRIMITIVES/#3-start_discussion","title":"3. <code>start_discussion</code>","text":"<p>Template for starting team discussions.</p> <p>Arguments: - <code>topic</code>: Discussion topic - <code>question</code>: Question to pose - <code>context</code>: Background context - <code>options</code>: Optional list of options</p> <p>Output: Formatted discussion starter</p>"},{"location":"MCP_PRIMITIVES/#4-sync_memory","title":"4. <code>sync_memory</code>","text":"<p>Template for sharing AI conversation insights.</p> <p>Arguments: - <code>insight_title</code>: Title of the insight - <code>source_ai</code>: AI tool used (Claude/ChatGPT/Gemini) - <code>conversation_summary</code>: Summary of relevant conversation - <code>key_points</code>: Key takeaways - <code>impact</code>: How this affects the team</p> <p>Output: Formatted memory sync notification</p>"},{"location":"MCP_PRIMITIVES/#5-milestone_update","title":"5. <code>milestone_update</code>","text":"<p>Template for project milestone notifications.</p> <p>Arguments: - <code>milestone_name</code>: Milestone title - <code>achievements</code>: List of achievements - <code>metrics</code>: Optional metrics/stats - <code>next_focus</code>: What's next</p> <p>Output: Formatted milestone update</p>"},{"location":"MCP_PRIMITIVES/#capability-declaration","title":"Capability Declaration","text":"<p>MCP servers must declare which primitives they support during initialization:</p> <pre><code>{\n  \"capabilities\": {\n    \"tools\": {\n      \"listChanged\": true\n    },\n    \"resources\": {\n      \"subscribe\": true,\n      \"listChanged\": true\n    },\n    \"prompts\": {\n      \"listChanged\": true\n    }\n  }\n}\n</code></pre>"},{"location":"MCP_PRIMITIVES/#security-considerations","title":"Security Considerations","text":""},{"location":"MCP_PRIMITIVES/#tools","title":"Tools","text":"<ul> <li>Require user approval for destructive operations</li> <li>Validate all inputs against schema</li> <li>Implement rate limiting</li> <li>Log all tool invocations</li> </ul>"},{"location":"MCP_PRIMITIVES/#resources","title":"Resources","text":"<ul> <li>Implement access controls</li> <li>Validate resource URIs</li> <li>Prevent resource enumeration attacks</li> <li>Rate limit resource reads</li> </ul>"},{"location":"MCP_PRIMITIVES/#prompts","title":"Prompts","text":"<ul> <li>Sanitize all prompt arguments</li> <li>Prevent injection attacks</li> <li>Validate argument types</li> <li>Limit prompt complexity</li> </ul>"},{"location":"MCP_PRIMITIVES/#implementation-example","title":"Implementation Example","text":""},{"location":"MCP_PRIMITIVES/#typescript-mcp-server","title":"TypeScript MCP Server","text":"<pre><code>import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\n\nconst server = new Server({\n  name: \"notify-mcp\",\n  version: \"1.0.0\"\n}, {\n  capabilities: {\n    tools: { listChanged: true },\n    resources: { subscribe: true, listChanged: true },\n    prompts: { listChanged: true }\n  }\n});\n\n// Register tools\nserver.setRequestHandler(\"tools/list\", async () =&gt; ({\n  tools: [\n    {\n      name: \"publish_notification\",\n      title: \"Publish Notification\",\n      description: \"Publish a notification to a channel\",\n      inputSchema: { /* ... */ }\n    }\n  ]\n}));\n\nserver.setRequestHandler(\"tools/call\", async (request) =&gt; {\n  const { name, arguments: args } = request.params;\n\n  if (name === \"publish_notification\") {\n    // Handle notification publishing\n    return {\n      content: [{\n        type: \"text\",\n        text: \"Notification published successfully\"\n      }]\n    };\n  }\n});\n\n// Register resources\nserver.setRequestHandler(\"resources/list\", async () =&gt; ({\n  resources: [\n    {\n      uri: \"notification://project-alpha/recent\",\n      name: \"Recent Notifications - Project Alpha\",\n      mimeType: \"application/json\"\n    }\n  ]\n}));\n\nserver.setRequestHandler(\"resources/read\", async (request) =&gt; {\n  const { uri } = request.params;\n\n  // Fetch and return resource data\n  return {\n    contents: [{\n      uri,\n      mimeType: \"application/json\",\n      text: JSON.stringify(data)\n    }]\n  };\n});\n\n// Register prompts\nserver.setRequestHandler(\"prompts/list\", async () =&gt; ({\n  prompts: [\n    {\n      name: \"create_decision_notification\",\n      title: \"Create Architecture Decision\",\n      arguments: [/* ... */]\n    }\n  ]\n}));\n\nserver.setRequestHandler(\"prompts/get\", async (request) =&gt; {\n  const { name, arguments: args } = request.params;\n\n  // Generate prompt message\n  return {\n    messages: [{\n      role: \"user\",\n      content: {\n        type: \"text\",\n        text: generatePromptText(args)\n      }\n    }]\n  };\n});\n</code></pre>"},{"location":"MCP_PRIMITIVES/#comparison-tools-vs-resources-vs-prompts","title":"Comparison: Tools vs Resources vs Prompts","text":"Aspect Tools Resources Prompts Control Model-controlled App-controlled User-controlled Purpose Perform actions Provide context Guide interactions Side Effects Yes No No Invocation AI decides AI reads as needed User selects Examples publish, create, delete Recent notifications, channel info Decision template, alert template Security User approval needed Access controls Input sanitization"},{"location":"MCP_PRIMITIVES/#references","title":"References","text":"<ul> <li>MCP Specification 2025-06-18</li> <li>MCP Tools Specification</li> <li>MCP Resources Specification</li> <li>MCP Prompts Specification</li> </ul>"},{"location":"NOTIFICATION_SCHEMA/","title":"Notification Schema Documentation","text":""},{"location":"NOTIFICATION_SCHEMA/#overview","title":"Overview","text":"<p>The Team Notification Schema is an extensible, version-based schema designed for team collaboration across genAI platforms (ChatGPT, Claude, Gemini). It enables dev, consulting, and business teams to share work state, decisions, and memory through structured notifications.</p> <p>Current Version: 1.0.0 Schema File: <code>schemas/notification-schema.json</code></p>"},{"location":"NOTIFICATION_SCHEMA/#design-principles","title":"Design Principles","text":""},{"location":"NOTIFICATION_SCHEMA/#1-extensibility","title":"1. Extensibility","text":"<ul> <li>All major sections support <code>additionalProperties: true</code></li> <li>New fields can be added without breaking existing implementations</li> <li>Custom extensions can be namespace-prefixed (e.g., <code>x-custom-field</code>)</li> </ul>"},{"location":"NOTIFICATION_SCHEMA/#2-versioning","title":"2. Versioning","text":"<ul> <li>Every notification includes <code>schemaVersion</code> field</li> <li>Follows semantic versioning (MAJOR.MINOR.PATCH)</li> <li>Enables backward compatibility and graceful degradation</li> <li>Consumers can handle multiple schema versions</li> </ul>"},{"location":"NOTIFICATION_SCHEMA/#3-separation-of-concerns","title":"3. Separation of Concerns","text":"<ul> <li>Core fields (sender, context, information): User-provided content</li> <li>Metadata: System-generated tracking information</li> <li>Extensions (actions, visibility): Optional enhanced functionality</li> </ul>"},{"location":"NOTIFICATION_SCHEMA/#4-json-rpc-20-compatible","title":"4. JSON-RPC 2.0 Compatible","text":"<ul> <li>Designed to work with MCP protocol's notification system</li> <li>Lightweight and efficient for real-time communication</li> <li>Standard JSON format for interoperability</li> </ul>"},{"location":"NOTIFICATION_SCHEMA/#schema-structure","title":"Schema Structure","text":"<pre><code>{\n  \"schemaVersion\": \"1.0.0\",\n  \"sender\": { ... },\n  \"context\": { ... },\n  \"information\": { ... },\n  \"metadata\": { ... },\n  \"actions\": [ ... ],\n  \"visibility\": { ... }\n}\n</code></pre>"},{"location":"NOTIFICATION_SCHEMA/#field-definitions","title":"Field Definitions","text":""},{"location":"NOTIFICATION_SCHEMA/#schemaversion-required","title":"schemaVersion (required)","text":"<ul> <li>Type: String (semantic version pattern)</li> <li>Description: Schema version for backward compatibility</li> <li>Example: <code>\"1.0.0\"</code></li> <li>Usage: Always check this field to ensure compatibility</li> </ul>"},{"location":"NOTIFICATION_SCHEMA/#sender-required","title":"sender (required)","text":"<p>Information about who is sending the notification.</p> Field Type Required Description <code>id</code> string Yes Unique identifier for the sender <code>name</code> string Yes Display name of the sender <code>role</code> enum Yes Team role: <code>dev</code>, <code>consulting</code>, <code>business</code>, <code>other</code> <code>aiTool</code> enum No AI tool used: <code>claude</code>, <code>chatgpt</code>, <code>gemini</code>, <code>other</code> <code>email</code> email No Sender's email address <p>Extensible: Additional custom fields allowed.</p> <p>Example: <pre><code>{\n  \"sender\": {\n    \"id\": \"user-123\",\n    \"name\": \"Alice Developer\",\n    \"role\": \"dev\",\n    \"aiTool\": \"claude\",\n    \"email\": \"alice@example.com\"\n  }\n}\n</code></pre></p>"},{"location":"NOTIFICATION_SCHEMA/#context-required","title":"context (required)","text":"<p>Contextual metadata about the notification.</p> Field Type Required Description <code>theme</code> enum Yes Notification category (see themes below) <code>priority</code> enum Yes Priority level: <code>low</code>, <code>medium</code>, <code>high</code>, <code>critical</code> <code>validity</code> date-time No Expiration timestamp (ISO 8601) <code>tags</code> array[string] No Tags for filtering/categorization <code>relatedConversationId</code> string No ID of related AI conversation <code>projectId</code> string No Associated project identifier <p>Themes: - <code>architecture-decision</code>: Architecture and design decisions - <code>state-update</code>: Project or system state changes - <code>memory-sync</code>: Shared context/memory updates - <code>question</code>: Questions needing response - <code>decision</code>: General decisions - <code>alert</code>: Important alerts - <code>info</code>: Informational messages - <code>discussion</code>: Discussion topics</p> <p>Extensible: Additional custom fields allowed.</p> <p>Example: <pre><code>{\n  \"context\": {\n    \"theme\": \"architecture-decision\",\n    \"priority\": \"high\",\n    \"validity\": \"2025-10-18T10:00:00Z\",\n    \"tags\": [\"backend\", \"database\", \"migration\"],\n    \"projectId\": \"project-alpha\"\n  }\n}\n</code></pre></p>"},{"location":"NOTIFICATION_SCHEMA/#information-required","title":"information (required)","text":"<p>The actual notification content.</p> Field Type Required Description <code>title</code> string Yes Short notification title (max 200 chars) <code>body</code> string Yes Detailed notification content <code>format</code> enum No Content format: <code>text</code>, <code>markdown</code>, <code>json</code>, <code>html</code> (default: <code>text</code>) <code>attachments</code> array No Optional attachments (links, files, images) <p>Attachment Structure: <pre><code>{\n  \"type\": \"link\",\n  \"url\": \"https://example.com/doc\",\n  \"name\": \"Architecture Diagram\"\n}\n</code></pre></p> <p>Extensible: Additional custom fields allowed.</p> <p>Example: <pre><code>{\n  \"information\": {\n    \"title\": \"Database Migration Strategy Decided\",\n    \"body\": \"After team discussion, we decided to use Blue-Green deployment for the database migration...\",\n    \"format\": \"markdown\",\n    \"attachments\": [\n      {\n        \"type\": \"link\",\n        \"url\": \"https://wiki.example.com/migration-plan\",\n        \"name\": \"Full Migration Plan\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"NOTIFICATION_SCHEMA/#metadata-required","title":"metadata (required)","text":"<p>System-generated metadata for tracking and management.</p> Field Type Required Description <code>id</code> string Yes Unique notification identifier (UUID recommended) <code>timestamp</code> date-time Yes Creation timestamp (ISO 8601) <code>version</code> string No Message version for updates <code>channel</code> string No Pub-Sub channel name <code>replyTo</code> string No Parent notification ID (for threading) <code>sequence</code> integer No Sequence number for ordering <p>Extensible: Additional custom fields allowed.</p> <p>Example: <pre><code>{\n  \"metadata\": {\n    \"id\": \"notif-7b8e9f10\",\n    \"timestamp\": \"2025-10-11T14:30:00Z\",\n    \"channel\": \"project-alpha\",\n    \"sequence\": 42\n  }\n}\n</code></pre></p>"},{"location":"NOTIFICATION_SCHEMA/#actions-optional","title":"actions (optional)","text":"<p>Suggested actions that recipients can take.</p> <p>Structure: <pre><code>{\n  \"actions\": [\n    {\n      \"type\": \"acknowledge|respond|review|approve|reject|custom\",\n      \"label\": \"Action Button Label\",\n      \"url\": \"https://...\",\n      \"data\": { /* custom data */ }\n    }\n  ]\n}\n</code></pre></p> <p>Example: <pre><code>{\n  \"actions\": [\n    {\n      \"type\": \"review\",\n      \"label\": \"Review Decision Document\",\n      \"url\": \"https://docs.example.com/decision-123\"\n    },\n    {\n      \"type\": \"acknowledge\",\n      \"label\": \"Mark as Read\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"NOTIFICATION_SCHEMA/#visibility-optional","title":"visibility (optional)","text":"<p>Access control settings for the notification.</p> Field Type Description <code>teams</code> array[enum] Teams with access: <code>dev</code>, <code>consulting</code>, <code>business</code>, <code>all</code> <code>private</code> boolean Whether notification is private (default: false) <code>allowedUsers</code> array[string] Specific user IDs with access (if private) <p>Extensible: Additional custom fields allowed.</p> <p>Example: <pre><code>{\n  \"visibility\": {\n    \"teams\": [\"dev\", \"consulting\"],\n    \"private\": false\n  }\n}\n</code></pre></p>"},{"location":"NOTIFICATION_SCHEMA/#complete-example","title":"Complete Example","text":"<pre><code>{\n  \"schemaVersion\": \"1.0.0\",\n  \"sender\": {\n    \"id\": \"user-alice-123\",\n    \"name\": \"Alice Developer\",\n    \"role\": \"dev\",\n    \"aiTool\": \"claude\"\n  },\n  \"context\": {\n    \"theme\": \"architecture-decision\",\n    \"priority\": \"high\",\n    \"validity\": \"2025-10-18T10:00:00Z\",\n    \"tags\": [\"backend\", \"database\", \"migration\"],\n    \"projectId\": \"project-alpha\",\n    \"relatedConversationId\": \"conv-456\"\n  },\n  \"information\": {\n    \"title\": \"Database Migration Strategy Decided\",\n    \"body\": \"After analyzing options, the team decided to use Blue-Green deployment strategy for the database migration. This minimizes downtime and provides easy rollback capabilities.\",\n    \"format\": \"markdown\",\n    \"attachments\": [\n      {\n        \"type\": \"link\",\n        \"url\": \"https://wiki.example.com/migration-plan\",\n        \"name\": \"Detailed Migration Plan\"\n      }\n    ]\n  },\n  \"metadata\": {\n    \"id\": \"notif-7b8e9f10-c5a3-4d8e-9f12-3a4b5c6d7e8f\",\n    \"timestamp\": \"2025-10-11T14:30:00Z\",\n    \"channel\": \"project-alpha\",\n    \"sequence\": 42\n  },\n  \"actions\": [\n    {\n      \"type\": \"review\",\n      \"label\": \"Review Migration Plan\",\n      \"url\": \"https://wiki.example.com/migration-plan\"\n    },\n    {\n      \"type\": \"acknowledge\",\n      \"label\": \"Acknowledge Decision\"\n    }\n  ],\n  \"visibility\": {\n    \"teams\": [\"dev\", \"consulting\"],\n    \"private\": false\n  }\n}\n</code></pre>"},{"location":"NOTIFICATION_SCHEMA/#schema-evolution-guidelines","title":"Schema Evolution Guidelines","text":""},{"location":"NOTIFICATION_SCHEMA/#adding-new-fields","title":"Adding New Fields","text":"<ol> <li>Add to appropriate section with <code>additionalProperties: true</code></li> <li>Make new fields optional (no <code>required</code> constraint)</li> <li>Provide sensible defaults</li> <li>Update schema MINOR version (e.g., 1.0.0 \u2192 1.1.0)</li> </ol>"},{"location":"NOTIFICATION_SCHEMA/#adding-new-enums","title":"Adding New Enums","text":"<ol> <li>Add to existing enum list</li> <li>Maintain backward compatibility (don't remove old values)</li> <li>Update schema MINOR version</li> </ol>"},{"location":"NOTIFICATION_SCHEMA/#breaking-changes","title":"Breaking Changes","text":"<ol> <li>Avoid when possible</li> <li>If necessary, increment MAJOR version (e.g., 1.x.x \u2192 2.0.0)</li> <li>Document migration path</li> <li>Provide transition period with dual support</li> </ol>"},{"location":"NOTIFICATION_SCHEMA/#custom-extensions","title":"Custom Extensions","text":"<p>Use namespace prefixes for organization-specific fields: <pre><code>{\n  \"context\": {\n    \"theme\": \"decision\",\n    \"x-acme-department\": \"engineering\",\n    \"x-acme-cost-center\": \"R&amp;D-001\"\n  }\n}\n</code></pre></p>"},{"location":"NOTIFICATION_SCHEMA/#validation","title":"Validation","text":"<p>Use the JSON Schema file (<code>schemas/notification-schema.json</code>) with any JSON Schema validator:</p> <pre><code>// Example with AJV (JavaScript)\nconst Ajv = require('ajv');\nconst schema = require('./schemas/notification-schema.json');\n\nconst ajv = new Ajv();\nconst validate = ajv.compile(schema);\n\nconst valid = validate(notification);\nif (!valid) {\n  console.error(validate.errors);\n}\n</code></pre> <pre><code># Example with jsonschema (Python)\nimport jsonschema\nimport json\n\nwith open('schemas/notification-schema.json') as f:\n    schema = json.load(f)\n\njsonschema.validate(notification, schema)\n</code></pre>"},{"location":"NOTIFICATION_SCHEMA/#best-practices","title":"Best Practices","text":""},{"location":"NOTIFICATION_SCHEMA/#1-always-include-schema-version","title":"1. Always Include Schema Version","text":"<pre><code>{\n  \"schemaVersion\": \"1.0.0\",\n  ...\n}\n</code></pre>"},{"location":"NOTIFICATION_SCHEMA/#2-use-appropriate-priority-levels","title":"2. Use Appropriate Priority Levels","text":"<ul> <li><code>low</code>: FYI, non-urgent updates</li> <li><code>medium</code>: Standard notifications (default)</li> <li><code>high</code>: Important, needs attention soon</li> <li><code>critical</code>: Urgent, immediate action required</li> </ul>"},{"location":"NOTIFICATION_SCHEMA/#3-set-validity-for-time-sensitive-notifications","title":"3. Set Validity for Time-Sensitive Notifications","text":"<pre><code>{\n  \"context\": {\n    \"validity\": \"2025-10-18T10:00:00Z\"\n  }\n}\n</code></pre>"},{"location":"NOTIFICATION_SCHEMA/#4-use-tags-for-filtering","title":"4. Use Tags for Filtering","text":"<p>Enable recipients to subscribe to specific topics: <pre><code>{\n  \"context\": {\n    \"tags\": [\"security\", \"backend\", \"urgent\"]\n  }\n}\n</code></pre></p>"},{"location":"NOTIFICATION_SCHEMA/#5-leverage-threading","title":"5. Leverage Threading","text":"<p>Link related notifications: <pre><code>{\n  \"metadata\": {\n    \"replyTo\": \"notif-parent-id\"\n  }\n}\n</code></pre></p>"},{"location":"NOTIFICATION_SCHEMA/#6-choose-appropriate-format","title":"6. Choose Appropriate Format","text":"<ul> <li><code>text</code>: Plain text, widest compatibility</li> <li><code>markdown</code>: Rich formatting, documentation</li> <li><code>json</code>: Structured data</li> <li><code>html</code>: Complex formatting (use sparingly)</li> </ul>"},{"location":"NOTIFICATION_SCHEMA/#migration-path-future-versions","title":"Migration Path (Future Versions)","text":"<p>When schema version changes:</p> <ol> <li>Consumers should:</li> <li>Check <code>schemaVersion</code> field</li> <li>Handle multiple versions gracefully</li> <li>Ignore unknown fields (extensibility)</li> <li> <p>Use defaults for missing optional fields</p> </li> <li> <p>Producers should:</p> </li> <li>Specify target schema version</li> <li>Fill all required fields</li> <li>Consider backward compatibility</li> <li>Document custom extensions</li> </ol>"},{"location":"NOTIFICATION_SCHEMA/#changelog","title":"Changelog","text":""},{"location":"NOTIFICATION_SCHEMA/#version-100-2025-10-11","title":"Version 1.0.0 (2025-10-11)","text":"<ul> <li>Initial schema release</li> <li>Core notification structure</li> <li>Pub-Sub architecture support</li> <li>Extensibility via additionalProperties</li> <li>Team role support (dev, consulting, business)</li> <li>Multi-AI platform compatibility</li> </ul>"},{"location":"NOTIFICATION_SCHEMA/#references","title":"References","text":"<ul> <li>Model Context Protocol (MCP)</li> <li>JSON Schema Specification</li> <li>JSON-RPC 2.0</li> <li>ISO 8601 Date Format</li> </ul>"},{"location":"STORAGE_GUIDE/","title":"Storage Configuration Guide","text":"<p>Version: 1.1.0 Last Updated: 2025-01-12</p>"},{"location":"STORAGE_GUIDE/#overview","title":"Overview","text":"<p>Notify-MCP v1.1.0 introduces persistent storage to enable team collaboration through shared databases. This guide covers storage configuration, migration strategies, and best practices.</p>"},{"location":"STORAGE_GUIDE/#storage-types","title":"Storage Types","text":""},{"location":"STORAGE_GUIDE/#in-memory-storage-default","title":"In-Memory Storage (Default)","text":"<p>Best for: Individual developers, testing, ephemeral workloads</p> <p>Characteristics: - \u26a1 Fastest performance (no I/O) - \ud83d\udd04 Data lost on server restart - \ud83d\udcbb Single-process only - \ud83d\udcca Configurable LRU cache</p> <p>Configuration: <pre><code>NOTIFY_MCP_STORAGE_TYPE=memory\nNOTIFY_MCP_MAX_HISTORY=1000\n</code></pre></p> <p>Use Cases: - Local development and testing - Proof-of-concept demos - Short-lived AI assistant sessions - When persistence is not needed</p>"},{"location":"STORAGE_GUIDE/#sqlite-storage-v110","title":"SQLite Storage (v1.1.0+)","text":"<p>Best for: Teams, persistent notifications, shared collaboration</p> <p>Characteristics: - \ud83d\udcbe Persistent across restarts - \ud83e\udd1d Multiple team members can share one database - \ud83d\udce6 No server setup required (file-based) - \ud83d\udd12 ACID transactions with foreign key constraints - \ud83d\udcc8 Handles ~100K notifications efficiently - \ud83d\uddc2\ufe0f Automatic LRU cache enforcement</p> <p>Configuration: <pre><code>NOTIFY_MCP_STORAGE_TYPE=sqlite\nNOTIFY_MCP_SQLITE_PATH=~/.notify-mcp/storage.db\nNOTIFY_MCP_MAX_HISTORY=1000\n</code></pre></p> <p>Use Cases: - Team collaboration (shared network drive) - Persistent notification history - Cross-platform AI coordination - Audit trail and compliance - Local development with persistence</p> <p>Database Schema: - 3 tables: <code>channels</code>, <code>subscriptions</code>, <code>notifications</code> - JSON columns for nested data (Pydantic models) - Indexes on common queries (channel, timestamp) - Foreign key cascade deletes - WAL mode for better concurrency</p>"},{"location":"STORAGE_GUIDE/#configuration-methods","title":"Configuration Methods","text":""},{"location":"STORAGE_GUIDE/#1-environment-variables-recommended","title":"1. Environment Variables (Recommended)","text":"<p>Set environment variables in your MCP server configuration:</p> <p>Claude Desktop (<code>claude_desktop_config.json</code>): <pre><code>{\n  \"mcpServers\": {\n    \"notify-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"python\", \"-m\", \"notify_mcp\"],\n      \"cwd\": \"/path/to/notify-mcp\",\n      \"env\": {\n        \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n        \"NOTIFY_MCP_SQLITE_PATH\": \"/shared/team/notify-mcp.db\",\n        \"NOTIFY_MCP_MAX_HISTORY\": \"1000\"\n      }\n    }\n  }\n}\n</code></pre></p> <p>System Environment: <pre><code>export NOTIFY_MCP_STORAGE_TYPE=sqlite\nexport NOTIFY_MCP_SQLITE_PATH=~/.notify-mcp/storage.db\nexport NOTIFY_MCP_MAX_HISTORY=1000\n</code></pre></p>"},{"location":"STORAGE_GUIDE/#2-env-file","title":"2. .env File","text":"<p>Create a <code>.env</code> file in the notify-mcp directory:</p> <pre><code># .env\nNOTIFY_MCP_STORAGE_TYPE=sqlite\nNOTIFY_MCP_SQLITE_PATH=~/.notify-mcp/storage.db\nNOTIFY_MCP_MAX_HISTORY=1000\n</code></pre> <p>The server will automatically load this file using <code>python-dotenv</code>.</p>"},{"location":"STORAGE_GUIDE/#configuration-reference","title":"Configuration Reference","text":"Variable Type Default Description <code>NOTIFY_MCP_STORAGE_TYPE</code> <code>memory</code> | <code>sqlite</code> <code>memory</code> Storage backend to use <code>NOTIFY_MCP_SQLITE_PATH</code> string <code>~/.notify-mcp/storage.db</code> Path to SQLite database file <code>NOTIFY_MCP_MAX_HISTORY</code> integer <code>1000</code> Max notifications per channel (LRU) <p>Path Expansion: - <code>~</code> expands to user home directory - Environment variables are expanded: <code>$HOME/notify.db</code> - Relative paths are resolved from working directory</p>"},{"location":"STORAGE_GUIDE/#team-collaboration-setup","title":"Team Collaboration Setup","text":""},{"location":"STORAGE_GUIDE/#scenario-1-shared-network-drive","title":"Scenario 1: Shared Network Drive","text":"<p>All team members point to the same database file on a shared network location:</p> <p>Team Member 1 (macOS): <pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n    \"NOTIFY_MCP_SQLITE_PATH\": \"/Volumes/TeamDrive/notify-mcp.db\"\n  }\n}\n</code></pre></p> <p>Team Member 2 (Linux): <pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n    \"NOTIFY_MCP_SQLITE_PATH\": \"/mnt/teamdrive/notify-mcp.db\"\n  }\n}\n</code></pre></p> <p>Team Member 3 (Windows): <pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n    \"NOTIFY_MCP_SQLITE_PATH\": \"Z:\\\\notify-mcp.db\"\n  }\n}\n</code></pre></p>"},{"location":"STORAGE_GUIDE/#scenario-2-cloud-sync-dropbox-google-drive","title":"Scenario 2: Cloud Sync (Dropbox, Google Drive)","text":"<p>Store the database in a cloud-synced folder:</p> <pre><code>NOTIFY_MCP_SQLITE_PATH=~/Dropbox/notify-mcp/storage.db\n</code></pre> <p>\u26a0\ufe0f Warning: Cloud sync may cause conflicts with concurrent writes. Use with caution for small teams.</p>"},{"location":"STORAGE_GUIDE/#scenario-3-git-repository","title":"Scenario 3: Git Repository","text":"<p>Store the database in a shared git repository:</p> <pre><code>NOTIFY_MCP_SQLITE_PATH=~/projects/team-notifications/notify-mcp.db\n</code></pre> <p>Add to <code>.gitignore</code> if needed: <pre><code># Optionally exclude from git\n*.db\n*.db-wal\n*.db-shm\n</code></pre></p> <p>Best Practice: Commit the database for audit trail, or exclude for sensitive data.</p>"},{"location":"STORAGE_GUIDE/#migration-guide","title":"Migration Guide","text":""},{"location":"STORAGE_GUIDE/#migrating-from-in-memory-to-sqlite","title":"Migrating from In-Memory to SQLite","text":"<p>Step 1: Stop the MCP server (restart Claude/AI assistant)</p> <p>Step 2: Update configuration: <pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n    \"NOTIFY_MCP_SQLITE_PATH\": \"~/.notify-mcp/storage.db\"\n  }\n}\n</code></pre></p> <p>Step 3: Restart the MCP server</p> <p>Note: In-memory data is lost during migration. There is no automatic data transfer.</p>"},{"location":"STORAGE_GUIDE/#starting-fresh-with-sqlite","title":"Starting Fresh with SQLite","text":"<pre><code># Remove old database if exists\nrm ~/.notify-mcp/storage.db*\n\n# Configure SQLite\nexport NOTIFY_MCP_STORAGE_TYPE=sqlite\nexport NOTIFY_MCP_SQLITE_PATH=~/.notify-mcp/storage.db\n\n# Start server\nuv run python -m notify_mcp\n</code></pre> <p>The database schema is created automatically on first startup.</p>"},{"location":"STORAGE_GUIDE/#database-management","title":"Database Management","text":""},{"location":"STORAGE_GUIDE/#backup-sqlite-database","title":"Backup SQLite Database","text":"<pre><code># Create backup\ncp ~/.notify-mcp/storage.db ~/.notify-mcp/storage-backup-$(date +%Y%m%d).db\n\n# Or use SQLite backup command\nsqlite3 ~/.notify-mcp/storage.db \".backup /path/to/backup.db\"\n</code></pre>"},{"location":"STORAGE_GUIDE/#restore-from-backup","title":"Restore from Backup","text":"<pre><code># Stop the server first\ncp /path/to/backup.db ~/.notify-mcp/storage.db\n# Restart the server\n</code></pre>"},{"location":"STORAGE_GUIDE/#inspect-database","title":"Inspect Database","text":"<pre><code># Open SQLite shell\nsqlite3 ~/.notify-mcp/storage.db\n\n# List tables\n.tables\n\n# Show schema\n.schema channels\n\n# Query notifications\nSELECT channel, COUNT(*) FROM notifications GROUP BY channel;\n\n# Exit\n.quit\n</code></pre>"},{"location":"STORAGE_GUIDE/#database-size-management","title":"Database Size Management","text":"<p>The LRU cache automatically limits notifications per channel:</p> <pre><code># Set lower limit for smaller database\nNOTIFY_MCP_MAX_HISTORY=500\n</code></pre> <p>Manual cleanup (if needed): <pre><code>-- Delete old notifications manually\nDELETE FROM notifications\nWHERE timestamp &lt; datetime('now', '-30 days');\n\n-- Vacuum to reclaim space\nVACUUM;\n</code></pre></p>"},{"location":"STORAGE_GUIDE/#performance-considerations","title":"Performance Considerations","text":""},{"location":"STORAGE_GUIDE/#sqlite-optimizations","title":"SQLite Optimizations","text":"<p>Notify-MCP automatically applies these optimizations:</p> <ul> <li>WAL Mode: Better concurrency, allows concurrent reads</li> <li>Foreign Keys: Enabled for referential integrity</li> <li>Indexes: Optimized for common queries (channel, timestamp)</li> <li>Connection Pooling: Async connection management</li> </ul>"},{"location":"STORAGE_GUIDE/#recommended-settings","title":"Recommended Settings","text":"<p>For optimal performance:</p> Team Size Max History Expected DB Size 1-5 users 1000/channel &lt; 10 MB 5-20 users 500/channel &lt; 50 MB 20+ users 250/channel &lt; 100 MB"},{"location":"STORAGE_GUIDE/#network-drive-performance","title":"Network Drive Performance","text":"<ul> <li>Avoid: High-latency network drives (&gt;50ms)</li> <li>Prefer: Low-latency NFS/SMB shares (&lt;10ms)</li> <li>Alternative: Use centralized server with HTTP transport (Phase 2B)</li> </ul>"},{"location":"STORAGE_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"STORAGE_GUIDE/#database-locked-error","title":"Database Locked Error","text":"<p>Problem: <code>database is locked</code> error</p> <p>Causes: - Multiple processes accessing same database - Network drive with poor locking support - Long-running transaction</p> <p>Solutions: <pre><code># 1. Ensure only one server instance runs\npkill -f \"notify_mcp\"\n\n# 2. Check for stale lock files\nrm ~/.notify-mcp/storage.db-wal\nrm ~/.notify-mcp/storage.db-shm\n\n# 3. Use local storage instead of network drive\nNOTIFY_MCP_SQLITE_PATH=~/.notify-mcp/local-storage.db\n</code></pre></p>"},{"location":"STORAGE_GUIDE/#database-corruption","title":"Database Corruption","text":"<p>Problem: Database file is corrupted</p> <p>Solution: <pre><code># 1. Stop server\n# 2. Try to recover\nsqlite3 ~/.notify-mcp/storage.db \"PRAGMA integrity_check;\"\n\n# 3. If corrupted, restore from backup\ncp /path/to/backup.db ~/.notify-mcp/storage.db\n\n# 4. If no backup, start fresh\nrm ~/.notify-mcp/storage.db*\n</code></pre></p>"},{"location":"STORAGE_GUIDE/#slow-performance","title":"Slow Performance","text":"<p>Problem: Queries are slow</p> <p>Solutions: <pre><code># 1. Reduce max history\nNOTIFY_MCP_MAX_HISTORY=500\n\n# 2. Check database size\nls -lh ~/.notify-mcp/storage.db\n\n# 3. Vacuum database\nsqlite3 ~/.notify-mcp/storage.db \"VACUUM;\"\n\n# 4. Check indexes\nsqlite3 ~/.notify-mcp/storage.db \".schema\"\n</code></pre></p>"},{"location":"STORAGE_GUIDE/#permission-denied","title":"Permission Denied","text":"<p>Problem: Cannot write to database file</p> <p>Solutions: <pre><code># 1. Check file permissions\nls -l ~/.notify-mcp/storage.db\n\n# 2. Fix permissions\nchmod 644 ~/.notify-mcp/storage.db\n\n# 3. Check directory permissions\nchmod 755 ~/.notify-mcp/\n\n# 4. Use different path\nNOTIFY_MCP_SQLITE_PATH=/tmp/notify-mcp.db\n</code></pre></p>"},{"location":"STORAGE_GUIDE/#best-practices","title":"Best Practices","text":""},{"location":"STORAGE_GUIDE/#development","title":"Development","text":"<p>\u2705 Do: - Use in-memory storage for tests - Keep separate databases for dev/test/prod - Commit database schema to version control - Automate backups</p> <p>\u274c Don't: - Share production database with development - Store secrets in notifications - Use SQLite over high-latency networks</p>"},{"location":"STORAGE_GUIDE/#production-small-teams","title":"Production (Small Teams)","text":"<p>\u2705 Do: - Use SQLite on reliable network share - Set up automated daily backups - Monitor database size - Set appropriate <code>MAX_HISTORY</code></p> <p>\u274c Don't: - Share database across &gt;20 concurrent users - Use cloud-synced folders (Dropbox) for production - Disable foreign key constraints</p>"},{"location":"STORAGE_GUIDE/#future-enterprise-production","title":"Future: Enterprise Production","text":"<p>For large-scale deployments (20+ users), wait for: - Phase 2B: HTTP transport + Redis - Enterprise Edition: PostgreSQL support</p>"},{"location":"STORAGE_GUIDE/#faq","title":"FAQ","text":""},{"location":"STORAGE_GUIDE/#q-can-i-use-postgresql-instead-of-sqlite","title":"Q: Can I use PostgreSQL instead of SQLite?","text":"<p>A: PostgreSQL support is planned for the Enterprise Edition (Phase 2+). Currently, SQLite and in-memory storage are available.</p>"},{"location":"STORAGE_GUIDE/#q-how-do-i-share-notifications-across-different-ai-platforms","title":"Q: How do I share notifications across different AI platforms?","text":"<p>A: All AI assistants (Claude, ChatGPT, Gemini) should point to the same SQLite database file via their MCP configuration.</p>"},{"location":"STORAGE_GUIDE/#q-is-the-database-encrypted","title":"Q: Is the database encrypted?","text":"<p>A: SQLite database is not encrypted by default. Use file-system encryption (e.g., LUKS, FileVault, BitLocker) for sensitive data.</p>"},{"location":"STORAGE_GUIDE/#q-can-i-query-the-database-directly","title":"Q: Can I query the database directly?","text":"<p>A: Yes! Use the <code>sqlite3</code> command-line tool or any SQLite GUI (DB Browser, DBeaver). The schema includes 3 tables: <code>channels</code>, <code>subscriptions</code>, and <code>notifications</code>. See the \"Database Schema\" section in the release notes or inspect with <code>sqlite3 &lt;db-file&gt; \".schema\"</code>.</p>"},{"location":"STORAGE_GUIDE/#q-what-happens-if-two-people-write-simultaneously","title":"Q: What happens if two people write simultaneously?","text":"<p>A: SQLite uses WAL mode with automatic locking. Writes are serialized, and concurrent reads are supported. However, for high concurrency (20+ users), consider Phase 2B (HTTP + Redis).</p>"},{"location":"STORAGE_GUIDE/#q-can-i-migrate-from-sqlite-to-postgresql-later","title":"Q: Can I migrate from SQLite to PostgreSQL later?","text":"<p>A: Yes, when PostgreSQL support is added (Enterprise Edition), a migration tool will be provided.</p>"},{"location":"STORAGE_GUIDE/#related-documentation","title":"Related Documentation","text":"<ul> <li>Database Schema Design</li> <li>Architecture Overview</li> <li>API Reference</li> <li>Usage Guide</li> </ul>"},{"location":"STORAGE_GUIDE/#support","title":"Support","text":"<p>For issues or questions: - GitHub Issues: Report bugs or feature requests - Documentation: Check <code>docs/</code> directory - Examples: See <code>examples/</code> for code samples</p> <p>Version: 1.1.0 Last Updated: 2025-01-12</p>"},{"location":"USAGE_GUIDE/","title":"Notify-MCP Usage Guide","text":""},{"location":"USAGE_GUIDE/#overview","title":"Overview","text":"<p>This guide provides practical examples and best practices for using the Notify-MCP server for team collaboration across genAI platforms.</p>"},{"location":"USAGE_GUIDE/#quick-start","title":"Quick Start","text":""},{"location":"USAGE_GUIDE/#1-connect-to-server","title":"1. Connect to Server","text":"<pre><code>import { Client } from '@modelcontextprotocol/sdk/client/index.js';\n\nconst client = new Client({\n  name: \"my-client\",\n  version: \"1.0.0\"\n});\n\n// Connect via stdio\nawait client.connect(transport);\n\n// Initialize\nawait client.initialize();\n</code></pre>"},{"location":"USAGE_GUIDE/#2-subscribe-to-a-channel","title":"2. Subscribe to a Channel","text":"<pre><code>await client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\"\n  }\n});\n</code></pre>"},{"location":"USAGE_GUIDE/#3-handle-notifications","title":"3. Handle Notifications","text":"<pre><code>client.onNotification(\"notifications/message\", (msg) =&gt; {\n  const notification = msg.params.notification;\n  console.log(`[${notification.context.priority}] ${notification.information.title}`);\n  console.log(notification.information.body);\n});\n</code></pre>"},{"location":"USAGE_GUIDE/#common-use-cases","title":"Common Use Cases","text":""},{"location":"USAGE_GUIDE/#use-case-1-broadcasting-architecture-decisions","title":"Use Case 1: Broadcasting Architecture Decisions","text":"<p>Scenario: Dev team makes an architecture decision that all teams need to know about.</p> <p>Publisher (Dev Team Member): <pre><code>await client.request({\n  method: \"notifications/publish\",\n  params: {\n    channel: \"project-alpha\",\n    notification: {\n      schemaVersion: \"1.0.0\",\n      sender: {\n        id: \"user-alice\",\n        name: \"Alice Developer\",\n        role: \"dev\",\n        aiTool: \"claude\"\n      },\n      context: {\n        theme: \"architecture-decision\",\n        priority: \"high\",\n        tags: [\"architecture\", \"database\", \"backend\"],\n        validity: \"2025-10-18T00:00:00Z\",\n        projectId: \"proj-alpha\"\n      },\n      information: {\n        title: \"Migrating to Blue-Green Deployment\",\n        body: `# Decision: Blue-Green Database Migration\n\n## Context\nOur current database migration approach causes downtime.\n\n## Decision\nImplement Blue-Green deployment strategy for zero-downtime migrations.\n\n## Consequences\n- \u2705 Zero downtime during migrations\n- \u2705 Easy rollback capability\n- \u26a0\ufe0f Requires dual database capacity temporarily\n- \u26a0\ufe0f More complex deployment process\n\n## Timeline\nImplementation starts next sprint.`,\n        format: \"markdown\",\n        attachments: [\n          {\n            type: \"link\",\n            url: \"https://wiki.company.com/blue-green-migration\",\n            name: \"Detailed Migration Plan\"\n          }\n        ]\n      },\n      actions: [\n        {\n          \"type\": \"review\",\n          \"label\": \"Review Full Plan\",\n          \"url\": \"https://wiki.company.com/blue-green-migration\"\n        },\n        {\n          \"type\": \"acknowledge\",\n          \"label\": \"Acknowledge\"\n        }\n      ],\n      visibility: {\n        teams: [\"dev\", \"consulting\", \"business\"]\n      }\n    }\n  }\n});\n</code></pre></p> <p>Subscribers (All Teams): <pre><code>// Dev team subscribes to all decisions\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\",\n    filters: {\n      themes: [\"architecture-decision\", \"state-update\"],\n      priority: [\"medium\", \"high\", \"critical\"]\n    }\n  }\n});\n\n// Business team subscribes to high-priority only\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\",\n    filters: {\n      priority: [\"high\", \"critical\"],\n      tags: [\"architecture\", \"security\"]\n    }\n  }\n});\n</code></pre></p>"},{"location":"USAGE_GUIDE/#use-case-2-ai-conversation-memory-sync","title":"Use Case 2: AI Conversation Memory Sync","text":"<p>Scenario: One team member's AI session discovers important context that should be shared.</p> <p>Publisher (Consulting Team): <pre><code>await client.request({\n  method: \"notifications/publish\",\n  params: {\n    channel: \"project-alpha\",\n    notification: {\n      schemaVersion: \"1.0.0\",\n      sender: {\n        id: \"user-bob\",\n        name: \"Bob Consultant\",\n        role: \"consulting\",\n        aiTool: \"chatgpt\"\n      },\n      context: {\n        theme: \"memory-sync\",\n        priority: \"medium\",\n        tags: [\"requirements\", \"client-feedback\"],\n        relatedConversationId: \"conv-chatgpt-789\",\n        projectId: \"proj-alpha\"\n      },\n      information: {\n        title: \"Client Clarified Performance Requirements\",\n        body: `During today's client call with ChatGPT assistance, we clarified performance requirements:\n\n**Key Points:**\n- System must handle 10K concurrent users (up from 5K)\n- Response time must be &lt;200ms (down from &lt;500ms)\n- 99.9% uptime SLA required\n\n**Impact:**\nThis affects our current architecture choice. We may need to reconsider the caching layer.\n\n**Next Steps:**\nDev team please review and update architecture plan accordingly.`,\n        format: \"markdown\"\n      },\n      actions: [\n        {\n          type: \"respond\",\n          label: \"Discuss Requirements\"\n        }\n      ],\n      visibility: {\n        teams: [\"dev\", \"consulting\"]\n      }\n    }\n  }\n});\n</code></pre></p>"},{"location":"USAGE_GUIDE/#use-case-3-critical-alert","title":"Use Case 3: Critical Alert","text":"<p>Scenario: Production issue detected, immediate team notification needed.</p> <p>Publisher (Dev Team): <pre><code>await client.request({\n  method: \"notifications/publish\",\n  params: {\n    channel: \"project-alpha\",\n    notification: {\n      schemaVersion: \"1.0.0\",\n      sender: {\n        id: \"monitoring-system\",\n        name: \"Monitoring System\",\n        role: \"dev\"\n      },\n      context: {\n        theme: \"alert\",\n        priority: \"critical\",\n        tags: [\"production\", \"outage\", \"database\"],\n        validity: \"2025-10-11T16:00:00Z\"\n      },\n      information: {\n        title: \"\ud83d\udea8 Database Connection Pool Exhausted\",\n        body: `**CRITICAL ALERT**\n\nDatabase connection pool exhausted on production server.\n\n**Status:** Active connections: 250/250\n**Impact:** API response times degraded, some requests timing out\n**Started:** 2025-10-11T14:45:00Z\n\n**Immediate Actions Needed:**\n1. Investigate connection leaks\n2. Consider increasing pool size\n3. Restart affected services if necessary\n\n**Incident Channel:** #incident-2025-10-11`,\n        format: \"markdown\"\n      },\n      actions: [\n        {\n          type: \"acknowledge\",\n          label: \"I'm On It\"\n        },\n        {\n          type: \"custom\",\n          label: \"View Metrics\",\n          url: \"https://monitoring.company.com/incident/2025-10-11\"\n        }\n      ],\n      visibility: {\n        teams: [\"dev\"],\n        private: false\n      }\n    }\n  }\n});\n</code></pre></p>"},{"location":"USAGE_GUIDE/#use-case-4-questiondiscussion-thread","title":"Use Case 4: Question/Discussion Thread","text":"<p>Scenario: Team member has a question that needs collaborative input.</p> <p>Initial Question: <pre><code>const response = await client.request({\n  method: \"notifications/publish\",\n  params: {\n    channel: \"project-alpha\",\n    notification: {\n      schemaVersion: \"1.0.0\",\n      sender: {\n        id: \"user-carol\",\n        name: \"Carol Business Analyst\",\n        role: \"business\",\n        aiTool: \"gemini\"\n      },\n      context: {\n        theme: \"question\",\n        priority: \"medium\",\n        tags: [\"ux\", \"user-research\"]\n      },\n      information: {\n        title: \"Should We Support Mobile Safari &lt;14?\",\n        body: `Question for the team: Should we support Mobile Safari versions older than 14?\n\n**Context from Gemini analysis:**\n- 2.3% of our users on Safari &lt;14\n- Missing critical CSS features\n- Would require significant polyfill overhead\n\n**Options:**\n1. Support Safari &lt;14 (add polyfills)\n2. Drop support, show upgrade message\n3. Degraded experience for old browsers\n\nWhat does the team think?`,\n        format: \"markdown\"\n      },\n      actions: [\n        {\n          type: \"respond\",\n          label: \"Share Opinion\"\n        }\n      ]\n    }\n  }\n});\n\n// Save notification ID for threading\nconst questionId = response.result.notificationId;\n</code></pre></p> <p>Reply to Thread: <pre><code>await client.request({\n  method: \"notifications/publish\",\n  params: {\n    channel: \"project-alpha\",\n    notification: {\n      schemaVersion: \"1.0.0\",\n      sender: {\n        id: \"user-alice\",\n        name: \"Alice Developer\",\n        role: \"dev\"\n      },\n      context: {\n        theme: \"discussion\",\n        priority: \"medium\",\n        tags: [\"ux\", \"user-research\"]\n      },\n      information: {\n        title: \"Re: Safari Support Decision\",\n        body: `I vote for option 2 (drop support).\n\n**Reasoning:**\n- 2.3% is very small\n- Polyfills add 45KB to bundle\n- Maintenance burden not worth it\n- Most browsers auto-update now\n\nLet's show a friendly upgrade message for these users.`,\n        format: \"markdown\"\n      },\n      metadata: {\n        replyTo: questionId  // Thread connection\n      }\n    }\n  }\n});\n</code></pre></p>"},{"location":"USAGE_GUIDE/#use-case-5-state-update-notification","title":"Use Case 5: State Update Notification","text":"<p>Scenario: Project milestone reached, notify all stakeholders.</p> <p>Publisher (Dev Lead): <pre><code>await client.request({\n  method: \"notifications/publish\",\n  params: {\n    channel: \"project-alpha\",\n    notification: {\n      schemaVersion: \"1.0.0\",\n      sender: {\n        id: \"user-dave\",\n        name: \"Dave Team Lead\",\n        role: \"dev\"\n      },\n      context: {\n        theme: \"state-update\",\n        priority: \"medium\",\n        tags: [\"milestone\", \"sprint\", \"release\"],\n        projectId: \"proj-alpha\"\n      },\n      information: {\n        title: \"\u2705 Sprint 5 Complete - Beta Release Ready\",\n        body: `# Sprint 5 Completed\n\nWe've successfully completed Sprint 5 and the beta release is ready!\n\n## Achievements\n- \u2705 All 23 planned stories completed\n- \u2705 Test coverage at 87%\n- \u2705 Performance benchmarks exceeded\n- \u2705 Security audit passed\n\n## Beta Release\n- Version: v0.5.0-beta\n- Deployment: Tomorrow 10 AM\n- Testing period: 2 weeks\n\n## Next Sprint Focus\n- Production hardening\n- Customer feedback integration\n- Documentation completion\n\nGreat work, team! \ud83c\udf89`,\n        format: \"markdown\"\n      },\n      actions: [\n        {\n          type: \"acknowledge\",\n          label: \"Acknowledge\"\n        },\n        {\n          type: \"review\",\n          label: \"View Release Notes\",\n          url: \"https://github.com/company/project/releases/v0.5.0-beta\"\n        }\n      ],\n      visibility: {\n        teams: [\"dev\", \"consulting\", \"business\"]\n      }\n    }\n  }\n});\n</code></pre></p>"},{"location":"USAGE_GUIDE/#channel-management","title":"Channel Management","text":""},{"location":"USAGE_GUIDE/#creating-project-specific-channels","title":"Creating Project-Specific Channels","text":"<pre><code>// Create a channel for a new project\nawait client.request({\n  method: \"notifications/channels/create\",\n  params: {\n    channel: {\n      id: \"project-beta\",\n      name: \"Project Beta - Customer Portal\",\n      description: \"Notifications for the new customer portal project\",\n      permissions: {\n        subscribe: [\"dev\", \"consulting\", \"business\", \"viewer\"],\n        publish: [\"dev\", \"consulting\", \"business\"],\n        admin: [\"dev\"]\n      },\n      metadata: {\n        projectId: \"proj-beta\",\n        team: \"customer-experience\",\n        tags: [\"active\", \"customer-facing\"]\n      }\n    }\n  }\n});\n</code></pre>"},{"location":"USAGE_GUIDE/#creating-role-specific-channels","title":"Creating Role-Specific Channels","text":"<pre><code>// Dev-only technical discussions\nawait client.request({\n  method: \"notifications/channels/create\",\n  params: {\n    channel: {\n      id: \"dev-technical\",\n      name: \"Development - Technical\",\n      description: \"Technical discussions and decisions for dev team\",\n      permissions: {\n        subscribe: [\"dev\"],\n        publish: [\"dev\"],\n        admin: [\"dev\"]\n      },\n      metadata: {\n        tags: [\"technical\", \"dev-only\"]\n      }\n    }\n  }\n});\n\n// Business decisions channel\nawait client.request({\n  method: \"notifications/channels/create\",\n  params: {\n    channel: {\n      id: \"business-decisions\",\n      name: \"Business Decisions\",\n      description: \"Strategic and business decisions\",\n      permissions: {\n        subscribe: [\"business\", \"consulting\", \"dev\"],\n        publish: [\"business\", \"consulting\"],\n        admin: [\"business\"]\n      },\n      metadata: {\n        tags: [\"strategic\", \"business\"]\n      }\n    }\n  }\n});\n</code></pre>"},{"location":"USAGE_GUIDE/#subscription-strategies","title":"Subscription Strategies","text":""},{"location":"USAGE_GUIDE/#strategy-1-team-based-filtering","title":"Strategy 1: Team-Based Filtering","text":"<pre><code>// Dev team: Subscribe to technical content\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\",\n    filters: {\n      themes: [\"architecture-decision\", \"alert\", \"state-update\"],\n      tags: [\"backend\", \"frontend\", \"database\", \"security\"]\n    }\n  }\n});\n\n// Business team: Subscribe to high-level updates only\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\",\n    filters: {\n      priority: [\"high\", \"critical\"],\n      themes: [\"decision\", \"state-update\"]\n    }\n  }\n});\n\n// Consulting: Subscribe to client-related content\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\",\n    filters: {\n      tags: [\"client\", \"requirements\", \"feedback\"],\n      themes: [\"memory-sync\", \"decision\", \"question\"]\n    }\n  }\n});\n</code></pre>"},{"location":"USAGE_GUIDE/#strategy-2-priority-based-filtering","title":"Strategy 2: Priority-Based Filtering","text":"<pre><code>// Get only critical alerts\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"production\",\n    filters: {\n      priority: [\"critical\"],\n      themes: [\"alert\"]\n    }\n  }\n});\n\n// Get important updates\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\",\n    filters: {\n      priority: [\"high\", \"critical\"]\n    }\n  }\n});\n</code></pre>"},{"location":"USAGE_GUIDE/#strategy-3-tag-based-filtering","title":"Strategy 3: Tag-Based Filtering","text":"<pre><code>// Security team: Security-related only\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\",\n    filters: {\n      tags: [\"security\", \"compliance\", \"audit\"]\n    }\n  }\n});\n\n// Frontend team: Frontend-related only\nawait client.request({\n  method: \"notifications/subscribe\",\n  params: {\n    channel: \"project-alpha\",\n    filters: {\n      tags: [\"frontend\", \"ui\", \"ux\"]\n    }\n  }\n});\n</code></pre>"},{"location":"USAGE_GUIDE/#best-practices","title":"Best Practices","text":""},{"location":"USAGE_GUIDE/#1-use-appropriate-priority-levels","title":"1. Use Appropriate Priority Levels","text":"<pre><code>// \u274c BAD: Everything is critical\ncontext: { priority: \"critical\" }  // Alert fatigue!\n\n// \u2705 GOOD: Reserve critical for emergencies\ncontext: { priority: \"critical\" }  // Only for production outages\n\ncontext: { priority: \"high\" }      // Important decisions\n\ncontext: { priority: \"medium\" }    // Standard updates (default)\n\ncontext: { priority: \"low\" }       // FYI information\n</code></pre>"},{"location":"USAGE_GUIDE/#2-use-descriptive-titles","title":"2. Use Descriptive Titles","text":"<pre><code>// \u274c BAD: Vague titles\ninformation: {\n  title: \"Update\"\n}\n\n// \u2705 GOOD: Clear, actionable titles\ninformation: {\n  title: \"Database Migration Strategy Decided - Blue-Green Approach\"\n}\n</code></pre>"},{"location":"USAGE_GUIDE/#3-include-context-in-tags","title":"3. Include Context in Tags","text":"<pre><code>// \u2705 GOOD: Rich tagging\ncontext: {\n  tags: [\"backend\", \"database\", \"migration\", \"postgres\", \"production\"]\n}\n</code></pre>"},{"location":"USAGE_GUIDE/#4-set-validity-for-time-sensitive-content","title":"4. Set Validity for Time-Sensitive Content","text":"<pre><code>// \u2705 GOOD: Expires after meeting\ncontext: {\n  validity: \"2025-10-18T16:00:00Z\",  // Expires after scheduled meeting\n  priority: \"high\"\n}\n</code></pre>"},{"location":"USAGE_GUIDE/#5-use-threading-for-discussions","title":"5. Use Threading for Discussions","text":"<pre><code>// \u2705 GOOD: Thread related notifications\nmetadata: {\n  replyTo: \"notif-original-question-id\"\n}\n</code></pre>"},{"location":"USAGE_GUIDE/#6-choose-right-format","title":"6. Choose Right Format","text":"<pre><code>// For rich documentation\ninformation: {\n  format: \"markdown\",\n  body: \"# Title\\n\\n## Section...\"\n}\n\n// For structured data\ninformation: {\n  format: \"json\",\n  body: JSON.stringify({ metric: \"cpu\", value: 95, unit: \"%\" })\n}\n\n// For simple messages\ninformation: {\n  format: \"text\",\n  body: \"Build completed successfully\"\n}\n</code></pre>"},{"location":"USAGE_GUIDE/#integration-patterns","title":"Integration Patterns","text":""},{"location":"USAGE_GUIDE/#pattern-1-cicd-integration","title":"Pattern 1: CI/CD Integration","text":"<pre><code>// Post build results to team channel\nasync function notifyBuildResult(buildInfo) {\n  await client.request({\n    method: \"notifications/publish\",\n    params: {\n      channel: \"ci-cd\",\n      notification: {\n        schemaVersion: \"1.0.0\",\n        sender: {\n          id: \"ci-system\",\n          name: \"CI/CD System\",\n          role: \"dev\"\n        },\n        context: {\n          theme: buildInfo.success ? \"info\" : \"alert\",\n          priority: buildInfo.success ? \"low\" : \"high\",\n          tags: [\"build\", buildInfo.branch]\n        },\n        information: {\n          title: `Build ${buildInfo.success ? '\u2705 Passed' : '\u274c Failed'}: ${buildInfo.branch}`,\n          body: `Commit: ${buildInfo.commit}\\nDuration: ${buildInfo.duration}s`,\n          format: \"text\"\n        },\n        actions: buildInfo.success ? [] : [\n          {\n            type: \"review\",\n            label: \"View Logs\",\n            url: buildInfo.logsUrl\n          }\n        ]\n      }\n    }\n  });\n}\n</code></pre>"},{"location":"USAGE_GUIDE/#pattern-2-monitoring-integration","title":"Pattern 2: Monitoring Integration","text":"<pre><code>// Alert on threshold breach\nasync function notifyMetricAlert(metric) {\n  if (metric.value &gt; metric.threshold) {\n    await client.request({\n      method: \"notifications/publish\",\n      params: {\n        channel: \"monitoring\",\n        notification: {\n          schemaVersion: \"1.0.0\",\n          sender: {\n            id: \"monitoring\",\n            name: \"Monitoring System\",\n            role: \"dev\"\n          },\n          context: {\n            theme: \"alert\",\n            priority: metric.severity,\n            tags: [\"monitoring\", metric.name]\n          },\n          information: {\n            title: `\u26a0\ufe0f ${metric.name} threshold exceeded`,\n            body: `Current: ${metric.value}${metric.unit}\\nThreshold: ${metric.threshold}${metric.unit}`,\n            format: \"text\"\n          }\n        }\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"USAGE_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"USAGE_GUIDE/#issue-not-receiving-notifications","title":"Issue: Not Receiving Notifications","text":"<p>Check: 1. Subscription status <pre><code>const subs = await client.request({\n  method: \"notifications/subscriptions/list\"\n});\nconsole.log(subs);\n</code></pre></p> <ol> <li>Filter settings (might be too restrictive)</li> <li>Channel permissions</li> <li>Connection status</li> </ol>"},{"location":"USAGE_GUIDE/#issue-too-many-notifications","title":"Issue: Too Many Notifications","text":"<p>Solution: Refine filters <pre><code>// Before: Getting everything\nfilters: {}\n\n// After: Only high-priority architectural decisions\nfilters: {\n  priority: [\"high\", \"critical\"],\n  themes: [\"architecture-decision\", \"alert\"],\n  tags: [\"backend\"]  // Your area of focus\n}\n</code></pre></p>"},{"location":"USAGE_GUIDE/#platform-specific-usage","title":"Platform-Specific Usage","text":""},{"location":"USAGE_GUIDE/#using-with-claude-code","title":"Using with Claude Code","text":"<p>Claude Code is Anthropic's CLI tool that integrates with MCP servers. Here's how to use Notify-MCP with Claude Code.</p>"},{"location":"USAGE_GUIDE/#1-configure-mcp-server-in-claude-code","title":"1. Configure MCP Server in Claude Code","text":"<p>Add to your Claude Code settings (<code>~/.config/claude-code/mcp_servers.json</code> or project <code>.claude/mcp_servers.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"notify-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/notify-mcp/dist/index.js\"],\n      \"env\": {\n        \"NOTIFY_MCP_CONFIG\": \"/path/to/config.json\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"USAGE_GUIDE/#2-using-mcp-tools-in-claude-code","title":"2. Using MCP Tools in Claude Code","text":"<p>Claude Code can automatically invoke MCP tools when relevant to user requests.</p> <p>Example: Publishing a notification during development</p> <pre><code>User: We just decided to use PostgreSQL instead of MongoDB.\n      Can you notify the team about this architecture decision?\n\nClaude: I'll publish this architecture decision to the team channel.\n</code></pre> <p>Claude Code will automatically: 1. Detect the need to notify the team 2. Call the <code>publish_notification</code> tool from Notify-MCP 3. Format the notification appropriately 4. Confirm delivery</p> <p>Behind the scenes: <pre><code>// Claude Code automatically calls\ntools/call {\n  name: \"publish_notification\",\n  arguments: {\n    channel: \"project-alpha\",\n    title: \"Architecture Decision: PostgreSQL Selected\",\n    body: \"After evaluation, team decided to use PostgreSQL instead of MongoDB...\",\n    priority: \"high\",\n    theme: \"architecture-decision\",\n    tags: [\"database\", \"architecture\", \"backend\"]\n  }\n}\n</code></pre></p>"},{"location":"USAGE_GUIDE/#3-using-mcp-resources-in-claude-code","title":"3. Using MCP Resources in Claude Code","text":"<p>Claude Code can read resources to understand context.</p> <p>Example: Checking recent notifications</p> <pre><code>User: What have I missed in the project-alpha channel today?\n\nClaude: Let me check recent notifications from project-alpha.\n</code></pre> <p>Claude Code will: 1. Read the <code>notification://project-alpha/recent</code> resource 2. Analyze recent notifications 3. Summarize for the user</p> <p>Behind the scenes: <pre><code>// Claude Code automatically calls\nresources/read {\n  uri: \"notification://project-alpha/recent\"\n}\n</code></pre></p>"},{"location":"USAGE_GUIDE/#4-using-mcp-prompts-in-claude-code","title":"4. Using MCP Prompts in Claude Code","text":"<p>Users can explicitly invoke prompts for common workflows.</p> <p>Example: Creating a decision notification</p> <pre><code>User: /prompt create_decision_notification\n\nClaude: I'll help you create an architecture decision notification.\n        Please provide the following information:\n        - Decision title?\n        - Context/background?\n        - What was decided?\n        - Consequences?\n</code></pre> <p>Then Claude uses the prompt template to guide the user through creating a well-structured notification.</p>"},{"location":"USAGE_GUIDE/#5-practical-claude-code-workflows","title":"5. Practical Claude Code Workflows","text":"<p>Workflow 1: Document and Notify <pre><code>User: I just fixed the memory leak in the user service.\n      Document this and notify the team.\n\nClaude:\n1. [Reads the code changes]\n2. [Generates documentation]\n3. [Calls publish_notification tool]\n   \"Bug Fix: Memory Leak Resolved in User Service\n    - Fixed unclosed database connections\n    - Added connection pooling\n    - Memory usage reduced by 40%\"\n</code></pre></p> <p>Workflow 2: Question the Team <pre><code>User: Ask the team if we should upgrade to Node 20 or stay on Node 18.\n\nClaude:\n[Calls publish_notification tool with theme: \"question\"]\n\"Node.js Version Upgrade Decision Needed\n\n Should we upgrade to Node 20 LTS or stay on Node 18?\n\n Node 20 benefits:\n - Performance improvements\n - New fetch API\n - Better TypeScript support\n\n Risks:\n - Potential compatibility issues\n - Dependency updates needed\n\n Please share your thoughts.\"\n</code></pre></p> <p>Workflow 3: Alert on Code Issues <pre><code>User: Run tests and alert the team if any fail.\n\nClaude:\n[Runs tests]\n[Tests fail]\n[Calls publish_notification tool]\n\"Critical: 5 Tests Failing on Main Branch\n\n Failed tests:\n - auth.test.ts: Token validation\n - user.test.ts: Profile update\n ...\n\n Blocking merge. Please investigate.\"\n</code></pre></p>"},{"location":"USAGE_GUIDE/#using-with-google-gemini","title":"Using with Google Gemini","text":"<p>Gemini can connect to MCP servers through compatible clients. Here's how to integrate Notify-MCP with Gemini workflows.</p>"},{"location":"USAGE_GUIDE/#1-configure-gemini-mcp-client","title":"1. Configure Gemini MCP Client","text":"<p>Use a Gemini-compatible MCP client:</p> <pre><code>import { GeminiMCPClient } from 'gemini-mcp-adapter';\n\nconst client = new GeminiMCPClient({\n  apiKey: process.env.GEMINI_API_KEY,\n  mcpServer: {\n    command: 'node',\n    args: ['/path/to/notify-mcp/dist/index.js']\n  }\n});\n\nawait client.connect();\n</code></pre>"},{"location":"USAGE_GUIDE/#2-gemini-notify-mcp-use-cases","title":"2. Gemini + Notify-MCP Use Cases","text":"<p>Use Case 1: Data Analysis + Team Notification</p> <pre><code># Python example with Gemini\nimport google.generativeai as genai\nfrom mcp_client import MCPClient\n\n# Configure Gemini\ngenai.configure(api_key=os.environ['GEMINI_API_KEY'])\nmodel = genai.GenerativeModel('gemini-pro')\n\n# Connect to Notify-MCP\nmcp = MCPClient('notify-mcp')\n\n# Analyze data\nresponse = model.generate_content(\n    \"Analyze user_metrics.csv and identify trends\"\n)\n\n# If significant findings, notify team\nif \"significant\" in response.text.lower():\n    mcp.call_tool('publish_notification', {\n        'channel': 'data-insights',\n        'title': 'Significant User Metric Trends Identified',\n        'body': f\"Gemini analysis results:\\n\\n{response.text}\",\n        'priority': 'high',\n        'theme': 'info',\n        'sender': {\n            'aiTool': 'gemini'\n        }\n    })\n</code></pre> <p>Use Case 2: Multimodal Analysis + Notification</p> <pre><code># Gemini analyzes screenshot, notifies about UI issues\nimport PIL.Image\n\n# Load screenshot\nimg = PIL.Image.open('app_screenshot.png')\n\n# Gemini analyzes UI\nresponse = model.generate_content([\n    \"Analyze this UI screenshot for accessibility issues\",\n    img\n])\n\n# Notify design team\nif accessibility_issues_found(response.text):\n    mcp.call_tool('publish_notification', {\n        'channel': 'design-feedback',\n        'title': 'Accessibility Issues Detected in UI',\n        'body': response.text,\n        'priority': 'medium',\n        'theme': 'question',\n        'tags': ['accessibility', 'ui', 'design'],\n        'attachments': [{\n            'type': 'image',\n            'url': 'app_screenshot.png',\n            'name': 'UI Screenshot with Issues'\n        }],\n        'sender': {\n            'aiTool': 'gemini'\n        }\n    })\n</code></pre> <p>Use Case 3: Code Review + Notification</p> <pre><code>// Gemini reviews code, notifies about issues\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\nconst { MCPClient } = require(\"mcp-client\");\n\nconst genai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst model = genai.getGenerativeModel({ model: \"gemini-pro\" });\nconst mcp = new MCPClient(\"notify-mcp\");\n\n// Get code diff\nconst diff = await git.diff('main...feature-branch');\n\n// Gemini reviews\nconst result = await model.generateContent(\n  `Review this code for security issues, performance problems, and best practices:\\n\\n${diff}`\n);\n\n// Parse severity\nconst severity = extractSeverity(result.response.text());\n\nif (severity !== 'none') {\n  await mcp.callTool('publish_notification', {\n    channel: 'code-review',\n    title: `Code Review: ${severity.toUpperCase()} Issues Found`,\n    body: result.response.text(),\n    priority: severity === 'critical' ? 'critical' : 'high',\n    theme: 'alert',\n    tags: ['code-review', 'security', 'performance'],\n    sender: {\n      name: 'Gemini Code Reviewer',\n      role: 'dev',\n      aiTool: 'gemini'\n    },\n    actions: [{\n      type: 'review',\n      label: 'View Code Diff',\n      url: 'https://github.com/company/repo/compare/main...feature'\n    }]\n  });\n}\n</code></pre> <p>Use Case 4: Customer Feedback Analysis</p> <pre><code># Gemini analyzes customer feedback, notifies business team\nfeedback_data = load_customer_feedback()\n\nprompt = f\"\"\"\nAnalyze the following customer feedback and identify:\n1. Common pain points\n2. Feature requests\n3. Urgent issues\n4. Sentiment trends\n\nFeedback: {feedback_data}\n\"\"\"\n\nresponse = model.generate_content(prompt)\nanalysis = response.text\n\n# Extract actionable insights\ninsights = extract_insights(analysis)\n\n# Notify business and consulting teams\nmcp.call_tool('publish_notification', {\n    'channel': 'customer-insights',\n    'title': 'Weekly Customer Feedback Analysis',\n    'body': f\"\"\"# Customer Feedback Insights\n\n{analysis}\n\n## Recommended Actions\n{format_actions(insights)}\n\"\"\",\n    'format': 'markdown',\n    'priority': 'medium',\n    'theme': 'info',\n    'tags': ['customer-feedback', 'insights', 'weekly-report'],\n    'visibility': {\n        'teams': ['business', 'consulting', 'dev']\n    },\n    'sender': {\n        'name': 'Gemini Analyst',\n        'role': 'business',\n        'aiTool': 'gemini'\n    }\n})\n</code></pre>"},{"location":"USAGE_GUIDE/#using-with-chatgpt","title":"Using with ChatGPT","text":"<p>ChatGPT can connect to MCP servers through custom GPT actions or API integrations.</p>"},{"location":"USAGE_GUIDE/#1-configure-chatgpt-custom-gpt-action","title":"1. Configure ChatGPT Custom GPT Action","text":"<p>In Custom GPT settings, add Notify-MCP as an action:</p> <pre><code>openapi: 3.0.0\ninfo:\n  title: Notify-MCP API\n  version: 1.0.0\nservers:\n  - url: http://localhost:3000/mcp\npaths:\n  /publish:\n    post:\n      operationId: publishNotification\n      summary: Publish notification to team\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                channel: { type: string }\n                title: { type: string }\n                body: { type: string }\n                priority: { type: string }\n</code></pre>"},{"location":"USAGE_GUIDE/#2-using-from-chatgpt-conversations","title":"2. Using from ChatGPT Conversations","text":"<pre><code>User: We decided to switch from REST to GraphQL. Notify the team.\n\nChatGPT: I'll notify the team about the API architecture change.\n\n[Calls publishNotification action]\n\n\u2713 Notification sent to #project-alpha channel\n  \"Architecture Decision: Migrating to GraphQL\"\n  Delivered to 12 team members\n</code></pre>"},{"location":"USAGE_GUIDE/#cross-platform-collaboration-examples","title":"Cross-Platform Collaboration Examples","text":"<p>Scenario 1: Claude Code \u2192 Gemini \u2192 Team</p> <ol> <li>Developer using Claude Code makes code changes</li> <li>Claude Code publishes notification about changes</li> <li>Business analyst using Gemini sees notification</li> <li>Gemini helps analyze impact and notifies business team</li> </ol> <p>Scenario 2: Gemini Analysis \u2192 ChatGPT Review \u2192 Claude Code Implementation</p> <ol> <li>Gemini analyzes customer data, publishes insights</li> <li>Product manager using ChatGPT sees notification</li> <li>ChatGPT helps draft requirements, publishes to dev channel</li> <li>Developer using Claude Code sees notification and implements</li> </ol> <p>Scenario 3: Multi-AI Decision Making</p> <pre><code># Team discussion across AI platforms\n\n[Claude Code - Dev Team]\n\"Proposing microservices architecture for user service.\n Pros: Scalability, independent deployment\n Cons: Complexity, distributed debugging\n Thoughts?\"\n\n[ChatGPT - Business Team]\n\"From business perspective: Concerned about timeline impact.\n Current monolith works. What's the ROI?\"\n\n[Gemini - Consulting Team]\n\"Analyzed similar migrations. Average 3-month timeline,\n 20% ops cost increase first year, 40% scalability gain.\n Recommend phased approach.\"\n\n[Claude Code - Dev Team]\n\"Decision: Phased migration starting Q2.\n Phase 1: Extract user authentication service\n Phase 2: Extract notification service\n Phase 3: Evaluate and continue\"\n</code></pre>"},{"location":"USAGE_GUIDE/#references","title":"References","text":"<ul> <li>API Documentation</li> <li>Notification Schema</li> <li>Architecture Overview</li> <li>MCP Primitives (Tools, Resources, Prompts)</li> </ul>"},{"location":"about/changelog/","title":"Changelog","text":"<p>Release history and version notes for Notify-MCP.</p>"},{"location":"about/changelog/#version-110-persistent-storage-2025-01-12","title":"Version 1.1.0 - Persistent Storage (2025-01-12)","text":""},{"location":"about/changelog/#new-features","title":"New Features","text":"<p>\u2705 Persistent SQLite Storage - File-based SQLite database for team collaboration - Automatic LRU cache enforcement - Foreign key constraints with cascade deletes - WAL mode for better concurrency</p> <p>\u2705 Team Collaboration - Share notifications via shared database files - Cross-platform synchronization - Persistent notification history</p> <p>\u2705 Storage Configuration - Environment variable configuration - Configurable max history per channel - Path expansion support (~, $HOME)</p>"},{"location":"about/changelog/#improvements","title":"Improvements","text":"<ul> <li>Storage factory pattern for extensibility</li> <li>Enhanced test coverage (70%)</li> <li>62 passing unit tests</li> <li>Comprehensive storage documentation</li> </ul>"},{"location":"about/changelog/#technical-details","title":"Technical Details","text":"<ul> <li>3 database tables: channels, subscriptions, notifications</li> <li>JSON columns for nested Pydantic models</li> <li>Indexes on common queries (channel, timestamp)</li> <li>Async SQLAlchemy with aiosqlite</li> </ul>"},{"location":"about/changelog/#version-100-mvp-release-2025-01-10","title":"Version 1.0.0 - MVP Release (2025-01-10)","text":""},{"location":"about/changelog/#initial-release","title":"Initial Release","text":"<p>\u2705 Core Features - Pub-sub architecture with channels - 6 MCP tools for notification management - 3 MCP resources for data access - 2 prompt templates (ADR, alerts) - Smart filtering (priority, tags, themes, roles)</p> <p>\u2705 Storage - In-memory storage with LRU cache - Notification history (last 50 per channel)</p> <p>\u2705 Quality - 48 unit tests - Pydantic validation - JSON Schema support - Type-safe implementation</p> <p>\u2705 Documentation - API reference - Architecture guide - Usage examples - Installation guide</p>"},{"location":"about/changelog/#roadmap","title":"Roadmap","text":"<p>See Roadmap for upcoming features.</p>"},{"location":"about/contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to Notify-MCP!</p>"},{"location":"about/contributing/#ways-to-contribute","title":"Ways to Contribute","text":""},{"location":"about/contributing/#report-bugs","title":"Report Bugs","text":"<p>Found a bug? Create an issue:</p> <ul> <li>Title: Clear description of the issue</li> <li>Steps to reproduce: Detailed reproduction steps</li> <li>Expected behavior: What should happen</li> <li>Actual behavior: What actually happens</li> <li>Environment: OS, Python version, MCP SDK version</li> </ul> <p>Report a bug</p>"},{"location":"about/contributing/#suggest-features","title":"Suggest Features","text":"<p>Have an idea? Create a feature request:</p> <ul> <li>Title: Concise feature description</li> <li>Problem: What problem does it solve?</li> <li>Solution: Proposed implementation</li> <li>Alternatives: Other approaches considered</li> <li>Use case: Real-world scenario</li> </ul> <p>Suggest a feature</p>"},{"location":"about/contributing/#contribute-code","title":"Contribute Code","text":"<p>Ready to code? Follow these steps:</p>"},{"location":"about/contributing/#1-fork-the-repository","title":"1. Fork the Repository","text":"<pre><code>git clone https://github.com/your-username/notify-mcp.git\ncd notify-mcp\n</code></pre>"},{"location":"about/contributing/#2-create-a-feature-branch","title":"2. Create a Feature Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"about/contributing/#3-set-up-development-environment","title":"3. Set Up Development Environment","text":"<pre><code>uv sync\nuv sync --extra dev\n</code></pre>"},{"location":"about/contributing/#4-make-your-changes","title":"4. Make Your Changes","text":"<ul> <li>Follow existing code style</li> <li>Add tests for new functionality</li> <li>Update documentation</li> </ul>"},{"location":"about/contributing/#5-run-tests","title":"5. Run Tests","text":"<pre><code># Run all tests\nuv run pytest\n\n# Run with coverage\nuv run pytest --cov=src/notify_mcp\n\n# Run specific test\nuv run pytest tests/test_your_feature.py -v\n</code></pre>"},{"location":"about/contributing/#6-run-linting","title":"6. Run Linting","text":"<pre><code># Check code style\nuv run ruff check src/\n\n# Format code\nuv run ruff format src/\n\n# Type checking\nuv run mypy src/notify_mcp\n</code></pre>"},{"location":"about/contributing/#7-commit-your-changes","title":"7. Commit Your Changes","text":"<pre><code>git add .\ngit commit -m \"feat: Add your feature description\"\n</code></pre> <p>Commit message format: - <code>feat:</code> New feature - <code>fix:</code> Bug fix - <code>docs:</code> Documentation changes - <code>test:</code> Test additions or changes - <code>refactor:</code> Code refactoring</p>"},{"location":"about/contributing/#8-push-and-create-pull-request","title":"8. Push and Create Pull Request","text":"<pre><code>git push origin feature/your-feature-name\n</code></pre> <p>Then create a Pull Request on GitHub.</p>"},{"location":"about/contributing/#code-style","title":"Code Style","text":"<ul> <li>Python: Follow PEP 8</li> <li>Line length: 100 characters</li> <li>Type hints: Required for all functions</li> <li>Docstrings: Google style</li> </ul>"},{"location":"about/contributing/#testing-requirements","title":"Testing Requirements","text":"<p>All contributions must include tests:</p> <ul> <li>Unit tests: For business logic</li> <li>Integration tests: For component interaction</li> <li>Coverage: Aim for 80%+ on new code</li> </ul>"},{"location":"about/contributing/#documentation","title":"Documentation","text":"<p>Update documentation for:</p> <ul> <li>New features</li> <li>API changes</li> <li>Configuration changes</li> <li>Breaking changes</li> </ul>"},{"location":"about/contributing/#code-review-process","title":"Code Review Process","text":"<ol> <li>Automated checks: Tests, linting, type checking must pass</li> <li>Review: Maintainer reviews code</li> <li>Feedback: Address review comments</li> <li>Approval: Maintainer approves</li> <li>Merge: PR merged to main</li> </ol>"},{"location":"about/contributing/#development-setup","title":"Development Setup","text":""},{"location":"about/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>uv package manager</li> <li>Git</li> </ul>"},{"location":"about/contributing/#install-development-dependencies","title":"Install Development Dependencies","text":"<pre><code>uv sync --extra dev\n</code></pre>"},{"location":"about/contributing/#run-development-server","title":"Run Development Server","text":"<pre><code>uv run python -m notify_mcp\n</code></pre>"},{"location":"about/contributing/#run-tests-continuously","title":"Run Tests Continuously","text":"<pre><code>uv run pytest-watch\n</code></pre>"},{"location":"about/contributing/#questions","title":"Questions?","text":"<ul> <li>Chat: GitHub Discussions</li> <li>Issues: GitHub Issues</li> </ul>"},{"location":"about/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Be respectful, inclusive, and constructive. We welcome contributors of all skill levels.</p> <p>Ready to contribute? Fork the repository \u2192</p>"},{"location":"about/roadmap/","title":"Roadmap","text":"<p>Planned features and future development for Notify-MCP.</p>"},{"location":"about/roadmap/#phase-1-mvp-complete","title":"Phase 1: MVP \u2705 (Complete)","text":"<p>Status: Released as v1.0.0</p> <ul> <li>\u2705 stdio transport</li> <li>\u2705 In-memory storage</li> <li>\u2705 6 MCP tools</li> <li>\u2705 3 MCP resources</li> <li>\u2705 Smart filtering</li> <li>\u2705 48 unit tests</li> </ul>"},{"location":"about/roadmap/#phase-2a-persistent-storage-complete","title":"Phase 2A: Persistent Storage \u2705 (Complete)","text":"<p>Status: Released as v1.1.0</p> <ul> <li>\u2705 SQLite storage adapter</li> <li>\u2705 Storage factory pattern</li> <li>\u2705 Environment variable configuration</li> <li>\u2705 LRU cache enforcement</li> <li>\u2705 Team collaboration support</li> <li>\u2705 62 unit tests, 70% coverage</li> </ul>"},{"location":"about/roadmap/#phase-2b-real-time-collaboration-in-progress","title":"Phase 2B: Real-Time Collaboration (In Progress)","text":"<p>Target: Q2 2025</p> <ul> <li> HTTP transport</li> <li> Redis Pub/Sub integration</li> <li> WebSocket support</li> <li> Server-sent events</li> <li> Multi-server support</li> <li> Horizontal scaling</li> </ul>"},{"location":"about/roadmap/#phase-2c-security-permissions-planned","title":"Phase 2C: Security &amp; Permissions (Planned)","text":"<p>Target: Q3 2025</p> <ul> <li> Authentication (API keys, JWT)</li> <li> Role-based access control (RBAC)</li> <li> Permission enforcement</li> <li> Rate limiting</li> <li> Audit logging</li> <li> Encrypted storage</li> </ul>"},{"location":"about/roadmap/#phase-3-advanced-features-future","title":"Phase 3: Advanced Features (Future)","text":"<p>Target: Q4 2025+</p>"},{"location":"about/roadmap/#notification-features","title":"Notification Features","text":"<ul> <li> Notification threading (replyTo)</li> <li> Read receipts</li> <li> Notification expiry</li> <li> Attachments support</li> <li> Rich media (images, videos)</li> </ul>"},{"location":"about/roadmap/#integration","title":"Integration","text":"<ul> <li> Webhook delivery</li> <li> Slack integration</li> <li> Discord integration</li> <li> Email notifications</li> <li> SMS notifications</li> </ul>"},{"location":"about/roadmap/#user-experience","title":"User Experience","text":"<ul> <li> Web dashboard</li> <li> Mobile app (iOS/Android)</li> <li> Desktop notifications</li> <li> Search &amp; filtering UI</li> <li> Analytics dashboard</li> </ul>"},{"location":"about/roadmap/#enterprise","title":"Enterprise","text":"<ul> <li> PostgreSQL support</li> <li> Multi-tenancy</li> <li> SSO integration</li> <li> Advanced analytics</li> <li> SLA monitoring</li> <li> Disaster recovery</li> </ul>"},{"location":"about/roadmap/#community-requests","title":"Community Requests","text":"<p>Vote on features via GitHub issues:</p> <ul> <li>Tag: <code>feature-request</code></li> <li>Vote: React with \ud83d\udc4d</li> <li>Discuss: Comment on the issue</li> </ul> <p>Top-voted features may be prioritized.</p>"},{"location":"about/roadmap/#contributing","title":"Contributing","text":"<p>Want to help build these features?</p> <p> Contributing Guide</p>"},{"location":"about/roadmap/#long-term-vision","title":"Long-Term Vision","text":"<p>Goal: Become the standard notification layer for cross-platform AI collaboration.</p>"},{"location":"about/roadmap/#2025","title":"2025","text":"<ul> <li>Stable 2.0 release with HTTP transport</li> <li>1,000+ teams using Notify-MCP</li> <li>Enterprise edition launch</li> </ul>"},{"location":"about/roadmap/#2026","title":"2026","text":"<ul> <li>Integration with major platforms (Slack, Teams, Discord)</li> <li>Web dashboard and mobile apps</li> <li>10,000+ teams using Notify-MCP</li> </ul>"},{"location":"about/roadmap/#2027","title":"2027+","text":"<ul> <li>AI-powered notification summarization</li> <li>Predictive alerting</li> <li>Advanced analytics and insights</li> </ul> <p>Follow development: GitHub Repository</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete reference for Notify-MCP tools, resources, and configuration.</p>"},{"location":"api-reference/#tools","title":"Tools","text":"<p>Notify-MCP provides 6 MCP tools for managing notifications:</p> Tool Purpose publish_notification Publish a notification to a channel subscribe_to_channel Subscribe to a channel with filters unsubscribe_from_channel Unsubscribe from a channel list_channels List all available channels create_channel Create a new notification channel get_my_subscriptions Get your current subscriptions <p> Tools Documentation</p>"},{"location":"api-reference/#resources","title":"Resources","text":"<p>3 MCP resources for accessing notification data:</p> Resource Purpose <code>notification://&lt;channel&gt;/recent</code> Get last 50 notifications from a channel <code>channel://&lt;channel&gt;/info</code> Get channel information and statistics <code>schema://notification</code> Get the notification JSON schema <p> Resources Documentation</p>"},{"location":"api-reference/#prompts","title":"Prompts","text":"<p>2 prompt templates for common workflows:</p> <ul> <li>Architecture Decision - Structured template for ADRs</li> <li>Critical Alert - Template for urgent notifications</li> </ul> <p> Prompts Documentation</p>"},{"location":"api-reference/#configuration","title":"Configuration","text":"<p>Environment variables and settings:</p> <p> Configuration Options</p>"},{"location":"api-reference/#complete-api-documentation","title":"Complete API Documentation","text":"<p>For detailed JSON-RPC API documentation, see:</p> <p>Complete API Reference</p> <p>Includes: - All API methods with request/response examples - Error codes and handling - Rate limits - Transport-specific details - Usage examples</p>"},{"location":"api-reference/configuration/","title":"Configuration Options","text":"<p>Environment variables and settings for Notify-MCP.</p>"},{"location":"api-reference/configuration/#environment-variables","title":"Environment Variables","text":"Variable Options Default Description <code>NOTIFY_MCP_STORAGE_TYPE</code> <code>memory</code>, <code>sqlite</code> <code>memory</code> Storage backend type <code>NOTIFY_MCP_SQLITE_PATH</code> file path <code>~/.notify-mcp/storage.db</code> SQLite database path <code>NOTIFY_MCP_MAX_HISTORY</code> integer <code>1000</code> Max notifications per channel (LRU) <code>NOTIFY_MCP_LOG_LEVEL</code> <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> <code>INFO</code> Logging level"},{"location":"api-reference/configuration/#mcp-server-configuration","title":"MCP Server Configuration","text":""},{"location":"api-reference/configuration/#claude-desktop","title":"Claude Desktop","text":"<p>File: <code>~/.config/Claude/claude_desktop_config.json</code></p> <pre><code>{\n  \"mcpServers\": {\n    \"notify-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"python\", \"-m\", \"notify_mcp\"],\n      \"cwd\": \"/path/to/notify-mcp\",\n      \"env\": {\n        \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n        \"NOTIFY_MCP_SQLITE_PATH\": \"~/.notify-mcp/storage.db\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api-reference/configuration/#storage-configuration","title":"Storage Configuration","text":"<p>See: Storage Configuration Guide</p> <p>For complete configuration details, see: Configuration Guide</p>"},{"location":"api-reference/prompts/","title":"MCP Prompts Reference","text":"<p>Notify-MCP provides 2 prompt templates for common workflows.</p>"},{"location":"api-reference/prompts/#architecture-decision-prompt","title":"Architecture Decision Prompt","text":"<p>Template for structured architecture decision records (ADRs).</p> <p>Usage: Use this prompt when making architectural decisions.</p> <p>Prompts for: - Decision title - Context/background - What was decided - Consequences (pros/cons) - Alternatives considered</p> <p>Output: Well-structured ADR notification</p>"},{"location":"api-reference/prompts/#critical-alert-prompt","title":"Critical Alert Prompt","text":"<p>Template for urgent production alerts.</p> <p>Usage: Use this prompt for critical incidents.</p> <p>Prompts for: - Alert title - Severity level - Impact description - Affected systems - Required actions</p> <p>Output: High-priority alert notification</p>"},{"location":"api-reference/prompts/#using-prompts","title":"Using Prompts","text":""},{"location":"api-reference/prompts/#in-claude-code","title":"In Claude Code","text":"<p>Prompts are automatically available as slash commands:</p> <pre><code>/notify-decision\n/notify-alert\n</code></pre>"},{"location":"api-reference/prompts/#in-other-ai-assistants","title":"In Other AI Assistants","text":"<p>Request the prompt explicitly:</p> <pre><code>Use the architecture decision prompt to create a notification\n</code></pre> <p>For complete API documentation, see: API Documentation</p>"},{"location":"api-reference/resources/","title":"MCP Resources Reference","text":"<p>Notify-MCP provides 3 MCP resources for accessing notification data.</p>"},{"location":"api-reference/resources/#notificationrecent","title":"notification:///recent <p>Retrieve last 50 notifications from a channel.</p> <p>URI Format: <code>notification://&lt;channel_name&gt;/recent</code></p> <p>Example: <code>notification://engineering/recent</code></p> <p>Returns: JSON array of notifications (up to 50 most recent)</p> <p>Filtering: Applied based on your subscription filters</p>","text":""},{"location":"api-reference/resources/#channelinfo","title":"channel:///info <p>Get channel information and statistics.</p> <p>URI Format: <code>channel://&lt;channel_name&gt;/info</code></p> <p>Example: <code>channel://engineering/info</code></p> <p>Returns: Channel details including: - Channel name and description - Subscriber count - Total notification count - Last notification timestamp - Creation date</p>","text":""},{"location":"api-reference/resources/#schemanotification","title":"schema://notification <p>Get the complete notification JSON schema.</p> <p>URI Format: <code>schema://notification</code></p> <p>Returns: JSON Schema specification for notifications</p> <p>Use case: Understand notification structure, validate custom notifications</p>  <p>For complete API documentation, see: API Documentation</p>","text":""},{"location":"api-reference/tools/","title":"MCP Tools Reference","text":"<p>Complete reference for all Notify-MCP tools.</p>"},{"location":"api-reference/tools/#publish_notification","title":"publish_notification","text":"<p>Publish a notification to a channel.</p> <p>Arguments:</p> Parameter Type Required Default Description <code>channel</code> string Yes - Channel name <code>title</code> string Yes - Notification title <code>body</code> string Yes - Notification body <code>priority</code> string No \"medium\" Priority level <code>theme</code> string No \"info\" Notification theme <code>tags</code> array No [] List of tags <p>Priority values: <code>low</code>, <code>medium</code>, <code>high</code>, <code>critical</code></p> <p>Theme values: <code>info</code>, <code>state-update</code>, <code>alert</code>, <code>architecture-decision</code>, <code>question</code>, <code>decision</code>, <code>memory-sync</code>, <code>discussion</code></p> <p>Returns: Notification ID and delivery statistics</p>"},{"location":"api-reference/tools/#subscribe_to_channel","title":"subscribe_to_channel","text":"<p>Subscribe to a channel with optional filters.</p> <p>Arguments:</p> Parameter Type Required Description <code>channel</code> string Yes Channel name <code>priority_filter</code> array No Filter by priority <code>tag_filter</code> array No Filter by tags <p>Returns: Subscription ID and filter details</p>"},{"location":"api-reference/tools/#unsubscribe_from_channel","title":"unsubscribe_from_channel","text":"<p>Unsubscribe from a channel.</p> <p>Arguments:</p> Parameter Type Required Description <code>channel</code> string Yes Channel name <p>Returns: Success status</p>"},{"location":"api-reference/tools/#list_channels","title":"list_channels","text":"<p>List all available channels.</p> <p>Arguments: None</p> <p>Returns: Array of channels with statistics</p>"},{"location":"api-reference/tools/#create_channel","title":"create_channel","text":"<p>Create a new notification channel.</p> <p>Arguments:</p> Parameter Type Required Description <code>channel_id</code> string Yes Unique channel ID <code>name</code> string Yes Channel name <code>description</code> string No Channel description <p>Returns: Channel details</p>"},{"location":"api-reference/tools/#get_my_subscriptions","title":"get_my_subscriptions","text":"<p>Get current subscriptions.</p> <p>Arguments: None</p> <p>Returns: Array of subscriptions with filters</p> <p>For complete API documentation, see: API Documentation</p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>Notify-MCP is a pub-sub notification system built on the Model Context Protocol (MCP).</p>"},{"location":"architecture/overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     MCP Clients                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Claude  \u2502  \u2502 ChatGPT  \u2502  \u2502  Gemini  \u2502  \u2502  Custom  \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502              \u2502             \u2502              \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502    Notify-MCP Server                \u2502\n        \u2502                                     \u2502\n        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n        \u2502  \u2502  MCP Protocol Handler       \u2502   \u2502\n        \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n        \u2502  \u2502  Core Services              \u2502   \u2502\n        \u2502  \u2502  \u2022 Subscription Manager     \u2502   \u2502\n        \u2502  \u2502  \u2022 Notification Router      \u2502   \u2502\n        \u2502  \u2502  \u2022 Channel Manager          \u2502   \u2502\n        \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n        \u2502  \u2502  Storage Layer              \u2502   \u2502\n        \u2502  \u2502  \u2022 In-Memory / SQLite       \u2502   \u2502\n        \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#key-components","title":"Key Components","text":""},{"location":"architecture/overview/#mcp-protocol-handler","title":"MCP Protocol Handler","text":"<ul> <li>Handles JSON-RPC 2.0 over stdio</li> <li>Routes requests to appropriate services</li> <li>Delivers notifications to subscribed clients</li> </ul>"},{"location":"architecture/overview/#subscription-manager","title":"Subscription Manager","text":"<ul> <li>Manages client subscriptions to channels</li> <li>Applies filters (priority, tags, themes, roles)</li> <li>Tracks subscription metadata</li> </ul>"},{"location":"architecture/overview/#notification-router","title":"Notification Router","text":"<ul> <li>Routes published notifications to subscribers</li> <li>Applies filters for each subscriber</li> <li>Tracks delivery status</li> </ul>"},{"location":"architecture/overview/#channel-manager","title":"Channel Manager","text":"<ul> <li>Creates and manages notification channels</li> <li>Enforces permissions</li> <li>Maintains channel metadata</li> </ul>"},{"location":"architecture/overview/#storage-layer","title":"Storage Layer","text":"<ul> <li>In-Memory: Fast, not persistent</li> <li>SQLite: Persistent, enables team collaboration</li> <li>Pluggable architecture for future backends</li> </ul>"},{"location":"architecture/overview/#data-flow","title":"Data Flow","text":""},{"location":"architecture/overview/#publishing-a-notification","title":"Publishing a Notification","text":"<pre><code>Publisher \u2192 MCP Handler \u2192 Validator \u2192 Router \u2192 Subscribers\n</code></pre> <ol> <li>Client publishes notification</li> <li>MCP handler receives request</li> <li>Validator checks schema</li> <li>Router identifies subscribers</li> <li>Filters applied per subscriber</li> <li>Notification delivered</li> </ol>"},{"location":"architecture/overview/#communication-patterns","title":"Communication Patterns","text":""},{"location":"architecture/overview/#broadcast","title":"Broadcast","text":"<ul> <li>Publisher sends to channel</li> <li>All subscribers receive</li> <li>No filtering</li> </ul>"},{"location":"architecture/overview/#filtered","title":"Filtered","text":"<ul> <li>Publisher sends to channel</li> <li>Only matching subscribers receive</li> <li>Filters: priority, tags, themes, roles</li> </ul>"},{"location":"architecture/overview/#threaded","title":"Threaded","text":"<ul> <li>Notifications can reference parents</li> <li>Enables conversation threads</li> </ul>"},{"location":"architecture/overview/#complete-architecture-documentation","title":"Complete Architecture Documentation","text":"<p>For detailed architecture documentation, see:</p> <p>Complete Architecture Guide</p> <p>Includes: - Component diagrams - Data flow details - Storage architecture - Scalability considerations - Technology stack details</p>"},{"location":"architecture/overview/#related","title":"Related","text":"<ul> <li>Storage Architecture</li> <li>Pub-Sub Model</li> <li>Storage Configuration</li> </ul>"},{"location":"architecture/pub-sub-model/","title":"Pub-Sub Model","text":"<p>Notify-MCP implements a publish-subscribe messaging pattern.</p>"},{"location":"architecture/pub-sub-model/#core-concepts","title":"Core Concepts","text":""},{"location":"architecture/pub-sub-model/#publishers","title":"Publishers","text":"<ul> <li>Publish notifications to channels</li> <li>Don't know who subscribes</li> <li>Fire-and-forget model</li> </ul>"},{"location":"architecture/pub-sub-model/#subscribers","title":"Subscribers","text":"<ul> <li>Subscribe to channels</li> <li>Receive matching notifications</li> <li>Apply filters (priority, tags, themes)</li> </ul>"},{"location":"architecture/pub-sub-model/#channels","title":"Channels","text":"<ul> <li>Named topics for organizing notifications</li> <li>Support multiple publishers</li> <li>Support multiple subscribers</li> </ul>"},{"location":"architecture/pub-sub-model/#communication-patterns","title":"Communication Patterns","text":""},{"location":"architecture/pub-sub-model/#broadcast","title":"Broadcast","text":"<p>Publisher \u2192 Channel \u2192 All Subscribers</p>"},{"location":"architecture/pub-sub-model/#filtered","title":"Filtered","text":"<p>Publisher \u2192 Channel \u2192 Matching Subscribers (based on filters)</p>"},{"location":"architecture/pub-sub-model/#threaded","title":"Threaded","text":"<p>Notifications can reference parents (<code>replyTo</code>)</p>"},{"location":"architecture/pub-sub-model/#benefits","title":"Benefits","text":"<ul> <li>Decoupling: Publishers and subscribers independent</li> <li>Scalability: Add subscribers without changing publishers</li> <li>Flexibility: Subscribers control what they receive</li> </ul> <p>For complete architecture documentation, see: Architecture Overview</p>"},{"location":"architecture/storage/","title":"Storage Architecture","text":"<p>Overview of Notify-MCP's storage layer.</p>"},{"location":"architecture/storage/#storage-types","title":"Storage Types","text":""},{"location":"architecture/storage/#in-memory-storage","title":"In-Memory Storage","text":"<p>Implementation: Python dictionaries Performance: Fastest (no I/O) Persistence: None Use case: Individual use, testing</p>"},{"location":"architecture/storage/#sqlite-storage","title":"SQLite Storage","text":"<p>Implementation: SQLAlchemy + aiosqlite Performance: Fast (file-based) Persistence: Yes Use case: Team collaboration</p>"},{"location":"architecture/storage/#database-schema","title":"Database Schema","text":"<p>Tables: - <code>channels</code> - Channel definitions - <code>subscriptions</code> - Client subscriptions - <code>notifications</code> - Notification history</p> <p>Features: - Foreign key constraints - Cascade deletes - JSON columns for nested data - Indexes on common queries - WAL mode for concurrency</p>"},{"location":"architecture/storage/#lru-cache","title":"LRU Cache","text":"<p>Automatic enforcement of max history per channel:</p> <ul> <li>Default: 1000 notifications per channel</li> <li>Configurable via <code>NOTIFY_MCP_MAX_HISTORY</code></li> <li>Old notifications automatically removed</li> </ul> <p>For complete storage documentation, see: Storage Guide</p>"},{"location":"examples/advanced-workflows/","title":"Advanced Workflows","text":"<p>Complex scenarios and integration patterns.</p>"},{"location":"examples/advanced-workflows/#workflow-1-multi-step-sprint-coordination","title":"Workflow 1: Multi-Step Sprint Coordination","text":"<p>Track an entire sprint with notifications:</p>"},{"location":"examples/advanced-workflows/#week-1-planning","title":"Week 1: Planning","text":"<pre><code>Publish to sprint-24: \"Sprint 24 kickoff - User notification preferences feature\"\n</code></pre>"},{"location":"examples/advanced-workflows/#week-2-development","title":"Week 2: Development","text":"<pre><code>Publish to sprint-24: \"Backend API complete - notification_preferences table ready\"\nPublish to sprint-24: \"Frontend UI started - using mocked API\"\n</code></pre>"},{"location":"examples/advanced-workflows/#week-3-integration","title":"Week 3: Integration","text":"<pre><code>Publish to sprint-24: \"Integration complete - frontend connected to real API\"\nPublish to sprint-24: \"BLOCKER: API returns 500 for null quiet_hours\"\nPublish to sprint-24: \"Blocker resolved - null handling fixed\"\n</code></pre>"},{"location":"examples/advanced-workflows/#week-4-launch","title":"Week 4: Launch","text":"<pre><code>Publish to sprint-24: \"QA complete - all tests passing\"\nPublish to sprint-24: \"LAUNCHED: Notification preferences live in production!\"\n</code></pre>"},{"location":"examples/advanced-workflows/#retrospective","title":"Retrospective","text":"<pre><code>Show me all notifications from sprint-24\n</code></pre>"},{"location":"examples/advanced-workflows/#workflow-2-incident-response","title":"Workflow 2: Incident Response","text":""},{"location":"examples/advanced-workflows/#detection","title":"Detection","text":"<pre><code>Publish critical alert to production:\n\"Database connection pool exhausted - 250/250 connections in use\"\n</code></pre>"},{"location":"examples/advanced-workflows/#response","title":"Response","text":"<pre><code>Publish to production: \"Investigating - checking for connection leaks\"\nPublish to production: \"Root cause identified - retry storm hitting rate limit\"\nPublish to production: \"Mitigation - disabling automatic retries\"\n</code></pre>"},{"location":"examples/advanced-workflows/#resolution","title":"Resolution","text":"<pre><code>Publish to production: \"RESOLVED - Error rate back to 0%, implementing exponential backoff\"\n</code></pre>"},{"location":"examples/advanced-workflows/#workflow-3-cross-platform-decision-making","title":"Workflow 3: Cross-Platform Decision Making","text":""},{"location":"examples/advanced-workflows/#research-perplexitygemini","title":"Research (Perplexity/Gemini)","text":"<pre><code>Publish to architecture: \"Research: Microservices migration patterns - 60% report increased complexity\"\n</code></pre>"},{"location":"examples/advanced-workflows/#discussion-chatgpt","title":"Discussion (ChatGPT)","text":"<pre><code>Publish to architecture: \"Concern: Timeline impact - current monolith works, what's the ROI?\"\n</code></pre>"},{"location":"examples/advanced-workflows/#decision-claude","title":"Decision (Claude)","text":"<pre><code>Publish to architecture: \"DECISION: Phased migration - modular monolith first, then extract services\"\n</code></pre> <p>For complete examples, see: Usage Guide</p>"},{"location":"examples/basic-usage/","title":"Basic Usage Examples","text":"<p>Practical examples for common Notify-MCP workflows.</p>"},{"location":"examples/basic-usage/#example-1-create-channel-and-publish","title":"Example 1: Create Channel and Publish","text":"<p>Create a project channel:</p> <pre><code>Create a channel called 'project-alpha' for Project Alpha team updates\n</code></pre> <p>Publish a notification:</p> <pre><code>Publish to project-alpha:\nTitle: \"Sprint 5 Complete\"\nBody: \"All 23 stories completed, 87% test coverage, beta ready for deployment\"\nPriority: Medium\nTags: sprint, milestone\n</code></pre> <p>Retrieve notifications:</p> <pre><code>Show me recent notifications from project-alpha\n</code></pre>"},{"location":"examples/basic-usage/#example-2-architecture-decision","title":"Example 2: Architecture Decision","text":"<p>Using slash command (Claude Code):</p> <pre><code>/notify-decision\n</code></pre> <p>Or directly:</p> <pre><code>Publish architecture decision to engineering channel:\nDecision: Migrating to microservices architecture\nContext: Monolith becoming hard to scale and deploy\nRationale: Need independent deployment and scaling\nImpact: 6-month migration timeline\nPriority: High\nTags: architecture, microservices\n</code></pre>"},{"location":"examples/basic-usage/#example-3-critical-alert","title":"Example 3: Critical Alert","text":"<p>Publish production alert:</p> <pre><code>Publish critical alert to production channel:\nTitle: \"Database Connection Pool Exhausted\"\nIssue: 250/250 connections in use\nImpact: API response times degraded\nAction: Investigate connection leaks immediately\nPriority: Critical\nTags: production, database, incident\n</code></pre>"},{"location":"examples/basic-usage/#example-4-filtered-subscriptions","title":"Example 4: Filtered Subscriptions","text":"<p>Subscribe with filters:</p> <pre><code>Subscribe to engineering channel with:\n- Priority: high and critical only\n- Tags: backend, database, security\n</code></pre> <p>Result: Only notifications matching ALL criteria are visible.</p>"},{"location":"examples/basic-usage/#example-5-cross-team-notification","title":"Example 5: Cross-Team Notification","text":"<p>Product Manager (using ChatGPT):</p> <pre><code>Publish to all-hands channel:\nTitle: \"Q1 OKRs Finalized\"\nBody: \"Q1 objectives published to wiki. Please review your team's goals by EOW.\"\nPriority: High\nTags: okr, planning, quarterly\n</code></pre> <p>Developer (using Claude):</p> <pre><code>Show me recent notifications from all-hands\n</code></pre> <p>Result: Sees the OKR notification despite different AI platforms!</p>"},{"location":"examples/basic-usage/#example-6-sprint-workflow","title":"Example 6: Sprint Workflow","text":"<p>Week 1: <pre><code>Publish to sprint-24: \"Sprint kickoff - Payment feature\"\n</code></pre></p> <p>Week 2: <pre><code>Publish to sprint-24: \"Milestone: Backend API complete\"\n</code></pre></p> <p>Week 3: <pre><code>Publish to sprint-24: \"Blocker: Stripe API rate limit issue\"\nPublish to sprint-24: \"Blocker resolved: Implemented exponential backoff\"\n</code></pre></p> <p>Week 4: <pre><code>Publish to sprint-24: \"Sprint complete - Payment feature shipped!\"\n</code></pre></p> <p>Retrospective: <pre><code>Show me all notifications from sprint-24\n</code></pre></p> <p>Result: Complete sprint timeline for retrospective!</p>"},{"location":"examples/basic-usage/#example-7-question-and-discussion","title":"Example 7: Question and Discussion","text":"<p>Ask the team:</p> <pre><code>Publish question to architecture channel:\nTitle: \"Should we upgrade to Node 20 or stay on Node 18?\"\nContext: Node 20 offers performance improvements but may have compatibility issues\nOptions:\n1. Upgrade now (risks: compatibility)\n2. Wait for LTS (risks: miss performance gains)\n3. Gradual rollout (risks: complexity)\nPriority: Medium\nTags: infrastructure, nodejs, decision-needed\n</code></pre> <p>Team members respond:</p> <pre><code>Publish to architecture:\nTitle: \"Re: Node 20 Upgrade\"\nBody: \"Recommend option 3 (gradual rollout). Migrate dev first, then staging, then prod.\"\nPriority: Medium\nTags: infrastructure, nodejs\n</code></pre>"},{"location":"examples/basic-usage/#complete-usage-documentation","title":"Complete Usage Documentation","text":"<p>For comprehensive usage examples including platform-specific guides, see:</p> <p>Complete Usage Guide</p> <p>Includes: - Claude Code workflows - ChatGPT integration patterns - Gemini usage examples - Advanced filtering strategies - Integration patterns (CI/CD, monitoring)</p>"},{"location":"examples/basic-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Workflows</li> <li>Integration Examples</li> <li>Real-World Scenarios</li> </ul>"},{"location":"examples/integration/","title":"Integration Examples","text":"<p>Integrate Notify-MCP with external tools and services.</p>"},{"location":"examples/integration/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"examples/integration/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Notify team of deployment\n  run: |\n    python - &lt;&lt; 'EOF'\n    import asyncio\n    from mcp import ClientSession\n    # ... MCP client code to publish deployment notification\n    EOF\n</code></pre>"},{"location":"examples/integration/#monitoring-integration","title":"Monitoring Integration","text":""},{"location":"examples/integration/#datadog-webhook","title":"Datadog Webhook","text":"<pre><code># Datadog webhook \u2192 Notify-MCP\n@app.route('/webhook/datadog', methods=['POST'])\ndef datadog_webhook():\n    alert = request.json\n    # Publish alert to Notify-MCP\n    publish_notification(\n        channel=\"production\",\n        title=f\"Alert: {alert['title']}\",\n        body=alert['body'],\n        priority=\"critical\"\n    )\n</code></pre>"},{"location":"examples/integration/#custom-integrations","title":"Custom Integrations","text":"<p>See complete integration examples in: Usage Guide</p>"},{"location":"getting-started/","title":"Getting Started with Notify-MCP","text":"<p>Welcome to Notify-MCP! This guide will help you get up and running with cross-platform AI collaboration in minutes.</p>"},{"location":"getting-started/#what-is-notify-mcp","title":"What is Notify-MCP?","text":"<p>Notify-MCP is a pub-sub MCP server that enables teams to share notifications, decisions, and status updates across different AI assistants (Claude, ChatGPT, Gemini). It breaks down the information silos that form when team members use different AI platforms.</p>"},{"location":"getting-started/#key-benefits","title":"Key Benefits","text":"<ul> <li>\ud83c\udf10 Cross-Platform: Works with Claude, ChatGPT, Gemini, and any MCP-compatible AI assistant</li> <li>\ud83d\udcbe Persistent: SQLite-based storage enables team collaboration through shared databases</li> <li>\ud83d\udd14 Smart Filtering: Subscribe to channels with filters for priority, tags, themes, and sender roles</li> <li>\ud83d\ude80 Zero Setup: In-memory mode for testing, SQLite for team sharing\u2014no server required</li> </ul>"},{"location":"getting-started/#quick-start-path","title":"Quick Start Path","text":"<p>Follow this 3-step path to get started:</p>"},{"location":"getting-started/#1-install-notify-mcp-5-minutes","title":"1. Install Notify-MCP (5 minutes)","text":"<p>Install Python, uv package manager, and Notify-MCP:</p> <pre><code># Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Clone and install\ngit clone &lt;repository-url&gt;\ncd notify-mcp\nuv sync\n</code></pre> <p> Installation Guide</p>"},{"location":"getting-started/#2-configure-your-ai-assistant-5-minutes","title":"2. Configure Your AI Assistant (5 minutes)","text":"<p>Add Notify-MCP to your Claude Desktop, ChatGPT, or Gemini configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"notify-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"python\", \"-m\", \"notify_mcp\"],\n      \"cwd\": \"/path/to/notify-mcp\"\n    }\n  }\n}\n</code></pre> <p> Configuration Guide</p>"},{"location":"getting-started/#3-start-collaborating-10-minutes","title":"3. Start Collaborating (10 minutes)","text":"<p>Create your first channel, publish a notification, and retrieve it:</p> <pre><code># Create a channel\n\"Create a channel called 'engineering' for technical updates\"\n\n# Publish a notification\n\"Publish to engineering: API v2.0 has been released to production\"\n\n# Retrieve notifications\n\"Show me recent notifications from the engineering channel\"\n</code></pre> <p> Quick Start Guide</p>"},{"location":"getting-started/#what-youll-learn","title":"What You'll Learn","text":""},{"location":"getting-started/#installation-guide","title":"Installation Guide","text":"<ul> <li>Installing Python 3.11+ and uv</li> <li>Cloning and setting up Notify-MCP</li> <li>Verifying the installation</li> <li>Platform-specific instructions (macOS, Linux, Windows)</li> </ul>"},{"location":"getting-started/#configuration-guide","title":"Configuration Guide","text":"<ul> <li>Configuring Claude Desktop / Claude Code</li> <li>Setting up storage (in-memory vs. SQLite)</li> <li>Configuring for team collaboration</li> <li>Environment variables reference</li> </ul>"},{"location":"getting-started/#quick-start-tutorial","title":"Quick Start Tutorial","text":"<ul> <li>Creating your first channel</li> <li>Publishing notifications</li> <li>Subscribing with filters</li> <li>Retrieving notification history</li> <li>Common usage patterns</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>After completing the Getting Started guides:</p> <ul> <li>Explore Use Cases - See real-world scenarios demonstrating Notify-MCP's value</li> <li>Review API Reference - Learn about all available tools and resources</li> <li>Follow Best Practices - Optimize your team's notification workflow</li> <li>Browse Examples - Study code examples and integration patterns</li> </ul>"},{"location":"getting-started/#need-help","title":"Need Help?","text":"<ul> <li>Installation Issues? Check the Installation Guide</li> <li>Configuration Problems? See Configuration Guide</li> <li>General Questions? Visit the Troubleshooting Guide</li> <li>Bug Reports? Create an issue on GitHub</li> </ul> <p>Ready to get started? Begin with Installation \u2192</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Configure Notify-MCP to work with your AI assistant and team.</p>"},{"location":"getting-started/configuration/#claude-desktop-claude-code","title":"Claude Desktop / Claude Code","text":"<p>Add Notify-MCP to your Claude configuration file:</p> <p>File Location: - macOS/Linux: <code>~/.config/Claude/claude_desktop_config.json</code> - Windows: <code>%APPDATA%\\Claude\\claude_desktop_config.json</code></p> <p>Configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"notify-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"python\", \"-m\", \"notify_mcp\"],\n      \"cwd\": \"/absolute/path/to/notify-mcp/packages/community\",\n      \"env\": {\n        \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n        \"NOTIFY_MCP_SQLITE_PATH\": \"~/.notify-mcp/storage.db\",\n        \"NOTIFY_MCP_MAX_HISTORY\": \"1000\"\n      }\n    }\n  }\n}\n</code></pre> <p>Restart Claude Desktop after saving the configuration.</p>"},{"location":"getting-started/configuration/#storage-configuration","title":"Storage Configuration","text":""},{"location":"getting-started/configuration/#in-memory-storage-default","title":"In-Memory Storage (Default)","text":"<p>Fast but not persistent across restarts. Good for individual use:</p> <pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"memory\"\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#sqlite-storage-recommended-for-teams","title":"SQLite Storage (Recommended for Teams)","text":"<p>Persistent storage that enables team collaboration:</p> <pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n    \"NOTIFY_MCP_SQLITE_PATH\": \"~/.notify-mcp/storage.db\",\n    \"NOTIFY_MCP_MAX_HISTORY\": \"1000\"\n  }\n}\n</code></pre> <p>For team collaboration, use a shared network location:</p> <pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n    \"NOTIFY_MCP_SQLITE_PATH\": \"/shared/team/notify-mcp.db\"\n  }\n}\n</code></pre> <p>All team members pointing to the same database file will share channels and notifications!</p> <p> Detailed Storage Configuration</p>"},{"location":"getting-started/configuration/#configuration-reference","title":"Configuration Reference","text":"Variable Options Default Description <code>NOTIFY_MCP_STORAGE_TYPE</code> <code>memory</code>, <code>sqlite</code> <code>memory</code> Storage backend type <code>NOTIFY_MCP_SQLITE_PATH</code> file path <code>~/.notify-mcp/storage.db</code> SQLite database path <code>NOTIFY_MCP_MAX_HISTORY</code> integer <code>1000</code> Max notifications per channel"},{"location":"getting-started/configuration/#chatgpt-configuration","title":"ChatGPT Configuration","text":"<p>ChatGPT MCP support is in development. Use an MCP bridge for now:</p> <pre><code># 1. Run notify-mcp server\nuv run python -m notify_mcp\n\n# 2. Use MCP-to-HTTP bridge\nmcp-bridge --stdio \"uv run python -m notify_mcp\" --http localhost:8080\n\n# 3. Configure ChatGPT Custom GPT to use the bridge endpoint\n</code></pre> <p>Native ChatGPT MCP support expected in 2025.</p>"},{"location":"getting-started/configuration/#gemini-configuration","title":"Gemini Configuration","text":"<p>Gemini MCP integration is in development. Use the Gemini API with an MCP adapter:</p> <pre><code>from google.generativeai import GenerativeModel\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\nasync def main():\n    server_params = StdioServerParameters(\n        command=\"uv\",\n        args=[\"run\", \"python\", \"-m\", \"notify_mcp\"]\n    )\n\n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n            # Use Gemini with MCP tools\n</code></pre> <p>Full Gemini MCP integration expected in 2025.</p>"},{"location":"getting-started/configuration/#slash-commands-claude-code","title":"Slash Commands (Claude Code)","text":"<p>Notify-MCP includes 6 convenient slash commands:</p> <ul> <li><code>/notify-decision</code> - Create architecture decision notification</li> <li><code>/notify-alert</code> - Create critical alert</li> <li><code>/notify-status</code> - Share status update</li> <li><code>/notify-channels</code> - List all channels</li> <li><code>/notify-subscribe</code> - Subscribe to a channel</li> <li><code>/notify-recent</code> - View recent notifications</li> </ul> <p>These commands are automatically available in Claude Code once Notify-MCP is configured.</p>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Follow the Quick Start Tutorial \u2192</li> <li>Review Storage Configuration Details \u2192</li> <li>Explore Use Cases \u2192</li> </ul>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#server-not-starting","title":"Server Not Starting","text":"<pre><code># Test manually\nuv run python -m notify_mcp\n\n# Check if uv is in PATH\nwhich uv\n\n# Use absolute path if needed\n\"command\": \"/full/path/to/uv\"\n</code></pre>"},{"location":"getting-started/configuration/#claude-doesnt-see-the-server","title":"Claude Doesn't See the Server","text":"<ol> <li>Check the configuration file path is correct</li> <li>Ensure you restarted Claude Desktop</li> <li>Verify the <code>cwd</code> path points to the correct directory</li> <li>Check Claude logs for error messages</li> </ol> <p>For more help, see the Troubleshooting Guide.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install Notify-MCP on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>uv package manager (recommended) or pip</li> </ul>"},{"location":"getting-started/installation/#install-uv-recommended","title":"Install uv (Recommended)","text":"<p>uv is a fast Python package manager that makes installation simple:</p> macOS / LinuxWindows (PowerShell) <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"getting-started/installation/#install-notify-mcp","title":"Install Notify-MCP","text":""},{"location":"getting-started/installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/osick/notify-mcp.git\ncd notify-mcp/packages/community\n</code></pre>"},{"location":"getting-started/installation/#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<pre><code># Using uv (recommended)\nuv sync\n\n# Or using pip\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#step-3-verify-installation","title":"Step 3: Verify Installation","text":"<pre><code># Test the server starts\nuv run python -m notify_mcp --help\n\n# You should see usage information\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that Notify-MCP is installed:</p> <ol> <li>Configure Your AI Assistant \u2192</li> <li>Follow the Quick Start Guide \u2192</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#python-version-issues","title":"Python Version Issues","text":"<pre><code># Check Python version\npython --version  # Should be 3.11+\n\n# If too old, install Python 3.11+\n# macOS: brew install python@3.11\n# Ubuntu: sudo apt install python3.11\n# Windows: Download from python.org\n</code></pre>"},{"location":"getting-started/installation/#uv-not-found","title":"uv Not Found","text":"<pre><code># Add uv to PATH (after installation)\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\n\n# Or use full path\n~/.cargo/bin/uv sync\n</code></pre>"},{"location":"getting-started/installation/#permission-errors","title":"Permission Errors","text":"<pre><code># Use virtual environment\npython3.11 -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# .venv\\Scripts\\activate  # Windows\n\npip install -e .\n</code></pre> <p>For more help, see the Troubleshooting Guide.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Tutorial","text":"<p>Get hands-on with Notify-MCP in 10 minutes! This tutorial walks you through creating channels, publishing notifications, and retrieving them across AI platforms.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before starting:</p> <ul> <li>\u2705 Notify-MCP installed</li> <li>\u2705 Claude Desktop configured</li> <li>\u2705 Claude Desktop restarted</li> </ul>"},{"location":"getting-started/quick-start/#step-1-create-your-first-channel","title":"Step 1: Create Your First Channel","text":"<p>Channels organize notifications by topic, team, or project. Let's create an engineering channel:</p> <p>In Claude:</p> <pre><code>Create a channel called 'engineering' for technical updates and decisions\n</code></pre> <p>Claude will use the <code>create_channel</code> tool:</p> <pre><code>{\n  \"channel_id\": \"engineering\",\n  \"name\": \"Engineering Team\",\n  \"description\": \"Technical updates and decisions\"\n}\n</code></pre> <p>Result: Channel created! \u2705</p>"},{"location":"getting-started/quick-start/#step-2-subscribe-to-the-channel","title":"Step 2: Subscribe to the Channel","text":"<p>Subscribe to receive notifications from the channel. You can add filters for priority, tags, or themes:</p> <p>In Claude:</p> <pre><code>Subscribe me to the engineering channel with high and critical priority only\n</code></pre> <p>Claude will use the <code>subscribe_to_channel</code> tool:</p> <pre><code>{\n  \"channel\": \"engineering\",\n  \"priority_filter\": [\"high\", \"critical\"]\n}\n</code></pre> <p>Result: Subscribed with filters! \ud83d\udd14</p>"},{"location":"getting-started/quick-start/#step-3-publish-a-notification","title":"Step 3: Publish a Notification","text":"<p>Let's publish an architecture decision to the engineering channel:</p> <p>In Claude:</p> <pre><code>Publish to engineering channel: We've decided to migrate to PostgreSQL for better\nperformance. This is a high-priority architecture decision tagged with database and backend.\n</code></pre> <p>Claude will use the <code>publish_notification</code> tool:</p> <pre><code>{\n  \"channel\": \"engineering\",\n  \"title\": \"Architecture Decision: Migrate to PostgreSQL\",\n  \"body\": \"We've decided to migrate to PostgreSQL for better performance and scalability.\",\n  \"priority\": \"high\",\n  \"theme\": \"architecture-decision\",\n  \"tags\": [\"database\", \"backend\", \"migration\"]\n}\n</code></pre> <p>Result: Notification published! \ud83d\udce2</p>"},{"location":"getting-started/quick-start/#step-4-retrieve-notifications","title":"Step 4: Retrieve Notifications","text":"<p>Now let's retrieve notifications from the channel:</p> <p>In Claude:</p> <pre><code>Show me recent notifications from the engineering channel\n</code></pre> <p>Claude will read the <code>notification://engineering/recent</code> resource:</p> <p>Result: You'll see your published notification! \ud83d\udcec</p>"},{"location":"getting-started/quick-start/#step-5-test-cross-platform-optional","title":"Step 5: Test Cross-Platform (Optional)","text":"<p>If you have ChatGPT or Gemini configured with Notify-MCP:</p> <p>In ChatGPT or Gemini:</p> <pre><code>Show me recent notifications from the engineering channel\n</code></pre> <p>Result: You'll see the same notification published from Claude! \ud83c\udf10</p> <p>This demonstrates cross-platform collaboration!</p>"},{"location":"getting-started/quick-start/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"getting-started/quick-start/#pattern-1-architecture-decisions","title":"Pattern 1: Architecture Decisions","text":"<pre><code>Publish an architecture decision to engineering:\nTitle: \"Migration to Microservices\"\nContext: Current monolith is hard to scale\nDecision: Moving to microservices with Docker and Kubernetes\nPriority: High\nTags: architecture, microservices, infrastructure\n</code></pre>"},{"location":"getting-started/quick-start/#pattern-2-critical-alerts","title":"Pattern 2: Critical Alerts","text":"<pre><code>Publish a critical alert to production channel:\nTitle: \"Database Connection Pool Exhausted\"\nStatus: 250/250 connections in use\nImpact: API response times degraded\nPriority: Critical\n</code></pre>"},{"location":"getting-started/quick-start/#pattern-3-status-updates","title":"Pattern 3: Status Updates","text":"<pre><code>Publish to project-alpha channel:\nTitle: \"Sprint 5 Complete - Beta Release Ready\"\nAchievements: All 23 stories completed, 87% test coverage\nNext Steps: Deploy beta tomorrow at 10 AM\nPriority: Medium\n</code></pre>"},{"location":"getting-started/quick-start/#using-slash-commands-claude-code","title":"Using Slash Commands (Claude Code)","text":"<p>For faster workflows, use slash commands:</p>"},{"location":"getting-started/quick-start/#create-architecture-decision","title":"Create Architecture Decision","text":"<pre><code>/notify-decision\n</code></pre> <p>Claude will prompt you for: - Decision title - Context/background - What was decided - Consequences</p>"},{"location":"getting-started/quick-start/#create-critical-alert","title":"Create Critical Alert","text":"<pre><code>/notify-alert\n</code></pre> <p>Claude will prompt you for alert details.</p>"},{"location":"getting-started/quick-start/#view-recent-notifications","title":"View Recent Notifications","text":"<pre><code>/notify-recent\n</code></pre> <p>Select which channel to view.</p>"},{"location":"getting-started/quick-start/#advanced-filtering","title":"Advanced: Filtering","text":"<p>Subscribe with specific filters to receive only relevant notifications:</p>"},{"location":"getting-started/quick-start/#priority-filtering","title":"Priority Filtering","text":"<pre><code>Subscribe to production channel with critical priority only\n</code></pre> <p>Only critical alerts will reach you.</p>"},{"location":"getting-started/quick-start/#tag-filtering","title":"Tag Filtering","text":"<pre><code>Subscribe to engineering channel with tags: security, database\n</code></pre> <p>Only notifications tagged with security or database will be visible.</p>"},{"location":"getting-started/quick-start/#combined-filtering","title":"Combined Filtering","text":"<pre><code>Subscribe to project-alpha with high priority and tags: frontend, ui\n</code></pre> <p>Only high-priority frontend/UI notifications will match.</p>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<p>Now that you've mastered the basics:</p> <ul> <li>Explore Real-World Use Cases \u2192</li> <li>Review API Reference \u2192</li> <li>Learn Best Practices \u2192</li> <li>Browse Code Examples \u2192</li> </ul>"},{"location":"getting-started/quick-start/#need-help","title":"Need Help?","text":"<ul> <li>Questions? Check the Troubleshooting Guide</li> <li>API Reference? See Tools Documentation</li> <li>Team Setup? Review Team Collaboration Guide</li> <li>Issues? Report on GitHub</li> </ul> <p>Congratulations! You've completed the Quick Start tutorial. \ud83c\udf89</p> <p>Ready to see real-world scenarios? Explore Use Cases \u2192</p>"},{"location":"guides/best-practices/","title":"Best Practices","text":"<p>Guidelines for effective notification management with Notify-MCP.</p>"},{"location":"guides/best-practices/#priority-levels","title":"Priority Levels","text":"<p>Use appropriate priority levels:</p> <ul> <li>Critical: Production outages, security incidents</li> <li>High: Important decisions, breaking changes</li> <li>Medium: Regular updates, milestones (default)</li> <li>Low: FYI information, minor updates</li> </ul> <p>\u274c Don't make everything critical\u2014causes alert fatigue!</p>"},{"location":"guides/best-practices/#tagging-strategy","title":"Tagging Strategy","text":"<p>Use consistent, descriptive tags:</p> <p>\u2705 Good: <code>[\"backend\", \"database\", \"migration\", \"postgres\"]</code> \u274c Bad: <code>[\"stuff\", \"things\", \"update\"]</code></p> <p>Tag categories: - Technical area: <code>backend</code>, <code>frontend</code>, <code>infrastructure</code> - Component: <code>api</code>, <code>database</code>, <code>ui</code>, <code>auth</code> - Type: <code>bugfix</code>, <code>feature</code>, <code>refactor</code> - Urgency: <code>urgent</code>, <code>blocking</code>, <code>nice-to-have</code></p>"},{"location":"guides/best-practices/#channel-organization","title":"Channel Organization","text":"<p>Create focused channels:</p> <ul> <li><code>engineering</code> - Technical decisions and updates</li> <li><code>alerts</code> - Production incidents</li> <li><code>project-alpha</code> - Project-specific updates</li> <li><code>architecture</code> - Architectural decisions</li> <li><code>security</code> - Security-related notifications</li> </ul> <p>Avoid: - Too many channels (creates noise) - Too few channels (everything mixed together)</p>"},{"location":"guides/best-practices/#notification-content","title":"Notification Content","text":"<p>Write clear, actionable titles:</p> <p>\u2705 \"Database Migration Strategy Decided - Blue-Green Approach\" \u274c \"Update\"</p> <p>Include context in the body: - What happened or was decided - Why it matters - What action is needed (if any) - Links to detailed documentation</p>"},{"location":"guides/best-practices/#filtering-strategy","title":"Filtering Strategy","text":"<p>Subscribe with appropriate filters:</p> <pre><code># Dev team: Technical content only\nsubscribe(\"engineering\", priority=[\"high\", \"critical\"], tags=[\"backend\", \"frontend\"])\n\n# Executives: High-level updates only\nsubscribe(\"project-alpha\", priority=[\"high\", \"critical\"])\n\n# Security team: Security-related only\nsubscribe(\"security\", tags=[\"security\", \"compliance\"])\n</code></pre>"},{"location":"guides/best-practices/#team-conventions","title":"Team Conventions","text":"<p>Establish team norms:</p> <ul> <li>Daily status updates: Optional</li> <li>Blockers: Immediate notification (priority: high)</li> <li>Milestones: Always announce (boosts morale)</li> <li>Questions: Use medium priority unless urgent</li> </ul> <p>For real-world examples, see: - Use Cases - Real-World Scenarios - Team Coordination</p>"},{"location":"guides/storage-configuration/","title":"Storage Configuration","text":"<p>Configure persistent storage for team collaboration.</p>"},{"location":"guides/storage-configuration/#overview","title":"Overview","text":"<p>Notify-MCP v1.1.0+ supports two storage modes:</p> Storage Type Best For Persistence Team Collaboration In-Memory Individual use, testing \u274c No \u274c No SQLite Team collaboration \u2705 Yes \u2705 Yes"},{"location":"guides/storage-configuration/#quick-configuration","title":"Quick Configuration","text":""},{"location":"guides/storage-configuration/#in-memory-default","title":"In-Memory (Default)","text":"<pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"memory\"\n  }\n}\n</code></pre> <ul> <li>Fast, no disk I/O</li> <li>Data lost on restart</li> <li>Good for testing</li> </ul>"},{"location":"guides/storage-configuration/#sqlite-team-collaboration","title":"SQLite (Team Collaboration)","text":"<pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n    \"NOTIFY_MCP_SQLITE_PATH\": \"~/.notify-mcp/storage.db\",\n    \"NOTIFY_MCP_MAX_HISTORY\": \"1000\"\n  }\n}\n</code></pre> <ul> <li>Persistent across restarts</li> <li>Share database file for team collaboration</li> <li>Automatic LRU cache enforcement</li> </ul>"},{"location":"guides/storage-configuration/#team-collaboration-setup","title":"Team Collaboration Setup","text":""},{"location":"guides/storage-configuration/#shared-network-drive","title":"Shared Network Drive","text":"<p>All team members point to the same database file:</p> <p>macOS: <pre><code>{\n  \"NOTIFY_MCP_SQLITE_PATH\": \"/Volumes/TeamDrive/notify-mcp.db\"\n}\n</code></pre></p> <p>Linux: <pre><code>{\n  \"NOTIFY_MCP_SQLITE_PATH\": \"/mnt/teamdrive/notify-mcp.db\"\n}\n</code></pre></p> <p>Windows: <pre><code>{\n  \"NOTIFY_MCP_SQLITE_PATH\": \"Z:\\\\notify-mcp.db\"\n}\n</code></pre></p> <p>Everyone sharing the database sees the same channels and notifications!</p>"},{"location":"guides/storage-configuration/#configuration-reference","title":"Configuration Reference","text":"Variable Options Default Description <code>NOTIFY_MCP_STORAGE_TYPE</code> <code>memory</code>, <code>sqlite</code> <code>memory</code> Storage backend <code>NOTIFY_MCP_SQLITE_PATH</code> file path <code>~/.notify-mcp/storage.db</code> Database location <code>NOTIFY_MCP_MAX_HISTORY</code> integer <code>1000</code> Max notifications per channel"},{"location":"guides/storage-configuration/#database-management","title":"Database Management","text":""},{"location":"guides/storage-configuration/#backup","title":"Backup","text":"<pre><code># Create backup\ncp ~/.notify-mcp/storage.db ~/.notify-mcp/backup-$(date +%Y%m%d).db\n</code></pre>"},{"location":"guides/storage-configuration/#inspect","title":"Inspect","text":"<pre><code># Open SQLite shell\nsqlite3 ~/.notify-mcp/storage.db\n\n# List tables\n.tables\n\n# Query notifications\nSELECT channel, COUNT(*) FROM notifications GROUP BY channel;\n</code></pre>"},{"location":"guides/storage-configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/storage-configuration/#database-locked","title":"Database Locked","text":"<pre><code># Stop all servers\npkill -f \"notify_mcp\"\n\n# Remove lock files\nrm ~/.notify-mcp/storage.db-wal\nrm ~/.notify-mcp/storage.db-shm\n</code></pre>"},{"location":"guides/storage-configuration/#permission-denied","title":"Permission Denied","text":"<pre><code># Fix permissions\nchmod 644 ~/.notify-mcp/storage.db\nchmod 755 ~/.notify-mcp/\n</code></pre> <p>For complete storage documentation, see the detailed Storage Guide.</p>"},{"location":"guides/storage-configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Team Collaboration Guide</li> <li>Best Practices</li> <li>Architecture: Storage</li> </ul>"},{"location":"guides/team-collaboration/","title":"Team Collaboration","text":"<p>Enable seamless collaboration across your team using Notify-MCP.</p>"},{"location":"guides/team-collaboration/#quick-setup","title":"Quick Setup","text":"<ol> <li>Choose a shared storage location (network drive, cloud sync folder)</li> <li>Configure all team members to use the same SQLite database</li> <li>Create team channels for different projects or topics</li> <li>Subscribe with filters to receive relevant notifications</li> </ol>"},{"location":"guides/team-collaboration/#shared-database-configuration","title":"Shared Database Configuration","text":"<p>All team members point to the same database file:</p> <pre><code>{\n  \"env\": {\n    \"NOTIFY_MCP_STORAGE_TYPE\": \"sqlite\",\n    \"NOTIFY_MCP_SQLITE_PATH\": \"/shared/team/notify-mcp.db\"\n  }\n}\n</code></pre>"},{"location":"guides/team-collaboration/#best-practices","title":"Best Practices","text":"<ul> <li>Create channels per project or team</li> <li>Use filters to reduce notification noise</li> <li>Set appropriate priority levels</li> <li>Use tags consistently</li> <li>Document channel purposes</li> </ul>"},{"location":"guides/team-collaboration/#cross-platform-collaboration","title":"Cross-Platform Collaboration","text":"<p>Team members can use different AI assistants: - Developer A uses Claude Code - Developer B uses ChatGPT - Developer C uses Gemini</p> <p>All see the same notifications via the shared database!</p> <p>For complete details, see: - Storage Configuration - Cross-Platform AI Use Case - Real-World Scenarios</p>"},{"location":"guides/troubleshooting/","title":"Troubleshooting","text":"<p>Solutions to common issues with Notify-MCP.</p>"},{"location":"guides/troubleshooting/#server-not-starting","title":"Server Not Starting","text":"<p>Problem: Server fails to start or Claude can't find it.</p> <p>Solutions:</p> <pre><code># Test server manually\nuv run python -m notify_mcp\n\n# Check if uv is in PATH\nwhich uv\n\n# Use absolute paths in config\n\"command\": \"/full/path/to/uv\"\n</code></pre>"},{"location":"guides/troubleshooting/#notifications-not-appearing","title":"Notifications Not Appearing","text":"<p>Problem: Published notifications don't show up.</p> <p>Reason: In stdio mode, you must retrieve notifications explicitly.</p> <p>Solution:</p> <pre><code>Show me recent notifications from engineering channel\n</code></pre> <p>Or use the resource directly: <pre><code>notification://engineering/recent\n</code></pre></p>"},{"location":"guides/troubleshooting/#database-locked-error","title":"Database Locked Error","text":"<p>Problem: <code>database is locked</code> error</p> <p>Solutions:</p> <pre><code># Stop all server instances\npkill -f \"notify_mcp\"\n\n# Remove stale lock files\nrm ~/.notify-mcp/storage.db-wal\nrm ~/.notify-mcp/storage.db-shm\n\n# Restart server\n</code></pre>"},{"location":"guides/troubleshooting/#filters-not-working","title":"Filters Not Working","text":"<p>Problem: Subscribed with filter but see unwanted notifications.</p> <p>Explanation: Filters apply when retrieving notifications, not at publish time.</p> <p>Solution: When you read <code>notification://&lt;channel&gt;/recent</code>, only notifications matching your subscription filters are returned.</p>"},{"location":"guides/troubleshooting/#import-errors","title":"Import Errors","text":"<p>Problem: <code>ModuleNotFoundError: No module named 'mcp'</code></p> <p>Solutions:</p> <pre><code># Install dependencies\nuv sync\n\n# Or with pip\npip install mcp pydantic\n\n# Verify installation\nuv run python -c \"import mcp; print('OK')\"\n</code></pre>"},{"location":"guides/troubleshooting/#permission-errors","title":"Permission Errors","text":"<p>Problem: Cannot write to database file.</p> <p>Solutions:</p> <pre><code># Check file permissions\nls -l ~/.notify-mcp/storage.db\n\n# Fix permissions\nchmod 644 ~/.notify-mcp/storage.db\nchmod 755 ~/.notify-mcp/\n\n# Use different path\nNOTIFY_MCP_SQLITE_PATH=/tmp/notify-mcp.db\n</code></pre>"},{"location":"guides/troubleshooting/#claude-doesnt-see-mcp-tools","title":"Claude Doesn't See MCP Tools","text":"<p>Problem: MCP tools don't appear in Claude.</p> <p>Solutions:</p> <ol> <li>Check configuration file path is correct</li> <li>Restart Claude Desktop completely</li> <li>Verify the <code>cwd</code> points to the correct directory</li> <li>Check Claude logs for errors</li> </ol>"},{"location":"guides/troubleshooting/#need-more-help","title":"Need More Help?","text":"<ul> <li>GitHub Issues: Report a bug</li> <li>Documentation: Browse other guides</li> <li>Examples: Check code examples</li> </ul> <p>Still stuck? Create an issue on GitHub with: - Your configuration file (redact sensitive info) - Error messages - Steps to reproduce - OS and Python version</p>"},{"location":"use-cases/","title":"Use Cases &amp; Scenarios","text":"<p>Notify-MCP shines in team collaboration scenarios where information needs to flow seamlessly across different AI assistants and team members. This section explores real-world use cases that demonstrate the value of cross-platform notification sharing.</p>"},{"location":"use-cases/#overview","title":"Overview","text":"<p>The power of Notify-MCP comes from solving a fundamental problem in modern AI-assisted development: information silos.</p> <p>When team members use different AI assistants (Claude, ChatGPT, Gemini), they often work in isolation. Important decisions, updates, and alerts don't propagate across the team, leading to:</p> <ul> <li>\u274c Duplicated research and work</li> <li>\u274c Missed critical updates</li> <li>\u274c Inconsistent understanding of project state</li> <li>\u274c Delayed incident response</li> <li>\u274c Poor cross-team coordination</li> </ul> <p>Notify-MCP solves this by providing a unified notification layer that works across all AI platforms.</p>"},{"location":"use-cases/#core-use-case-categories","title":"Core Use Case Categories","text":""},{"location":"use-cases/#1-architecture-technical-decisions","title":"1. Architecture &amp; Technical Decisions","text":"<p>Document and broadcast architectural decisions to all stakeholders. Maintain a searchable history of technical choices that influenced your system design.</p> <p>Value: Everyone stays aligned on technical direction, decisions are discoverable, and rationale is preserved.</p> <p> View Architecture Decisions Use Case</p>"},{"location":"use-cases/#2-team-coordination-communication","title":"2. Team Coordination &amp; Communication","text":"<p>Coordinate work across distributed teams using different AI assistants. Share status updates, blockers, milestones, and achievements in real-time.</p> <p>Value: Distributed teams work as if they're in the same room, regardless of which AI assistant they use.</p> <p> View Team Coordination Use Case</p>"},{"location":"use-cases/#3-incident-response-alerts","title":"3. Incident Response &amp; Alerts","text":"<p>Alert teams about production incidents, security issues, or critical system failures. Ensure everyone receives urgent notifications instantly.</p> <p>Value: Faster incident response, reduced downtime, better coordination during crises.</p> <p> View Incident Response Use Case</p>"},{"location":"use-cases/#4-project-updates-milestones","title":"4. Project Updates &amp; Milestones","text":"<p>Broadcast project milestones, sprint updates, requirement changes, and deliverable status. Keep stakeholders informed automatically.</p> <p>Value: Transparent project progress, automatic stakeholder updates, reduced meeting overhead.</p> <p> View Project Updates Use Case</p>"},{"location":"use-cases/#5-cross-platform-ai-collaboration","title":"5. Cross-Platform AI Collaboration","text":"<p>Enable seamless information sharing when team members use different AI assistants (Claude for development, ChatGPT for ideation, Gemini for research).</p> <p>Value: Break down AI platform silos, leverage strengths of different assistants, unified team knowledge.</p> <p> View Cross-Platform AI Use Case</p>"},{"location":"use-cases/#6-real-world-workflow-scenarios","title":"6. Real-World Workflow Scenarios","text":"<p>Complete end-to-end examples showing how Notify-MCP fits into actual development workflows, from sprint planning to production deployment.</p> <p>Value: See how all the pieces fit together in realistic team scenarios.</p> <p> View Real-World Scenarios</p>"},{"location":"use-cases/#who-benefits","title":"Who Benefits?","text":""},{"location":"use-cases/#development-teams","title":"Development Teams","text":"<ul> <li>Share technical decisions across team members</li> <li>Coordinate code reviews and PR updates</li> <li>Alert about build failures or test issues</li> <li>Document architectural choices</li> </ul>"},{"location":"use-cases/#devops-teams","title":"DevOps Teams","text":"<ul> <li>Broadcast incident alerts</li> <li>Share deployment status</li> <li>Notify about infrastructure changes</li> <li>Coordinate during outages</li> </ul>"},{"location":"use-cases/#product-teams","title":"Product Teams","text":"<ul> <li>Announce requirement changes</li> <li>Share milestone completions</li> <li>Broadcast feature releases</li> <li>Update project status</li> </ul>"},{"location":"use-cases/#consulting-teams","title":"Consulting Teams","text":"<ul> <li>Share client feedback</li> <li>Coordinate across projects</li> <li>Broadcast recommendations</li> <li>Update delivery status</li> </ul>"},{"location":"use-cases/#cross-functional-teams","title":"Cross-Functional Teams","text":"<ul> <li>Maintain shared context</li> <li>Coordinate across departments</li> <li>Share strategic decisions</li> <li>Keep everyone aligned</li> </ul>"},{"location":"use-cases/#key-benefits-across-all-use-cases","title":"Key Benefits Across All Use Cases","text":""},{"location":"use-cases/#platform-agnostic","title":"\ud83c\udfaf Platform Agnostic","text":"<p>Works with Claude, ChatGPT, Gemini, and any future MCP-compatible AI assistant. No vendor lock-in.</p>"},{"location":"use-cases/#persistent-history","title":"\ud83d\udcbe Persistent History","text":"<p>All notifications are stored (SQLite or PostgreSQL). Search and review past decisions anytime.</p>"},{"location":"use-cases/#smart-filtering","title":"\ud83d\udd14 Smart Filtering","text":"<p>Subscribe with filters (priority, tags, themes, roles) to receive only relevant notifications.</p>"},{"location":"use-cases/#zero-configuration","title":"\ud83d\ude80 Zero Configuration","text":"<p>Start with in-memory mode for testing, upgrade to SQLite for team sharing. No server setup required.</p>"},{"location":"use-cases/#rich-metadata","title":"\ud83d\udcca Rich Metadata","text":"<p>Every notification includes sender info, context, priority, tags, and threading support.</p>"},{"location":"use-cases/#type-safe","title":"\ud83d\udd10 Type-Safe","text":"<p>Pydantic validation ensures data integrity. Catch errors before they reach the database.</p>"},{"location":"use-cases/#getting-started-with-use-cases","title":"Getting Started with Use Cases","text":"<ol> <li>Install Notify-MCP - 5-minute setup</li> <li>Configure storage - Enable team collaboration</li> <li>Pick a use case - Find one that matches your team's needs</li> <li>Follow the scenario - See complete workflows in action</li> </ol>"},{"location":"use-cases/#need-help","title":"Need Help?","text":"<ul> <li>Questions? Check the Troubleshooting Guide</li> <li>Configuration? See Storage Configuration</li> <li>Examples? Browse Code Examples</li> <li>Issues? Report on GitHub</li> </ul> <p>Ready to explore specific use cases? Pick a category above to dive deeper!</p>"},{"location":"use-cases/architecture-decisions/","title":"Architecture &amp; Technical Decisions","text":"<p>Problem: When technical decisions are made, they often remain siloed in individual conversations with AI assistants. Team members working with different AI tools miss crucial context about why certain architectural choices were made, leading to inconsistent implementations and repeated debates.</p> <p>Solution: Notify-MCP provides a unified notification layer for broadcasting architectural decisions across all AI platforms, creating a searchable, persistent record of technical choices.</p>"},{"location":"use-cases/architecture-decisions/#the-challenge","title":"The Challenge","text":"<p>Modern development teams face a critical problem:</p> <ul> <li>Developer A asks Claude about microservices architecture and makes a decision</li> <li>Developer B asks ChatGPT about the same issue hours later, unaware of Developer A's decision</li> <li>Developer C discusses database choices with Gemini, missing both previous conversations</li> <li>Result: Inconsistent implementations, duplicated research, conflicting approaches</li> </ul> <p>This information fragmentation causes:</p> <ul> <li>\u274c Architectural drift across the codebase</li> <li>\u274c Repeated research on solved problems</li> <li>\u274c Lost context about decision rationale</li> <li>\u274c Difficulty onboarding new team members</li> <li>\u274c Inconsistent technical approaches</li> </ul>"},{"location":"use-cases/architecture-decisions/#how-notify-mcp-solves-this","title":"How Notify-MCP Solves This","text":""},{"location":"use-cases/architecture-decisions/#unified-decision-broadcast","title":"Unified Decision Broadcast","text":"<p>When any team member makes an architectural decision with their AI assistant, it's automatically shared with everyone\u2014regardless of which AI platform they use.</p>"},{"location":"use-cases/architecture-decisions/#searchable-history","title":"Searchable History","text":"<p>All decisions are stored persistently (SQLite/PostgreSQL), creating a queryable knowledge base of architectural choices.</p>"},{"location":"use-cases/architecture-decisions/#rich-context-preservation","title":"Rich Context Preservation","text":"<p>Each decision includes: - Rationale: Why this choice was made - Alternatives: What was considered and rejected - Impact: What parts of the system are affected - Timeline: When the decision was made and by whom - Tags: For easy categorization and discovery</p>"},{"location":"use-cases/architecture-decisions/#real-world-scenario","title":"Real-World Scenario","text":""},{"location":"use-cases/architecture-decisions/#scenario-migrating-to-microservices-architecture","title":"Scenario: Migrating to Microservices Architecture","text":"<p>Team: 8 developers across 3 time zones, using Claude, ChatGPT, and Gemini</p> <p>Challenge: The team needs to migrate from a monolithic application to microservices, requiring coordination on service boundaries, communication patterns, and deployment strategies.</p>"},{"location":"use-cases/architecture-decisions/#step-1-lead-architect-documents-decision","title":"Step 1: Lead Architect Documents Decision","text":"<p>Alice (Lead Architect, using Claude Code):</p> <pre><code>Alice: \"Create a channel called 'architecture' and publish a high-priority\nnotification about our decision to migrate to microservices.\"\n\nClaude: \"I'll publish the architectural decision to the architecture channel.\"\n\n# Notification sent:\n{\n  \"channel\": \"architecture\",\n  \"title\": \"ADR-001: Migration to Microservices Architecture\",\n  \"body\": \"## Decision\\n\\nWe will migrate from monolith to microservices using:\\n\\n\n  - **Service Mesh:** Istio for service communication\\n- **Containerization:**\n  Docker + Kubernetes\\n- **Service Boundaries:** Domain-Driven Design approach\\n\\n\n  ## Rationale\\n\\nCurrent monolith challenges:\\n- Deployment bottlenecks\\n\n  - Scaling limitations\\n- Team independence issues\\n\\n## Alternatives Considered\\n\n  - Modular monolith (rejected: doesn't solve deployment issues)\\n- Serverless\n  (rejected: team expertise gap)\\n\\n## Impact\\n\\nAffects: All backend services,\n  deployment pipeline, monitoring strategy\\nTimeline: 6-month phased migration\",\n  \"priority\": \"high\",\n  \"theme\": \"architecture-decision\",\n  \"tags\": [\"microservices\", \"architecture\", \"adr\", \"migration\"],\n  \"sender\": {\n    \"user_id\": \"alice@company.com\",\n    \"name\": \"Alice Chen\",\n    \"role\": \"Lead Architect\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre>"},{"location":"use-cases/architecture-decisions/#step-2-team-members-receive-notification-instantly","title":"Step 2: Team Members Receive Notification Instantly","text":"<p>Bob (Backend Developer, using ChatGPT - 3 hours later):</p> <pre><code>Bob: \"What are the latest architecture decisions I should know about?\"\n\nChatGPT: \"Let me check the architecture channel.\"\n\n# Retrieves notification from Notify-MCP\nChatGPT: \"Alice published ADR-001 3 hours ago about migrating to microservices.\nThe team is moving to Docker + Kubernetes with Istio service mesh. Domain-Driven\nDesign will guide service boundaries. This affects all backend services and\nrequires a 6-month phased migration.\"\n\nBob: \"Got it. I'll design my new feature with service boundaries in mind.\"\n</code></pre> <p>Carol (DevOps Engineer, using Gemini - next day):</p> <pre><code>Carol: \"Are there any recent architectural decisions affecting infrastructure?\"\n\nGemini: \"Yes, Alice published ADR-001 yesterday about microservices migration.\nKey infrastructure impacts:\n- Need Kubernetes cluster setup\n- Istio service mesh implementation required\n- Docker containerization for all services\n- New deployment pipeline architecture\n\nWould you like me to help plan the infrastructure changes?\"\n\nCarol: \"Perfect. Let's start planning the K8s cluster.\"\n</code></pre>"},{"location":"use-cases/architecture-decisions/#step-3-follow-up-discussions-stay-connected","title":"Step 3: Follow-up Discussions Stay Connected","text":"<p>David (Frontend Developer, using Claude - 2 days later):</p> <pre><code>David: \"I see we're moving to microservices. How does this affect frontend API calls?\"\n\nClaude: \"Let me check the architecture decisions. According to ADR-001, the team\nis implementing Istio service mesh. For frontend impact, you should publish a\nfollow-up notification asking about API gateway strategy.\"\n\n# David publishes follow-up\n{\n  \"channel\": \"architecture\",\n  \"title\": \"Question: API Gateway Strategy for Frontend\",\n  \"body\": \"Following ADR-001 (microservices migration), how should frontend\n  applications consume the new services? Do we need an API gateway?\",\n  \"priority\": \"medium\",\n  \"theme\": \"architecture-question\",\n  \"tags\": [\"microservices\", \"frontend\", \"api-gateway\"],\n  \"thread_id\": \"adr-001\"  # Links to original decision\n}\n</code></pre> <p>Alice responds:</p> <pre><code># Notification sent:\n{\n  \"channel\": \"architecture\",\n  \"title\": \"ADR-002: API Gateway with Kong\",\n  \"body\": \"## Decision\\n\\nFrontend will access services through Kong API Gateway.\n  \\n\\n## Rationale\\n\\nProvides:\\n- Single entry point for frontend\\n- Authentication/authorization\n  \\n- Rate limiting\\n- Request routing\\n\\nWorks seamlessly with Istio for backend\n  service mesh.\",\n  \"priority\": \"high\",\n  \"theme\": \"architecture-decision\",\n  \"tags\": [\"api-gateway\", \"kong\", \"frontend\", \"adr\"],\n  \"thread_id\": \"adr-001\",  # Part of same discussion thread\n  \"in_reply_to\": \"msg-12345\"\n}\n</code></pre>"},{"location":"use-cases/architecture-decisions/#benefits-demonstrated","title":"Benefits Demonstrated","text":""},{"location":"use-cases/architecture-decisions/#cross-platform-alignment","title":"\ud83c\udfaf Cross-Platform Alignment","text":"<ul> <li>Alice (Claude), Bob (ChatGPT), Carol (Gemini), David (Claude) all stayed synchronized</li> <li>No information silos despite using different AI tools</li> <li>Everyone aware of decisions affecting their work</li> </ul>"},{"location":"use-cases/architecture-decisions/#knowledge-base-creation","title":"\ud83d\udcda Knowledge Base Creation","text":"<ul> <li>Searchable history: \"Show me all microservices-related decisions\"</li> <li>Rationale preserved: Future team members understand why choices were made</li> <li>Threading: Related decisions stay connected (ADR-001 \u2192 ADR-002)</li> </ul>"},{"location":"use-cases/architecture-decisions/#reduced-decision-lag","title":"\u26a1 Reduced Decision Lag","text":"<ul> <li>Before: Days/weeks for decisions to propagate via meetings, docs, Slack</li> <li>After: Instant notification to all subscribed team members</li> <li>Impact: Faster implementation, fewer blockers</li> </ul>"},{"location":"use-cases/architecture-decisions/#discoverability","title":"\ud83d\udd0d Discoverability","text":"<ul> <li>New team members: \"Show me all architecture decisions from the last 6 months\"</li> <li>Tag-based search: \"Find all decisions tagged with 'database'\"</li> <li>Priority filtering: \"Show only high-priority architectural changes\"</li> </ul>"},{"location":"use-cases/architecture-decisions/#collaborative-refinement","title":"\ud83e\udd1d Collaborative Refinement","text":"<ul> <li>David's question led to ADR-002 about API gateway</li> <li>Threaded discussions keep related decisions connected</li> <li>Everyone can contribute regardless of AI platform</li> </ul>"},{"location":"use-cases/architecture-decisions/#implementation-guide","title":"Implementation Guide","text":""},{"location":"use-cases/architecture-decisions/#1-setup-architecture-channel","title":"1. Setup Architecture Channel","text":"<pre><code># In any AI assistant with Notify-MCP\n\"Create a channel called 'architecture' for technical decisions\"\n</code></pre>"},{"location":"use-cases/architecture-decisions/#2-subscribe-team-members","title":"2. Subscribe Team Members","text":"<pre><code># Each team member subscribes with filters\n\"Subscribe me to the 'architecture' channel, high and medium priority only\"\n</code></pre>"},{"location":"use-cases/architecture-decisions/#3-establish-notification-format","title":"3. Establish Notification Format","text":"<p>Use consistent tags and themes: - Theme: <code>architecture-decision</code>, <code>architecture-question</code>, <code>architecture-change</code> - Tags: <code>adr</code>, <code>microservices</code>, <code>database</code>, <code>security</code>, <code>infrastructure</code> - Priority: <code>high</code> for major decisions, <code>medium</code> for clarifications</p>"},{"location":"use-cases/architecture-decisions/#4-document-decision-template","title":"4. Document Decision Template","text":"<p>Include in each architectural notification:</p> <pre><code>## Decision\nWhat was decided\n\n## Rationale\nWhy this choice was made\n\n## Alternatives Considered\nWhat was rejected and why\n\n## Impact\nWhat parts of the system are affected\n\n## Timeline\nWhen to implement, deadlines, phases\n</code></pre>"},{"location":"use-cases/architecture-decisions/#5-link-related-decisions","title":"5. Link Related Decisions","text":"<p>Use threading: - Set <code>thread_id</code> for related discussions - Use <code>in_reply_to</code> for direct responses - Tag with common keywords for searchability</p>"},{"location":"use-cases/architecture-decisions/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"use-cases/architecture-decisions/#onboarding-new-team-members","title":"Onboarding New Team Members","text":"<p>New hire asks: <pre><code>\"What are the key architectural decisions I should know about?\"\n</code></pre></p> <p>AI assistant retrieves: - All <code>architecture-decision</code> notifications from last 12 months - Filtered by <code>priority: high</code> - Sorted chronologically to show evolution - Complete with rationale and context</p>"},{"location":"use-cases/architecture-decisions/#architecture-review-meetings","title":"Architecture Review Meetings","text":"<p>Before meeting: <pre><code>\"List all architecture decisions from the last sprint\"\n</code></pre></p> <p>Result: - Complete record of all ADRs published - No decisions missed or forgotten - Discussion focuses on new topics, not rehashing known decisions</p>"},{"location":"use-cases/architecture-decisions/#compliance-auditing","title":"Compliance &amp; Auditing","text":"<p>Audit request: <pre><code>\"Show all security-related architectural decisions from Q4\"\n</code></pre></p> <p>Notify-MCP provides: - Timestamped record of security decisions - Author attribution (who decided what) - Rationale for compliance review - Threading showing decision evolution</p>"},{"location":"use-cases/architecture-decisions/#best-practices","title":"Best Practices","text":""},{"location":"use-cases/architecture-decisions/#do-this","title":"\u2705 Do This","text":"<ul> <li>Publish decisions immediately - Don't wait for documentation</li> <li>Include rationale - Future you will thank you</li> <li>Tag consistently - Makes searching easier</li> <li>Link related decisions - Use threading</li> <li>Set appropriate priority - High for major changes, medium for clarifications</li> </ul>"},{"location":"use-cases/architecture-decisions/#avoid-this","title":"\u274c Avoid This","text":"<ul> <li>Don't skip context - \"We're using Postgres\" is less useful than \"We chose Postgres over MongoDB because...\"</li> <li>Don't forget alternatives - Document what was considered and rejected</li> <li>Don't use vague titles - \"Database Change\" vs \"ADR-005: Migration to PostgreSQL 15\"</li> <li>Don't ignore notifications - Subscribe to channels relevant to your work</li> </ul>"},{"location":"use-cases/architecture-decisions/#integration-with-other-tools","title":"Integration with Other Tools","text":""},{"location":"use-cases/architecture-decisions/#adr-tools","title":"ADR Tools","text":"<p>Notify-MCP complements (doesn't replace) architectural decision records:</p> <ol> <li>Publish to Notify-MCP - Instant team notification</li> <li>Document in ADR repository - Long-term formal record</li> <li>Link them together - Include ADR link in notification body</li> </ol>"},{"location":"use-cases/architecture-decisions/#wikidocumentation","title":"Wiki/Documentation","text":"<ol> <li>Notification provides immediate awareness</li> <li>Wiki provides detailed documentation</li> <li>Notification links to wiki page - Best of both worlds</li> </ol>"},{"location":"use-cases/architecture-decisions/#issue-trackers","title":"Issue Trackers","text":"<ol> <li>Architectural decision made - Publish to Notify-MCP</li> <li>Create implementation issues - Link back to notification</li> <li>Track progress - Update via new notifications</li> </ol>"},{"location":"use-cases/architecture-decisions/#measuring-success","title":"Measuring Success","text":""},{"location":"use-cases/architecture-decisions/#metrics-to-track","title":"Metrics to Track","text":"<ul> <li>Decision propagation time: How quickly do team members learn about decisions?</li> <li>Duplicate research reduction: Are team members asking the same questions repeatedly?</li> <li>Onboarding speed: How quickly do new hires get up to speed?</li> <li>Decision consistency: Are implementations following architectural guidance?</li> </ul>"},{"location":"use-cases/architecture-decisions/#expected-outcomes","title":"Expected Outcomes","text":"<ul> <li>\u2705 50% reduction in \"I didn't know about that decision\" incidents</li> <li>\u2705 Faster onboarding for new team members (days vs weeks)</li> <li>\u2705 Improved consistency across codebase</li> <li>\u2705 Better decision quality through collaborative refinement</li> </ul>"},{"location":"use-cases/architecture-decisions/#next-steps","title":"Next Steps","text":"<ol> <li>Install Notify-MCP - 5-minute setup</li> <li>Configure SQLite storage - Enable team sharing</li> <li>Create architecture channel - Start publishing decisions</li> <li>Set up filters - Subscribe with relevant tags</li> </ol>"},{"location":"use-cases/architecture-decisions/#related-use-cases","title":"Related Use Cases","text":"<ul> <li>Team Coordination - Coordinate work across distributed teams</li> <li>Project Updates - Broadcast milestones and status</li> <li>Real-World Scenarios - Complete workflow examples</li> </ul> <p>Ready to eliminate architectural information silos? Get started with Notify-MCP today!</p>"},{"location":"use-cases/cross-platform-ai/","title":"Cross-Platform AI Collaboration","text":"<p>Problem: Teams use different AI assistants (Claude, ChatGPT, Gemini, Perplexity) based on personal preference, specialty, or availability\u2014creating information silos where critical knowledge stays trapped in individual AI conversations.</p> <p>Solution: Notify-MCP breaks down AI platform barriers by providing a unified notification layer that works seamlessly across all MCP-compatible AI assistants, enabling true cross-platform collaboration.</p>"},{"location":"use-cases/cross-platform-ai/#the-challenge","title":"The Challenge","text":"<p>Modern teams leverage multiple AI platforms, but face fragmentation:</p> <ul> <li>Developer A has critical insights from Claude Code sessions that Developer B (using ChatGPT) never sees</li> <li>Designer using Gemini makes UI decisions that Frontend team using Claude discovers weeks later</li> <li>Data Scientist using Perplexity finds important research that stays siloed in their conversation</li> <li>Team knowledge scattered across incompatible platforms with no way to share</li> </ul> <p>This AI platform fragmentation causes:</p> <ul> <li>\u274c Duplicated research across team members</li> <li>\u274c Lost insights and discoveries</li> <li>\u274c Inconsistent understanding of project state</li> <li>\u274c Wasted time rediscovering the same information</li> <li>\u274c Inability to leverage each AI's unique strengths together</li> </ul>"},{"location":"use-cases/cross-platform-ai/#how-notify-mcp-solves-this","title":"How Notify-MCP Solves This","text":""},{"location":"use-cases/cross-platform-ai/#platform-agnostic-communication","title":"Platform-Agnostic Communication","text":"<p>Any AI assistant can publish to and subscribe from Notify-MCP channels\u2014no platform lock-in.</p>"},{"location":"use-cases/cross-platform-ai/#unified-knowledge-base","title":"Unified Knowledge Base","text":"<p>Insights from Claude, ChatGPT, Gemini, and others all flow into a single, searchable notification history.</p>"},{"location":"use-cases/cross-platform-ai/#leverage-ai-strengths","title":"Leverage AI Strengths","text":"<p>Teams can use the best AI for each task (Claude for coding, ChatGPT for ideation, Gemini for research) while maintaining seamless communication.</p>"},{"location":"use-cases/cross-platform-ai/#mcp-standard-compliance","title":"MCP Standard Compliance","text":"<p>Built on Model Context Protocol\u2014works with any MCP-compatible AI assistant, present and future.</p>"},{"location":"use-cases/cross-platform-ai/#persistent-cross-platform-history","title":"Persistent Cross-Platform History","text":"<p>All notifications stored regardless of source AI platform, creating a permanent team knowledge base.</p>"},{"location":"use-cases/cross-platform-ai/#real-world-scenario","title":"Real-World Scenario","text":""},{"location":"use-cases/cross-platform-ai/#scenario-cross-functional-ai-team-building-e-commerce-platform","title":"Scenario: Cross-Functional AI Team Building E-Commerce Platform","text":"<p>Team: 6 people using different AI assistants based on their needs and preferences</p> <p>AI Platform Distribution: - Alice (Backend Lead): Claude Code (best for backend development) - Bob (Frontend Dev): ChatGPT Plus (preferred for React) - Carol (Designer): Gemini (excellent for creative work) - David (DevOps): Claude (great for infrastructure as code) - Emma (Data Analyst): Perplexity (superior research capabilities) - Frank (Product Manager): ChatGPT (accessible, good for planning)</p>"},{"location":"use-cases/cross-platform-ai/#day-1-backend-architectural-decision-claude","title":"Day 1: Backend Architectural Decision (Claude)","text":"<p>Alice (Backend Lead, using Claude Code):</p> <pre><code>Alice: \"I need to decide between PostgreSQL and MongoDB for our e-commerce\ndatabase. Let's discuss this.\"\n\nClaude: \"Let me analyze both options... Based on your e-commerce requirements\n(ACID transactions, relational data, complex queries), I recommend PostgreSQL.\nShall I publish this architectural decision?\"\n\nAlice: \"Yes, publish it to the architecture channel so the whole team knows.\"\n\n# Notification sent via Claude:\n{\n  \"channel\": \"architecture\",\n  \"title\": \"Database Decision: PostgreSQL Selected\",\n  \"body\": \"## Decision\\n\\nUsing PostgreSQL for e-commerce platform database.\\n\\n\n  ## Rationale\\n\\n**PostgreSQL chosen over MongoDB because:**\\n- ACID transactions\n  critical for order processing\\n- Relational data model (users, orders, products)\\n\n  - Complex JOIN queries for analytics\\n- JSON support available for flexible\n  fields\\n- Better consistency guarantees\\n\\n## Impact\\n\\n- Backend: Using\n  SQLAlchemy ORM\\n- DevOps: Postgres container in Docker Compose\\n- Data team:\n  SQL queries for analytics\\n\\nTeam: Please design your components with relational\n  model in mind.\",\n  \"priority\": \"high\",\n  \"theme\": \"architecture-decision\",\n  \"tags\": [\"database\", \"postgresql\", \"architecture\"],\n  \"sender\": {\n    \"name\": \"Alice Chen\",\n    \"role\": \"Backend Lead\",\n    \"ai_tool\": \"Claude Code\"\n  }\n}\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#day-1-2-hours-later-frontend-developer-sees-decision-chatgpt","title":"Day 1 (2 hours later): Frontend Developer Sees Decision (ChatGPT)","text":"<p>Bob (Frontend Dev, using ChatGPT Plus):</p> <pre><code>Bob: \"Are there any architecture decisions I should know about for the e-commerce\nproject?\"\n\nChatGPT: \"Yes! Alice made a database decision 2 hours ago. She selected PostgreSQL\nover MongoDB for ACID transactions and relational data modeling. This affects\nyour frontend because:\n\n1. API will return relational data structures\n2. GraphQL might be a good fit for complex queries\n3. You can expect strong consistency guarantees\n\nThe backend is using SQLAlchemy ORM. Would you like me to help design the API\ninterface?\"\n\nBob: \"Perfect! Yes, let's design the API with that in mind.\"\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#day-2-design-system-research-gemini","title":"Day 2: Design System Research (Gemini)","text":"<p>Carol (Designer, using Gemini):</p> <pre><code>Carol: \"I've been researching e-commerce design patterns. What are the best\npractices for product listing pages?\"\n\nGemini: \"I've found excellent research on e-commerce UX patterns... [extensive\nanalysis]. The key findings suggest a card-based layout with lazy loading and\nquick-view functionality performs best.\"\n\nCarol: \"This is valuable for the whole team. Publish these design insights.\"\n\n# Notification sent via Gemini:\n{\n  \"channel\": \"design\",\n  \"title\": \"UX Research: E-Commerce Product Listing Best Practices\",\n  \"body\": \"## Key Findings\\n\\nResearched e-commerce UX patterns across top 50\n  online retailers.\\n\\n## Product Listing Recommendations\\n\\n1. **Card-based\n  layout** (4 columns desktop, 2 mobile)\\n2. **Lazy loading** (load 20 products,\n  infinite scroll)\\n3. **Quick view modal** (preview without leaving list)\\n\n  4. **Filter sidebar** (collapsible on mobile)\\n5. **Sort dropdown** (price,\n  popularity, rating)\\n\\n## Performance Impact\\n\\n- Card layout: 35% higher\n  engagement vs. list\\n- Quick view: 22% reduction in bounce rate\\n- Lazy loading:\n  58% faster initial load\\n\\n## Design Files\\n\\nFigma link: [Design System]\\n\\n\n  ## Implementation Notes\\n\\nFrontend: Will need pagination API endpoint\\nBackend:\n  Consider caching strategy for product data\\n\\nStudies referenced: Nielsen\n  Norman, Baymard Institute\",\n  \"priority\": \"medium\",\n  \"theme\": \"research-findings\",\n  \"tags\": [\"ux\", \"design\", \"research\", \"product-listing\"],\n  \"sender\": {\n    \"name\": \"Carol Martinez\",\n    \"role\": \"Product Designer\",\n    \"ai_tool\": \"Gemini\"\n  }\n}\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#day-2-evening-devops-sees-both-updates-claude","title":"Day 2 (Evening): DevOps Sees Both Updates (Claude)","text":"<p>David (DevOps Engineer, using Claude):</p> <pre><code>David: \"What do I need to know for setting up the e-commerce infrastructure?\"\n\nClaude: \"Let me check the architecture and design channels... Here's what you\nneed to know:\n\n**From Alice (via Claude Code):**\n- Database: PostgreSQL selected\n- ORM: SQLAlchemy\n- Need: Postgres container in Docker Compose\n\n**From Carol (via Gemini):**\n- Frontend will use card-based product listings with lazy loading\n- Backend needs pagination API + caching strategy for product data\n- Performance is critical (58% faster initial load with lazy loading)\n\nFor your infrastructure planning:\n1. PostgreSQL container with persistent volume\n2. Redis for product data caching (Carol's performance requirement)\n3. CDN for product images (Carol's fast loading requirement)\n4. Load balancer for horizontal scaling\n\nWould you like me to help draft the Docker Compose configuration?\"\n\nDavid: \"Yes! And publish the infrastructure decision so everyone knows.\"\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#day-3-data-analyst-research-perplexity","title":"Day 3: Data Analyst Research (Perplexity)","text":"<p>Emma (Data Analyst, using Perplexity):</p> <pre><code>Emma: \"Research customer behavior patterns in e-commerce checkout flows. What\nare the key drop-off points?\"\n\nPerplexity: \"Based on recent e-commerce research (2024 studies), here are the\ncritical drop-off points... [comprehensive research]. The data shows 68% of\ncarts are abandoned, with these primary causes...\"\n\nEmma: \"This is critical for the team. Publish these insights.\"\n\n# Notification sent via Perplexity:\n{\n  \"channel\": \"product-insights\",\n  \"title\": \"Research: E-Commerce Checkout Drop-off Patterns\",\n  \"body\": \"## Cart Abandonment Research\\n\\n**68% of e-commerce carts are abandoned.**\n  \\n\\n## Primary Drop-off Points\\n\\n1. **Unexpected shipping costs** (55%)\\n\n  2. **Account creation required** (34%)\\n3. **Complex checkout process** (27%)\\n\n  4. **Payment security concerns** (19%)\\n5. **Slow page load times** (18%)\\n\\n\n  ## Recommendations for Our Platform\\n\\n\u2705 **Show shipping costs early** (before\n  checkout)\\n\u2705 **Guest checkout option** (no forced account creation)\\n\u2705\n  **Single-page checkout** (minimize steps)\\n\u2705 **Trust signals** (security badges,\n  SSL)\\n\u2705 **Performance optimization** (&lt;2s page load)\\n\\n## Impact on Design\\n\\n\n  **Carol (Design):** Consider guest checkout UI\\n**Bob (Frontend):** Single-page\n  checkout component\\n**Alice (Backend):** Guest user order processing\\n**David\n  (DevOps):** Optimize checkout page performance\\n\\nSources: Baymard Institute\n  2024, Statista E-Commerce Report\",\n  \"priority\": \"high\",\n  \"theme\": \"research-findings\",\n  \"tags\": [\"ux\", \"checkout\", \"conversion\", \"research\"],\n  \"sender\": {\n    \"name\": \"Emma Watson\",\n    \"role\": \"Data Analyst\",\n    \"ai_tool\": \"Perplexity\"\n  }\n}\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#day-3-product-manager-synthesis-chatgpt","title":"Day 3: Product Manager Synthesis (ChatGPT)","text":"<p>Frank (Product Manager, using ChatGPT):</p> <pre><code>Frank: \"Summarize all the key decisions and research from this week for our\nsprint planning.\"\n\nChatGPT: \"Here's a comprehensive summary from the architecture, design, and\nproduct-insights channels:\n\n## Technical Decisions\n\n**Database (Alice via Claude Code):**\n- PostgreSQL selected for ACID transactions and relational model\n- Using SQLAlchemy ORM\n\n**Infrastructure (David via Claude):**\n- Docker Compose with Postgres + Redis\n- CDN for product images\n- Horizontal scaling via load balancer\n\n## UX Research\n\n**Product Listing (Carol via Gemini):**\n- Card-based layout with lazy loading\n- Quick view modal functionality\n- Pagination + caching strategy needed\n\n**Checkout Optimization (Emma via Perplexity):**\n- Guest checkout required (34% drop-off from forced accounts)\n- Show shipping costs early (55% cite unexpected costs)\n- Single-page checkout (minimize steps)\n- Performance critical (&lt;2s load time)\n\n## Sprint Planning Implications\n\nBased on this cross-platform research:\n1. **Sprint 1:** Database schema + basic product listing API\n2. **Sprint 2:** Product listing UI (card layout + lazy loading)\n3. **Sprint 3:** Guest checkout flow with early shipping calculation\n4. **Sprint 4:** Performance optimization + caching\n\nAll team members contributed valuable insights using their preferred AI platforms!\nWould you like me to publish this sprint plan?\"\n\nFrank: \"Yes, publish it. This is a perfect example of cross-platform AI collaboration!\"\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#benefits-demonstrated","title":"Benefits Demonstrated","text":""},{"location":"use-cases/cross-platform-ai/#platform-independence","title":"\ud83c\udf10 Platform Independence","text":"<ul> <li>5 different AI platforms used: Claude Code, ChatGPT Plus, Gemini, Perplexity, Claude</li> <li>Zero communication friction between platforms</li> <li>Everyone informed regardless of their AI choice</li> </ul>"},{"location":"use-cases/cross-platform-ai/#leverage-ai-strengths_1","title":"\ud83e\udde0 Leverage AI Strengths","text":"<ul> <li>Claude Code: Alice used it for backend architectural decisions (coding strength)</li> <li>Gemini: Carol used it for creative UX research (creative strength)</li> <li>Perplexity: Emma used it for deep research (research strength)</li> <li>ChatGPT: Frank used it for synthesis and planning (general-purpose strength)</li> </ul> <p>Result: Team got the best of all AI platforms without silos.</p>"},{"location":"use-cases/cross-platform-ai/#seamless-knowledge-flow","title":"\ud83d\udd04 Seamless Knowledge Flow","text":"<ul> <li>Alice's PostgreSQL decision (Claude) \u2192 Informed Bob's frontend work (ChatGPT)</li> <li>Carol's UX research (Gemini) \u2192 Guided David's infrastructure (Claude)</li> <li>Emma's checkout research (Perplexity) \u2192 Shaped Frank's sprint plan (ChatGPT)</li> </ul>"},{"location":"use-cases/cross-platform-ai/#unified-knowledge-base_1","title":"\ud83d\udcda Unified Knowledge Base","text":"<ul> <li>All insights stored in one place regardless of source AI</li> <li>Anyone can query complete project history</li> <li>No information lost to platform silos</li> </ul>"},{"location":"use-cases/cross-platform-ai/#faster-decision-making","title":"\ud83d\ude80 Faster Decision Making","text":"<ul> <li>Before: Wait for meetings to share insights from different AI platforms</li> <li>After: Instant knowledge sharing across all platforms</li> <li>Impact: 10x faster information propagation</li> </ul>"},{"location":"use-cases/cross-platform-ai/#implementation-guide","title":"Implementation Guide","text":""},{"location":"use-cases/cross-platform-ai/#1-set-up-cross-platform-channels","title":"1. Set Up Cross-Platform Channels","text":"<pre><code># Create channels for different types of information\n\"Create channels: architecture, design, product-insights, engineering\"\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#2-subscribe-team-members-any-ai-platform","title":"2. Subscribe Team Members (Any AI Platform)","text":"<pre><code># In Claude:\n\"Subscribe me to architecture and engineering channels\"\n\n# In ChatGPT:\n\"Subscribe me to design and product-insights channels\"\n\n# In Gemini:\n\"Subscribe me to all project channels\"\n\n# Result: Everyone synchronized regardless of AI platform\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#3-publish-from-any-platform","title":"3. Publish from Any Platform","text":"<pre><code># Any team member using any AI assistant can publish\n\"Publish this architectural decision to the architecture channel\"\n\n# Works identically in Claude, ChatGPT, Gemini, Perplexity, etc.\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#4-retrieve-from-any-platform","title":"4. Retrieve from Any Platform","text":"<pre><code># Query notifications from any AI assistant\n\"Show me recent architecture decisions\"\n\"What research has been published this week?\"\n\"Summarize all design discussions\"\n\n# Every AI assistant can access the same notification history\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#cross-platform-collaboration-patterns","title":"Cross-Platform Collaboration Patterns","text":""},{"location":"use-cases/cross-platform-ai/#pattern-1-research-decision-implementation","title":"Pattern 1: Research \u2192 Decision \u2192 Implementation","text":"<pre><code>graph LR\n    A[Emma researches\\nPerplexity] --&gt; B[Frank decides\\nChatGPT]\n    B --&gt; C[Bob implements\\nClaude Code]\n    C --&gt; D[Carol designs\\nGemini]\n    D --&gt; E[All informed\\nvia Notify-MCP]</code></pre> <p>Example: 1. Emma (Perplexity) researches checkout best practices 2. Frank (ChatGPT) reviews research and decides on guest checkout 3. Bob (Claude Code) implements guest checkout API 4. Carol (Gemini) designs guest checkout UI 5. All stay informed via Notify-MCP</p>"},{"location":"use-cases/cross-platform-ai/#pattern-2-parallel-workstreams-unified-communication","title":"Pattern 2: Parallel Workstreams, Unified Communication","text":"<pre><code># Four team members working simultaneously on different AI platforms\n\n**10:00 AM** - Alice (Claude Code): \"Backend API ready for testing\"\n**10:15 AM** - Carol (Gemini): \"Mobile designs updated in Figma\"\n**10:30 AM** - Emma (Perplexity): \"Performance benchmark results published\"\n**10:45 AM** - David (Claude): \"Staging environment deployed\"\n\n# All updates visible to everyone regardless of their AI platform\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#pattern-3-ai-specific-expertise-sharing","title":"Pattern 3: AI-Specific Expertise Sharing","text":"<pre><code># Leverage each AI's unique strengths\n\n**Claude Code** (coding expertise):\n- Architectural decisions\n- Code review insights\n- Implementation patterns\n\n**Gemini** (creative/research):\n- Design research\n- UX patterns\n- Creative solutions\n\n**ChatGPT** (general-purpose):\n- Planning and synthesis\n- Documentation\n- Communication\n\n**Perplexity** (deep research):\n- Market research\n- Technical investigations\n- Best practices analysis\n\nAll insights flow into unified Notify-MCP knowledge base.\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#advanced-cross-platform-scenarios","title":"Advanced Cross-Platform Scenarios","text":""},{"location":"use-cases/cross-platform-ai/#scenario-1-ai-platform-outage-resilience","title":"Scenario 1: AI Platform Outage Resilience","text":"<p>ChatGPT experiences an outage:</p> <pre><code># Bob normally uses ChatGPT, but it's down\nBob (switching to Claude): \"Show me the latest project updates\"\n\nClaude: \"Here are updates from the last 24 hours:\n- Alice published API changes (via ChatGPT before outage)\n- Carol updated design system (via Gemini)\n- David completed database migration (via Claude)\n\nYou have full context even though ChatGPT is down. Would you like me to help\nwith your frontend work?\"\n\nBob: \"Yes! Good thing we have all the context preserved.\"\n</code></pre> <p>Benefit: Team resilience\u2014no single point of failure.</p>"},{"location":"use-cases/cross-platform-ai/#scenario-2-multi-ai-conversation-threading","title":"Scenario 2: Multi-AI Conversation Threading","text":"<p>Complex discussion across multiple AI platforms:</p> <pre><code># Thread starts in Claude (Alice)\n{\n  \"title\": \"Proposal: GraphQL API Layer\",\n  \"thread_id\": \"graphql-discussion\",\n  \"ai_tool\": \"Claude\"\n}\n\n# Bob responds via ChatGPT\n{\n  \"title\": \"Re: GraphQL Proposal - Frontend Perspective\",\n  \"thread_id\": \"graphql-discussion\",\n  \"in_reply_to\": \"msg-alice-proposal\",\n  \"ai_tool\": \"ChatGPT\"\n}\n\n# Carol adds design input via Gemini\n{\n  \"title\": \"Re: GraphQL - Design System Integration\",\n  \"thread_id\": \"graphql-discussion\",\n  \"in_reply_to\": \"msg-bob-frontend\",\n  \"ai_tool\": \"Gemini\"\n}\n\n# Result: Threaded conversation across three AI platforms\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#scenario-3-ai-platform-preference-switching","title":"Scenario 3: AI Platform Preference Switching","text":"<p>Developer switches AI platforms mid-project:</p> <pre><code># Week 1: Bob using ChatGPT\nBob (ChatGPT): \"Subscribe me to architecture and engineering channels\"\n[Works on frontend all week]\n\n# Week 2: Bob switches to Claude Code for better coding assistance\nBob (Claude Code): \"Show me what I missed from the architecture channel\"\n\nClaude Code: \"Here's your complete history from when you subscribed:\n- 12 architectural decisions\n- 8 engineering updates\n- 3 blockers (all resolved)\n\nFull context preserved even though you switched AI platforms. Would you like\na summary or detailed review?\"\n\nBob: \"Summary please. This is great\u2014no context lost!\"\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#platform-comparison-with-vs-without-notify-mcp","title":"Platform Comparison: With vs. Without Notify-MCP","text":""},{"location":"use-cases/cross-platform-ai/#without-notify-mcp-siloed-ai-platforms","title":"Without Notify-MCP (Siloed AI Platforms)","text":"<pre><code>\u274c Alice's insights in Claude stay in Claude\n\u274c Bob's discoveries in ChatGPT stay in ChatGPT\n\u274c Carol's research in Gemini stays in Gemini\n\u274c Team must schedule meetings to share knowledge\n\u274c Information loss between platforms\n\u274c Duplicated research across team members\n\u274c Can't leverage each AI's unique strengths together\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#with-notify-mcp-unified-ai-collaboration","title":"With Notify-MCP (Unified AI Collaboration)","text":"<pre><code>\u2705 Alice publishes insights from Claude \u2192 Everyone sees it\n\u2705 Bob shares discoveries from ChatGPT \u2192 Team synchronized\n\u2705 Carol broadcasts research from Gemini \u2192 Full visibility\n\u2705 Real-time knowledge sharing across all platforms\n\u2705 Zero information loss\n\u2705 No duplicated work\n\u2705 Leverage best AI for each task while staying connected\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#best-practices-for-cross-platform-teams","title":"Best Practices for Cross-Platform Teams","text":""},{"location":"use-cases/cross-platform-ai/#do-this","title":"\u2705 Do This","text":"<ul> <li>Use the best AI for each task - Don't force platform standardization</li> <li>Publish important insights - Share discoveries from any platform</li> <li>Tag with AI tool - Sender metadata includes which AI was used</li> <li>Cross-reference threads - Link related discussions across platforms</li> <li>Embrace platform diversity - Different AIs bring different strengths</li> </ul>"},{"location":"use-cases/cross-platform-ai/#avoid-this","title":"\u274c Avoid This","text":"<ul> <li>Don't force platform standardization - Let team members choose their preferred AI</li> <li>Don't duplicate notifications - Publish once, visible everywhere</li> <li>Don't assume platform availability - Design for resilience</li> <li>Don't create platform-specific channels - Keep channels platform-agnostic</li> <li>Don't ignore sender context - Note which AI tool generated insights</li> </ul>"},{"location":"use-cases/cross-platform-ai/#measuring-cross-platform-success","title":"Measuring Cross-Platform Success","text":""},{"location":"use-cases/cross-platform-ai/#collaboration-metrics","title":"Collaboration Metrics","text":"<ul> <li>Platform diversity: How many different AI platforms are actively used?</li> <li>Knowledge sharing: How often do insights from one AI inform work on another?</li> <li>Information silos: Reduced incidents of \"I didn't know that\"</li> <li>Platform outage resilience: Can team continue during AI platform outages?</li> </ul>"},{"location":"use-cases/cross-platform-ai/#expected-outcomes","title":"Expected Outcomes","text":"<ul> <li>\u2705 100% cross-platform visibility - No information silos</li> <li>\u2705 Team uses 3+ AI platforms - Leverage different AI strengths</li> <li>\u2705 Zero context loss - Platform switches don't lose history</li> <li>\u2705 Faster innovation - Best AI for each task + unified communication</li> <li>\u2705 Outage resilience - Team continues working during platform issues</li> </ul>"},{"location":"use-cases/cross-platform-ai/#future-proof-ai-collaboration","title":"Future-Proof AI Collaboration","text":""},{"location":"use-cases/cross-platform-ai/#mcp-standard-benefits","title":"MCP Standard Benefits","text":"<p>Notify-MCP is built on the Model Context Protocol (MCP) standard by Anthropic:</p> <ul> <li>\u2705 Works with all MCP-compatible AI assistants (current and future)</li> <li>\u2705 No vendor lock-in - Switch AI platforms freely</li> <li>\u2705 Future-proof - New AI assistants automatically compatible</li> <li>\u2705 Open standard - Growing ecosystem of MCP tools</li> </ul>"},{"location":"use-cases/cross-platform-ai/#as-new-ai-platforms-emerge","title":"As New AI Platforms Emerge","text":"<pre><code># Today: Claude, ChatGPT, Gemini, Perplexity\nTeam uses Notify-MCP for cross-platform collaboration \u2705\n\n# Tomorrow: New AI platforms launch (GPT-5, Claude 5, Gemini Ultra, etc.)\nNew AI platform supports MCP \u2192 Notify-MCP works immediately \u2705\n\n# Future: AI landscape evolves\nTeam can adopt new AI tools without losing collaboration capabilities \u2705\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#integration-scenarios","title":"Integration Scenarios","text":""},{"location":"use-cases/cross-platform-ai/#scenario-hybrid-human-ai-teams","title":"Scenario: Hybrid Human-AI Teams","text":"<pre><code># Mix of human communication and AI-assisted work\n\n**Human Developer (Slack):**\n\"API is ready for frontend integration\"\n\n**AI Assistant (Claude Code via Notify-MCP):**\n{\n  \"title\": \"API Integration Ready - Automated Tests Passing\",\n  \"body\": \"Backend API deployed to staging. All integration tests passing.\n  Frontend team can proceed.\\n\\nAutomated notification triggered by CI/CD pipeline.\"\n}\n\n**Frontend Dev (ChatGPT):**\n\"Great! Starting frontend integration now.\"\n\nResult: Seamless blend of human and AI communication via unified platform\n</code></pre>"},{"location":"use-cases/cross-platform-ai/#next-steps","title":"Next Steps","text":"<ol> <li>Install Notify-MCP - Works with all MCP-compatible AI assistants</li> <li>Create shared channels - Start cross-platform collaboration</li> <li>Subscribe from any AI platform - Claude, ChatGPT, Gemini, etc.</li> <li>Publish from any platform - Zero platform barriers</li> </ol>"},{"location":"use-cases/cross-platform-ai/#related-use-cases","title":"Related Use Cases","text":"<ul> <li>Team Coordination - Coordinate distributed teams</li> <li>Architecture Decisions - Share technical decisions</li> <li>Real-World Scenarios - Complete workflow examples</li> </ul> <p>Ready to break down AI platform silos? Get started with Notify-MCP today!</p>"},{"location":"use-cases/incident-response/","title":"Incident Response &amp; Alerts","text":"<p>Problem: During production incidents, teams struggle to coordinate response efforts when using different AI assistants. Critical alerts get missed, context is lost, and response time suffers because incident information doesn't flow seamlessly across platforms.</p> <p>Solution: Notify-MCP provides a unified alert notification system that ensures critical incidents reach all team members instantly, regardless of which AI platform they're using\u2014dramatically reducing mean time to resolution (MTTR).</p>"},{"location":"use-cases/incident-response/#the-challenge","title":"The Challenge","text":"<p>Production incidents create chaos when teams lack unified communication:</p> <ul> <li>DevOps engineer (using Claude) detects critical database failure at 2 AM</li> <li>On-call developer (using ChatGPT) doesn't see the alert for 15 minutes</li> <li>Backend team lead (using Gemini) wakes up hours later with zero context</li> <li>Incident Commander can't get a complete picture of who's responding</li> </ul> <p>This incident response fragmentation causes:</p> <ul> <li>\u274c Delayed incident detection and response</li> <li>\u274c Lost context during handoffs</li> <li>\u274c Duplicated troubleshooting efforts</li> <li>\u274c Incomplete incident timelines for post-mortems</li> <li>\u274c Increased MTTR (Mean Time To Resolution)</li> </ul>"},{"location":"use-cases/incident-response/#how-notify-mcp-solves-this","title":"How Notify-MCP Solves This","text":""},{"location":"use-cases/incident-response/#instant-alert-broadcasting","title":"Instant Alert Broadcasting","text":"<p>When any team member detects an incident through their AI assistant, critical alerts reach everyone immediately\u2014no platform barriers.</p>"},{"location":"use-cases/incident-response/#persistent-incident-timeline","title":"Persistent Incident Timeline","text":"<p>All incident-related notifications are stored, creating a complete timeline for post-mortem analysis.</p>"},{"location":"use-cases/incident-response/#cross-platform-war-room","title":"Cross-Platform War Room","text":"<p>Team members using different AI assistants collaborate seamlessly during incident response.</p>"},{"location":"use-cases/incident-response/#priority-based-alerting","title":"Priority-Based Alerting","text":"<p>Critical (P0) incidents trigger high-priority notifications that cut through the noise.</p>"},{"location":"use-cases/incident-response/#automated-incident-context","title":"Automated Incident Context","text":"<p>AI assistants can retrieve complete incident history and current status instantly.</p>"},{"location":"use-cases/incident-response/#real-world-scenario","title":"Real-World Scenario","text":""},{"location":"use-cases/incident-response/#scenario-database-connection-pool-exhaustion","title":"Scenario: Database Connection Pool Exhaustion","text":"<p>Team: 4 engineers on-call rotation, using Claude, ChatGPT, and Gemini</p> <p>Incident: Production database connection pool exhausted, causing 500 errors for all API requests</p> <p>Timeline: Saturday 2:47 AM</p>"},{"location":"use-cases/incident-response/#247-am-incident-detection","title":"2:47 AM: Incident Detection","text":"<p>Monitoring System (automated alert via Claude):</p> <pre><code># Monitoring script detects anomaly, posts via MCP\n{\n  \"channel\": \"incidents\",\n  \"title\": \"\ud83d\udea8 P0 INCIDENT: Database Connection Pool Exhausted\",\n  \"body\": \"## Alert Details\\n\\n**Severity:** P0 - Critical\\n**Service:** Production\n  API\\n**Impact:** 100% of API requests failing with 500 errors\\n\\n## Symptoms\\n\n  - Error rate: 0% \u2192 98% in last 5 minutes\\n- Database connections: 100/100 used\\n\n  - Request queue: 1,247 pending\\n\\n## Affected Services\\n- User API\\n- Payment\n  API\\n- Admin Dashboard\\n\\n## Monitoring Links\\n- [Grafana Dashboard](https://grafana...)\\n\n  - [Error Logs](https://logs...)\\n\\n**Action Required:** Immediate investigation\n  and mitigation\",\n  \"priority\": \"critical\",\n  \"theme\": \"incident-alert\",\n  \"tags\": [\"p0\", \"database\", \"production\"],\n  \"sender\": {\n    \"user_id\": \"monitoring@company.com\",\n    \"name\": \"Production Monitoring\",\n    \"role\": \"System\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre>"},{"location":"use-cases/incident-response/#248-am-first-responder","title":"2:48 AM: First Responder","text":"<p>Sarah (On-Call SRE, using ChatGPT):</p> <pre><code># Sarah's phone buzzes with PagerDuty alert\nSarah: \"Check critical incidents\"\n\nChatGPT: \"CRITICAL P0 incident detected 1 minute ago: Database connection pool\nexhausted. 98% error rate on production API. All API requests failing. You're\nthe first responder.\"\n\nSarah: \"Acknowledge the incident and publish that I'm investigating\"\n\n# Notification sent:\n{\n  \"channel\": \"incidents\",\n  \"title\": \"\ud83d\udc40 Incident Acknowledged - Investigating\",\n  \"body\": \"**Status:** Investigating\\n**Owner:** Sarah Chen (On-Call SRE)\\n\n  **ETA:** Initial assessment in 5 minutes\\n\\n**Immediate Actions:**\\n1. Checking\n  database connection metrics\\n2. Reviewing recent deployments\\n3. Analyzing\n  connection pool configuration\",\n  \"priority\": \"critical\",\n  \"theme\": \"incident-update\",\n  \"tags\": [\"p0\", \"investigating\"],\n  \"thread_id\": \"incident-2024-01-12-001\",\n  \"sender\": {\n    \"name\": \"Sarah Chen\",\n    \"role\": \"SRE\",\n    \"ai_tool\": \"ChatGPT\"\n  }\n}\n</code></pre>"},{"location":"use-cases/incident-response/#252-am-root-cause-identified","title":"2:52 AM: Root Cause Identified","text":"<p>Sarah (using ChatGPT):</p> <pre><code>Sarah: \"I found the issue. Publish an update with root cause.\"\n\n# Notification sent:\n{\n  \"channel\": \"incidents\",\n  \"title\": \"\ud83d\udd0d Root Cause Identified\",\n  \"body\": \"## Root Cause\\n\\nRecent deployment (v2.4.3) introduced connection\n  leak in user authentication middleware.\\n\\n## Evidence\\n- Deployment occurred\n  2:15 AM\\n- Connection usage spiked from 40% to 100% over 30 minutes\\n- Middleware\n  not releasing connections on error paths\\n\\n## Proposed Mitigation\\n**Option\n  1:** Rollback to v2.4.2 (5 min)\\n**Option 2:** Restart app servers to clear\n  leaked connections (2 min, but leak will recur)\\n\\n**Recommendation:** Immediate\n  rollback + hotfix\\n\\nNeed approval to proceed with rollback.\",\n  \"priority\": \"critical\",\n  \"theme\": \"incident-update\",\n  \"tags\": [\"p0\", \"root-cause-identified\"],\n  \"thread_id\": \"incident-2024-01-12-001\",\n  \"sender\": {\n    \"name\": \"Sarah Chen\",\n    \"role\": \"SRE\",\n    \"ai_tool\": \"ChatGPT\"\n  }\n}\n</code></pre>"},{"location":"use-cases/incident-response/#253-am-engineering-lead-approval","title":"2:53 AM: Engineering Lead Approval","text":"<p>Tom (Engineering Lead, using Claude, woken by alert):</p> <pre><code># Tom checks his phone after PagerDuty page\nTom: \"Show me the current incident status\"\n\nClaude: \"P0 incident ongoing for 6 minutes. Sarah identified root cause: connection\nleak in v2.4.3 deployment. She's requesting approval to rollback. Current error\nrate still 98%. Awaiting your approval to proceed.\"\n\nTom: \"Approve rollback immediately. Publish my approval.\"\n\n# Notification sent:\n{\n  \"channel\": \"incidents\",\n  \"title\": \"\u2705 Rollback Approved - Proceed Immediately\",\n  \"body\": \"**Decision:** Rollback to v2.4.2 approved\\n\\n**Authority:** Tom\n  Rodriguez (Engineering Lead)\\n**Timestamp:** 2:53 AM\\n\\nSarah: Proceed with\n  rollback. I'll coordinate with backend team on hotfix after incident is resolved.\",\n  \"priority\": \"critical\",\n  \"theme\": \"incident-decision\",\n  \"tags\": [\"p0\", \"approved\"],\n  \"thread_id\": \"incident-2024-01-12-001\",\n  \"in_reply_to\": \"msg-root-cause\",\n  \"sender\": {\n    \"name\": \"Tom Rodriguez\",\n    \"role\": \"Engineering Lead\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre>"},{"location":"use-cases/incident-response/#255-am-mitigation-in-progress","title":"2:55 AM: Mitigation in Progress","text":"<p>Sarah (using ChatGPT):</p> <pre><code>Sarah: \"I'm starting the rollback. Publish a status update.\"\n\n# Notification sent:\n{\n  \"channel\": \"incidents\",\n  \"title\": \"\u2699\ufe0f Mitigation In Progress - Rollback Started\",\n  \"body\": \"**Action:** Rolling back production to v2.4.2\\n\\n**Progress:**\\n\n  - [x] Rollback approved\\n- [x] Rollback initiated via CI/CD\\n- [ ] Deployment\n  in progress (est. 3 minutes)\\n- [ ] Health checks\\n- [ ] Connection pool recovery\\n\\n\n  **Monitoring:** Watching error rate and connection metrics\",\n  \"priority\": \"critical\",\n  \"theme\": \"incident-update\",\n  \"tags\": [\"p0\", \"mitigating\"],\n  \"thread_id\": \"incident-2024-01-12-001\",\n  \"sender\": {\n    \"name\": \"Sarah Chen\",\n    \"role\": \"SRE\",\n    \"ai_tool\": \"ChatGPT\"\n  }\n}\n</code></pre>"},{"location":"use-cases/incident-response/#259-am-incident-resolved","title":"2:59 AM: Incident Resolved","text":"<p>Sarah (using ChatGPT):</p> <pre><code>Sarah: \"Services are recovering. Publish resolution notification.\"\n\n# Notification sent:\n{\n  \"channel\": \"incidents\",\n  \"title\": \"\u2705 INCIDENT RESOLVED - Services Recovered\",\n  \"body\": \"## Resolution\\n\\n**Status:** Resolved\\n**Duration:** 12 minutes\n  (2:47 AM - 2:59 AM)\\n**Resolution Time:** 8 minutes from root cause to recovery\\n\\n\n  ## Recovery Metrics\\n- Error rate: 98% \u2192 0.2% \u2705\\n- Database connections:\n  100/100 \u2192 45/100 \u2705\\n- API latency: Back to normal \u2705\\n- Request queue: Cleared \u2705\\n\\n\n  ## Summary\\n- **Cause:** Connection leak in v2.4.3 deployment\\n- **Fix:** Rollback\n  to v2.4.2\\n- **Impact:** ~12 minutes of degraded service\\n\\n## Next Steps\\n\n  1. Post-mortem scheduled for Monday 10 AM\\n2. Hotfix PR for connection leak\\n\n  3. Add connection leak detection to CI/CD\\n\\nGoing back to sleep \ud83d\ude34\",\n  \"priority\": \"high\",\n  \"theme\": \"incident-resolved\",\n  \"tags\": [\"p0\", \"resolved\"],\n  \"thread_id\": \"incident-2024-01-12-001\",\n  \"sender\": {\n    \"name\": \"Sarah Chen\",\n    \"role\": \"SRE\",\n    \"ai_tool\": \"ChatGPT\"\n  }\n}\n</code></pre>"},{"location":"use-cases/incident-response/#305-am-additional-team-context","title":"3:05 AM: Additional Team Context","text":"<p>Alex (Backend Engineer, using Gemini, woken by alert):</p> <pre><code># Alex checks phone, sees incident already resolved\nAlex: \"What incident happened tonight?\"\n\nGemini: \"There was a P0 incident from 2:47-2:59 AM (resolved 6 minutes ago).\nDatabase connection pool was exhausted due to a connection leak in v2.4.3. Sarah\nrolled back to v2.4.2. Services fully recovered. Tom approved the rollback.\nPost-mortem scheduled for Monday 10 AM. You can go back to sleep.\"\n\nAlex: \"Thanks! Glad it's resolved. I'll review the details in the morning.\"\n</code></pre>"},{"location":"use-cases/incident-response/#benefits-demonstrated","title":"Benefits Demonstrated","text":""},{"location":"use-cases/incident-response/#ultra-fast-response","title":"\u26a1 Ultra-Fast Response","text":"<ul> <li>Detection to first responder: 1 minute</li> <li>Root cause identified: 5 minutes after detection</li> <li>Approval granted: 1 minute after root cause</li> <li>Total incident duration: 12 minutes</li> <li>MTTR: 8 minutes from diagnosis to resolution</li> </ul>"},{"location":"use-cases/incident-response/#cross-platform-war-room_1","title":"\ud83c\udf10 Cross-Platform War Room","text":"<ul> <li>Sarah (ChatGPT) detected and resolved incident</li> <li>Tom (Claude) provided approval from different AI platform</li> <li>Alex (Gemini) got complete context despite arriving late</li> <li>No communication barriers between AI platforms</li> </ul>"},{"location":"use-cases/incident-response/#complete-incident-timeline","title":"\ud83d\udcdd Complete Incident Timeline","text":"<p>Every action recorded: 1. 2:47 AM - Incident detected 2. 2:48 AM - Sarah acknowledged 3. 2:52 AM - Root cause identified 4. 2:53 AM - Tom approved rollback 5. 2:55 AM - Mitigation started 6. 2:59 AM - Incident resolved</p> <p>Perfect data for post-mortem analysis.</p>"},{"location":"use-cases/incident-response/#reduced-context-loss","title":"\ud83c\udfaf Reduced Context Loss","text":"<ul> <li>Alex joined late but got complete incident summary instantly</li> <li>No need to read through Slack chaos or scattered logs</li> <li>AI assistant synthesized entire incident on demand</li> <li>Zero information lost during handoffs</li> </ul>"},{"location":"use-cases/incident-response/#priority-based-alerting_1","title":"\ud83d\udd14 Priority-Based Alerting","text":"<ul> <li>P0 incidents used <code>priority: \"critical\"</code> - Maximum visibility</li> <li>Follow-up updates used <code>priority: \"high\"</code> - Important but not alarm bells</li> <li>Post-mortem notifications use <code>priority: \"medium\"</code> - FYI only</li> </ul>"},{"location":"use-cases/incident-response/#implementation-guide","title":"Implementation Guide","text":""},{"location":"use-cases/incident-response/#1-create-incidents-channel","title":"1. Create Incidents Channel","text":"<pre><code># Setup incidents channel for production alerts\n\"Create a channel called 'incidents' for production incident coordination\"\n</code></pre>"},{"location":"use-cases/incident-response/#2-configure-monitoring-integration","title":"2. Configure Monitoring Integration","text":"<p>Integrate monitoring tools (Datadog, New Relic, Grafana) to publish alerts:</p> <pre><code># Example: Monitoring webhook \u2192 Notify-MCP\ndef send_incident_alert(alert_data):\n    notification = {\n        \"channel\": \"incidents\",\n        \"title\": f\"\ud83d\udea8 {alert_data['severity']}: {alert_data['title']}\",\n        \"body\": format_alert_details(alert_data),\n        \"priority\": map_severity_to_priority(alert_data['severity']),\n        \"theme\": \"incident-alert\",\n        \"tags\": [alert_data['severity'].lower(), alert_data['service']],\n    }\n    # Publish via MCP\n</code></pre>"},{"location":"use-cases/incident-response/#3-establish-incident-severity-levels","title":"3. Establish Incident Severity Levels","text":"<pre><code>**P0 (Critical):** Priority = \"critical\"\n- Production down\n- Data loss\n- Security breach\n\n**P1 (High):** Priority = \"high\"\n- Degraded performance\n- Partial outage\n- Customer-facing errors\n\n**P2 (Medium):** Priority = \"medium\"\n- Minor issues\n- Non-customer facing\n- Performance degradation\n\n**P3 (Low):** Priority = \"low\"\n- Monitoring alerts\n- Non-urgent issues\n- Informational\n</code></pre>"},{"location":"use-cases/incident-response/#4-define-incident-notification-themes","title":"4. Define Incident Notification Themes","text":"<pre><code>\"incident-alert\"      - Initial incident detection\n\"incident-update\"     - Status updates during response\n\"incident-decision\"   - Key decisions (approvals, strategy changes)\n\"incident-resolved\"   - Incident resolution\n\"incident-postmortem\" - Post-mortem analysis\n</code></pre>"},{"location":"use-cases/incident-response/#5-set-up-on-call-subscriptions","title":"5. Set Up On-Call Subscriptions","text":"<pre><code># On-call engineer subscribes with critical priority filter\n\"Subscribe me to 'incidents' channel, critical and high priority only\"\n</code></pre>"},{"location":"use-cases/incident-response/#incident-response-patterns","title":"Incident Response Patterns","text":""},{"location":"use-cases/incident-response/#pattern-1-immediate-acknowledgment","title":"Pattern 1: Immediate Acknowledgment","text":"<pre><code># First responder ALWAYS acknowledges within 2 minutes\n{\n  \"title\": \"\ud83d\udc40 Incident Acknowledged\",\n  \"body\": \"**Owner:** [Name]\\n**Status:** Investigating\\n**ETA:** [Timeline]\",\n  \"theme\": \"incident-update\"\n}\n</code></pre>"},{"location":"use-cases/incident-response/#pattern-2-regular-status-updates","title":"Pattern 2: Regular Status Updates","text":"<pre><code># Update every 5-10 minutes during active incidents\n{\n  \"title\": \"\ud83d\udcca Status Update - [Summary]\",\n  \"body\": \"**Progress:** [Current actions]\\n**Findings:** [What we know]\\n\n  **Next:** [Next steps]\",\n  \"theme\": \"incident-update\"\n}\n</code></pre>"},{"location":"use-cases/incident-response/#pattern-3-escalation","title":"Pattern 3: Escalation","text":"<pre><code># Escalate when incident severity increases or help needed\n{\n  \"title\": \"\u2b06\ufe0f ESCALATION: Need [Team/Person]\",\n  \"body\": \"**Reason:** [Why escalating]\\n**Urgency:** [How urgent]\\n\n  **Context:** [What they need to know]\",\n  \"priority\": \"critical\",\n  \"theme\": \"incident-escalation\"\n}\n</code></pre>"},{"location":"use-cases/incident-response/#pattern-4-resolution","title":"Pattern 4: Resolution","text":"<pre><code># Always publish resolution with summary\n{\n  \"title\": \"\u2705 RESOLVED: [Incident Title]\",\n  \"body\": \"**Duration:** [Time]\\n**Cause:** [Root cause]\\n**Fix:** [What fixed it]\\n\n  **Impact:** [User/business impact]\\n**Next Steps:** [Follow-up actions]\",\n  \"theme\": \"incident-resolved\"\n}\n</code></pre>"},{"location":"use-cases/incident-response/#advanced-incident-scenarios","title":"Advanced Incident Scenarios","text":""},{"location":"use-cases/incident-response/#multi-team-incident","title":"Multi-Team Incident","text":"<p>Database team needs application team help:</p> <pre><code>{\n  \"channel\": \"incidents\",\n  \"title\": \"\ud83c\udd98 Need Application Team: Abnormal Query Pattern\",\n  \"body\": \"Database under heavy load. Seeing unusual query pattern from user-service.\n  Need application team to investigate recent code changes.\\n\\n**Evidence:** [Query logs]\",\n  \"priority\": \"critical\",\n  \"tags\": [\"p0\", \"needs-app-team\"],\n  \"thread_id\": \"incident-xyz\"\n}\n</code></pre> <p>Application team responds in same thread:</p> <pre><code>{\n  \"title\": \"\ud83d\udd0d App Team Investigating\",\n  \"body\": \"Found N+1 query introduced in recent deployment. Rolling back now.\",\n  \"in_reply_to\": \"msg-database-team\",\n  \"thread_id\": \"incident-xyz\"\n}\n</code></pre>"},{"location":"use-cases/incident-response/#security-incident","title":"Security Incident","text":"<p>Security team detects breach attempt:</p> <pre><code>{\n  \"channel\": \"security-incidents\",  # Separate high-security channel\n  \"title\": \"\ud83d\udd10 SECURITY INCIDENT: Brute Force Attack Detected\",\n  \"body\": \"**Severity:** P0\\n**Attack Type:** Credential stuffing\\n**Target:**\n  Login endpoints\\n**Rate:** 10,000 attempts/minute\\n\\n**CONFIDENTIAL** - Do not\n  discuss publicly\",\n  \"priority\": \"critical\",\n  \"theme\": \"security-incident\",\n  \"tags\": [\"p0\", \"security\", \"confidential\"]\n}\n</code></pre>"},{"location":"use-cases/incident-response/#cascading-failure","title":"Cascading Failure","text":"<p>Initial incident triggers secondary issues:</p> <pre><code># Primary incident\n{\n  \"title\": \"\ud83d\udea8 P0: Database Failure\",\n  \"thread_id\": \"incident-primary\"\n}\n\n# Cascading impact\n{\n  \"title\": \"\u26a0\ufe0f Secondary Impact: Cache Service Degraded\",\n  \"body\": \"Cache service struggling due to database failure. Seeing elevated\n  miss rate and latency.\",\n  \"thread_id\": \"incident-primary\",  # Link to primary\n  \"tags\": [\"p1\", \"secondary-impact\"]\n}\n</code></pre>"},{"location":"use-cases/incident-response/#post-incident-analysis","title":"Post-Incident Analysis","text":""},{"location":"use-cases/incident-response/#generate-timeline-from-notifications","title":"Generate Timeline from Notifications","text":"<pre><code># After incident, AI assistant can generate timeline\n\"Generate an incident timeline from thread 'incident-2024-01-12-001'\"\n\n# Result:\n## Incident Timeline\n\n- **2:47 AM** - Monitoring detected database connection pool exhaustion\n- **2:48 AM** - Sarah Chen acknowledged, began investigation\n- **2:52 AM** - Root cause identified: connection leak in v2.4.3\n- **2:53 AM** - Tom Rodriguez approved rollback\n- **2:55 AM** - Rollback initiated\n- **2:59 AM** - Services recovered, incident resolved\n\n**Total Duration:** 12 minutes\n**MTTR:** 8 minutes\n</code></pre>"},{"location":"use-cases/incident-response/#extract-key-decisions","title":"Extract Key Decisions","text":"<pre><code>\"Show all incident-decision notifications from last week\"\n\n# Result: All critical decisions made during incidents\n- Rollback approvals\n- Escalation decisions\n- Mitigation strategy choices\n</code></pre>"},{"location":"use-cases/incident-response/#identify-patterns","title":"Identify Patterns","text":"<pre><code>\"How many P0 incidents did we have this month?\"\n\n# Notify-MCP provides data:\n- Total P0 incidents: 4\n- Average MTTR: 15 minutes\n- Most common cause: Deployment issues (3/4)\n- Fastest resolution: 8 minutes\n- Slowest resolution: 28 minutes\n</code></pre>"},{"location":"use-cases/incident-response/#best-practices","title":"Best Practices","text":""},{"location":"use-cases/incident-response/#do-this","title":"\u2705 Do This","text":"<ul> <li>Acknowledge immediately - First responder confirms within 2 minutes</li> <li>Update frequently - Status updates every 5-10 minutes during active incidents</li> <li>Use threads - Keep related updates in same thread_id</li> <li>Clear resolution - Always publish when incident is resolved</li> <li>Preserve context - Include links to logs, dashboards, commits</li> </ul>"},{"location":"use-cases/incident-response/#avoid-this","title":"\u274c Avoid This","text":"<ul> <li>Don't go silent - Regular updates even if \"still investigating\"</li> <li>Don't skip resolution - Always confirm incident is resolved</li> <li>Don't forget priority - P0 = critical, P1 = high, etc.</li> <li>Don't lose thread - Use thread_id to group related notifications</li> <li>Don't mix incidents - Each incident gets its own thread_id</li> </ul>"},{"location":"use-cases/incident-response/#integration-with-incident-management-tools","title":"Integration with Incident Management Tools","text":""},{"location":"use-cases/incident-response/#pagerduty","title":"PagerDuty","text":"<pre><code># PagerDuty triggers Notify-MCP notification\nPagerDuty Alert \u2192 Notify-MCP \u2192 All AI Assistants\n\n# Notify-MCP updates PagerDuty\nIncident Resolved in Notify-MCP \u2192 Update PagerDuty incident status\n</code></pre>"},{"location":"use-cases/incident-response/#opsgenie","title":"Opsgenie","text":"<pre><code># Bidirectional sync\nOpsgenie Alert \u2192 Notify-MCP notification\nNotify-MCP resolution \u2192 Close Opsgenie alert\n</code></pre>"},{"location":"use-cases/incident-response/#statuspage","title":"Statuspage","text":"<pre><code># Publish to Statuspage when customer-facing\nP0 Incident \u2192 Notify-MCP \u2192 Auto-update Statuspage\n</code></pre>"},{"location":"use-cases/incident-response/#measuring-success","title":"Measuring Success","text":""},{"location":"use-cases/incident-response/#incident-response-metrics","title":"Incident Response Metrics","text":"<ul> <li>MTTR (Mean Time To Resolution): Target 50% reduction</li> <li>First Response Time: Target &lt; 2 minutes for P0</li> <li>Context Loss: Zero handoff information loss</li> <li>Post-Mortem Completeness: 100% accurate timelines</li> </ul>"},{"location":"use-cases/incident-response/#expected-outcomes","title":"Expected Outcomes","text":"<ul> <li>\u2705 50% reduction in MTTR</li> <li>\u2705 90% faster first response time</li> <li>\u2705 Zero context loss during handoffs</li> <li>\u2705 Complete incident timelines for post-mortems</li> <li>\u2705 Better on-call experience (full context instantly available)</li> </ul>"},{"location":"use-cases/incident-response/#next-steps","title":"Next Steps","text":"<ol> <li>Install Notify-MCP - 5-minute setup</li> <li>Create incidents channel - Start incident coordination</li> <li>Integrate monitoring - Connect alerting tools</li> <li>Set up on-call subscriptions - Configure priority filters</li> </ol>"},{"location":"use-cases/incident-response/#related-use-cases","title":"Related Use Cases","text":"<ul> <li>Team Coordination - Day-to-day team collaboration</li> <li>Project Updates - Stakeholder communication</li> <li>Real-World Scenarios - Complete workflow examples</li> </ul> <p>Ready to transform incident response? Get started with Notify-MCP today!</p>"},{"location":"use-cases/project-updates/","title":"Project Updates &amp; Milestones","text":"<p>Problem: Product managers, stakeholders, and executives struggle to stay informed when development teams use different AI assistants. Sprint updates, milestone achievements, and requirement changes get lost in email threads and Slack channels, leading to misaligned expectations and last-minute surprises.</p> <p>Solution: Notify-MCP provides a unified broadcast system for project updates that reaches all stakeholders instantly, regardless of which AI platform they use\u2014ensuring transparent, real-time project visibility.</p>"},{"location":"use-cases/project-updates/#the-challenge","title":"The Challenge","text":"<p>Project communication breaks down across organizational boundaries:</p> <ul> <li>Product Manager (using Claude) updates sprint goals, but Stakeholders (using ChatGPT) miss the changes</li> <li>Development Team achieves a major milestone, but Executives don't hear about it until the weekly status meeting</li> <li>Requirements change mid-sprint, but half the team continues working on outdated specs</li> <li>Delivery delays discovered too late because early warning signs weren't visible to leadership</li> </ul> <p>This communication fragmentation causes:</p> <ul> <li>\u274c Misaligned expectations between teams and stakeholders</li> <li>\u274c Missed opportunities to celebrate team achievements</li> <li>\u274c Late discovery of project risks and blockers</li> <li>\u274c Excessive meeting overhead for status updates</li> <li>\u274c Reduced team morale from lack of visibility</li> </ul>"},{"location":"use-cases/project-updates/#how-notify-mcp-solves-this","title":"How Notify-MCP Solves This","text":""},{"location":"use-cases/project-updates/#automatic-stakeholder-updates","title":"Automatic Stakeholder Updates","text":"<p>Project updates published once reach all stakeholders\u2014technical and non-technical\u2014through their preferred AI assistant.</p>"},{"location":"use-cases/project-updates/#milestone-broadcasting","title":"Milestone Broadcasting","text":"<p>Team achievements are shared immediately, boosting morale and providing executive visibility.</p>"},{"location":"use-cases/project-updates/#requirement-change-propagation","title":"Requirement Change Propagation","text":"<p>When requirements change, everyone affected is notified instantly\u2014no more working on outdated specs.</p>"},{"location":"use-cases/project-updates/#progress-transparency","title":"Progress Transparency","text":"<p>Real-time project status available to anyone with access\u2014no waiting for weekly status reports.</p>"},{"location":"use-cases/project-updates/#historical-record","title":"Historical Record","text":"<p>Complete project history stored persistently for future reference, audits, and lessons learned.</p>"},{"location":"use-cases/project-updates/#real-world-scenario","title":"Real-World Scenario","text":""},{"location":"use-cases/project-updates/#scenario-mobile-app-feature-launch","title":"Scenario: Mobile App Feature Launch","text":"<p>Team: Product manager, 5 developers, 2 QA engineers, 1 designer, 3 executives</p> <p>Project: Launch new \"Social Sharing\" feature in mobile app</p> <p>Timeline: 4-week sprint</p> <p>Stakeholders using: Claude (PM + 3 devs), ChatGPT (2 devs + QA lead), Gemini (Designer + Executives)</p>"},{"location":"use-cases/project-updates/#week-1-sprint-kickoff","title":"Week 1: Sprint Kickoff","text":"<p>Emma (Product Manager, using Claude):</p> <pre><code>Emma: \"Create a channel called 'project-social-sharing' and publish sprint\nkickoff announcement\"\n\n# Notification sent:\n{\n  \"channel\": \"project-social-sharing\",\n  \"title\": \"\ud83d\ude80 Sprint Kickoff: Social Sharing Feature\",\n  \"body\": \"## Project Overview\\n\\nBuilding social sharing functionality for mobile\n  app to enable users to share achievements on Facebook, Twitter, and Instagram.\\n\\n\n  ## Sprint Goals\\n\\n- [ ] Social platform API integrations\\n- [ ] Share dialog\n  UI design\\n- [ ] Image generation for share cards\\n- [ ] Analytics tracking\\n\n  - [ ] iOS + Android implementation\\n\\n## Success Criteria\\n\\n\u2705 Users can share\n  achievements with one tap\\n\u2705 Generated share images look professional\\n\u2705\n  Analytics track share conversion rate\\n\\n## Timeline\\n\\n**Week 1-2:** API\n  integration + UI design\\n**Week 3:** Implementation\\n**Week 4:** QA + launch\\n\\n\n  ## Team\\n\\n- Emma (PM)\\n- Alex (iOS Dev)\\n- Maria (Android Dev)\\n- Chris\n  (Backend)\\n- Jordan (QA Lead)\\n- Sam (Designer)\\n\\n**Stakeholders:** Exec team\n  will receive weekly updates in this channel\",\n  \"priority\": \"high\",\n  \"theme\": \"project-kickoff\",\n  \"tags\": [\"social-sharing\", \"sprint\", \"kickoff\"],\n  \"sender\": {\n    \"name\": \"Emma Rodriguez\",\n    \"role\": \"Product Manager\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre>"},{"location":"use-cases/project-updates/#week-1-design-milestone","title":"Week 1: Design Milestone","text":"<p>Sam (Designer, using Gemini):</p> <pre><code>Sam: \"The share dialog designs are ready. Publish a milestone notification.\"\n\n# Notification sent:\n{\n  \"channel\": \"project-social-sharing\",\n  \"title\": \"\u2705 Milestone: Share Dialog Designs Complete\",\n  \"body\": \"## Design Deliverable\\n\\nShare dialog UI designs completed and ready\n  for dev handoff! \ud83c\udfa8\\n\\n## What's Included\\n\\n- iOS native design (Figma)\\n\n  - Android Material Design variant\\n- Social platform brand guidelines\\n- Share\n  card templates (3 variants)\\n- Dark mode support\\n\\n## Preview\\n\\n[Figma Link]\n  (https://figma.com/...)\\n\\n## Next Steps\\n\\n- Design review meeting: Tomorrow\n  2 PM\\n- Dev can start iOS implementation after review\\n\\n**Timeline:** On track\n  for Week 1 delivery \u2705\",\n  \"priority\": \"medium\",\n  \"theme\": \"milestone-achieved\",\n  \"tags\": [\"design\", \"milestone\", \"on-track\"],\n  \"sender\": {\n    \"name\": \"Sam Taylor\",\n    \"role\": \"Product Designer\",\n    \"ai_tool\": \"Gemini\"\n  }\n}\n</code></pre> <p>Sarah (CEO, using Gemini, checking project status):</p> <pre><code>Sarah: \"What's the status of the social sharing project?\"\n\nGemini: \"Great progress! The project kicked off this week with a 4-week timeline.\nThe designer Sam just completed the share dialog UI designs ahead of schedule.\nDesign review is tomorrow. The team is on track for Week 1-2 API integration\nand UI design completion.\"\n\nSarah: \"Excellent! Keep me updated on major milestones.\"\n</code></pre>"},{"location":"use-cases/project-updates/#week-2-requirement-change","title":"Week 2: Requirement Change","text":"<p>Emma (Product Manager, discovers marketing needs change):</p> <pre><code>Emma: \"We need to add LinkedIn sharing support. Publish a requirement change\nnotification.\"\n\n# Notification sent:\n{\n  \"channel\": \"project-social-sharing\",\n  \"title\": \"\ud83d\udcdd REQUIREMENT CHANGE: Add LinkedIn Support\",\n  \"body\": \"## Change Summary\\n\\n**Added:** LinkedIn sharing support\\n\n  **Reason:** Marketing team identified LinkedIn as #2 platform for our\n  enterprise users (45% share rate vs 20% for Twitter)\\n\\n## Impact Analysis\\n\\n\n  **Scope:** +1 social platform integration\\n**Effort:** ~2 additional days\\n\n  **Risk:** Low - similar to Twitter integration\\n**Timeline:** Still achievable\n  within 4-week sprint\\n\\n## What Changes\\n\\n- Backend: Add LinkedIn OAuth flow\\n\n  - Frontend: Add LinkedIn button to share dialog\\n- Design: Sam to provide LinkedIn\n  button variant\\n- QA: Additional test cases for LinkedIn flow\\n\\n## Team Input\n  Needed\\n\\nPlease review and flag any concerns by EOD tomorrow.\\n\\n**Updated\n  Timeline:** Week 3 implementation now includes LinkedIn\",\n  \"priority\": \"high\",\n  \"theme\": \"requirement-change\",\n  \"tags\": [\"requirements\", \"scope-change\", \"linkedin\"],\n  \"sender\": {\n    \"name\": \"Emma Rodriguez\",\n    \"role\": \"Product Manager\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre> <p>Alex (iOS Developer, using Claude):</p> <pre><code>Alex: \"I saw the LinkedIn requirement change. That's fine, I can accommodate it.\nPublishing my acknowledgment.\"\n\n# Notification sent:\n{\n  \"channel\": \"project-social-sharing\",\n  \"title\": \"\ud83d\udc4d iOS: LinkedIn Change Acknowledged\",\n  \"body\": \"Reviewed the LinkedIn requirement change. No issues from iOS perspective.\n  \\n\\nEstimate: +8 hours for LinkedIn SDK integration.\\n\\n**Status:** No timeline\n  impact, still on track for Week 3 delivery.\",\n  \"priority\": \"medium\",\n  \"theme\": \"requirement-ack\",\n  \"tags\": [\"ios\", \"acknowledged\"],\n  \"in_reply_to\": \"msg-linkedin-change\",\n  \"sender\": {\n    \"name\": \"Alex Chen\",\n    \"role\": \"iOS Developer\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre> <p>Maria (Android Developer, using ChatGPT):</p> <pre><code>Maria: \"Check project updates from today\"\n\nChatGPT: \"Emma added LinkedIn sharing support as a requirement change. Alex\nalready acknowledged it's fine for iOS (+8 hours). You should review and\nacknowledge for Android.\"\n\nMaria: \"Acknowledge the LinkedIn change for Android\"\n\n# Notification sent:\n{\n  \"channel\": \"project-social-sharing\",\n  \"title\": \"\ud83d\udc4d Android: LinkedIn Change Acknowledged\",\n  \"body\": \"Reviewed LinkedIn requirement. All good from Android side.\\n\\n\n  Estimate: +6 hours (LinkedIn SDK is easier on Android).\\n\\n**Status:** On\n  track for Week 3 delivery.\",\n  \"priority\": \"medium\",\n  \"theme\": \"requirement-ack\",\n  \"tags\": [\"android\", \"acknowledged\"],\n  \"in_reply_to\": \"msg-linkedin-change\"\n}\n</code></pre>"},{"location":"use-cases/project-updates/#week-3-risk-alert","title":"Week 3: Risk Alert","text":"<p>Chris (Backend Developer, using ChatGPT):</p> <pre><code>Chris: \"I discovered an issue with Facebook's API that could delay us. Publish\na risk alert.\"\n\n# Notification sent:\n{\n  \"channel\": \"project-social-sharing\",\n  \"title\": \"\u26a0\ufe0f RISK: Facebook API Deprecation Issue\",\n  \"body\": \"## Risk Identified\\n\\n**Issue:** Facebook deprecated the Graph API\n  endpoint we planned to use. New endpoint requires additional app review process.\\n\\n\n  ## Impact\\n\\n**Timeline Risk:** Potential 1-week delay if app review takes full\n  time\\n**Workaround:** Can use alternative endpoint with slightly degraded UX\\n\\n\n  ## Mitigation Options\\n\\n**Option 1:** Submit app review immediately (may delay\n  1 week)\\n**Option 2:** Use alternative endpoint (launches on time, slightly\n  worse UX)\\n**Option 3:** Skip Facebook, launch with Twitter/LinkedIn only (reduced\n  scope)\\n\\n## Recommendation\\n\\nOption 2: Use alternative endpoint to meet launch\n  timeline. Submit app review in parallel for future improvement.\\n\\n**Need decision\n  by EOD today to stay on track.**\",\n  \"priority\": \"high\",\n  \"theme\": \"project-risk\",\n  \"tags\": [\"risk\", \"facebook\", \"needs-decision\"],\n  \"sender\": {\n    \"name\": \"Chris Anderson\",\n    \"role\": \"Backend Engineer\",\n    \"ai_tool\": \"ChatGPT\"\n  }\n}\n</code></pre> <p>Emma (Product Manager responds within 30 minutes):</p> <pre><code># Notification sent:\n{\n  \"channel\": \"project-social-sharing\",\n  \"title\": \"\u2705 DECISION: Use Alternative Facebook Endpoint\",\n  \"body\": \"## Decision\\n\\nApproved Option 2: Use alternative Facebook endpoint\n  to maintain launch timeline.\\n\\n## Rationale\\n\\n- Launch deadline is critical\n  for Q1 OKRs\\n- UX degradation is minor (extra tap vs. one tap)\\n- Can improve\n  later after app review\\n\\n## Action Items\\n\\n- Chris: Implement alternative\n  endpoint\\n- Emma: Submit Facebook app review in parallel\\n- QA: Test alternative\n  flow\\n\\nTimeline remains unchanged. Launching Week 4 as planned. \u2705\",\n  \"priority\": \"high\",\n  \"theme\": \"project-decision\",\n  \"tags\": [\"decision\", \"resolved\"],\n  \"in_reply_to\": \"msg-risk-facebook\",\n  \"sender\": {\n    \"name\": \"Emma Rodriguez\",\n    \"role\": \"Product Manager\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre> <p>Sarah (CEO, checking project status that evening):</p> <pre><code>Sarah: \"Any risks on the social sharing project?\"\n\nGemini: \"A risk was identified and resolved today. Facebook API deprecation\ncould have caused a 1-week delay, but Emma made a quick decision to use an\nalternative endpoint with slightly degraded UX. The project remains on track\nfor Week 4 launch. The team is handling it well.\"\n\nSarah: \"Good decision. Glad Emma caught that early.\"\n</code></pre>"},{"location":"use-cases/project-updates/#week-4-launch-milestone","title":"Week 4: Launch Milestone","text":"<p>Jordan (QA Lead, using ChatGPT):</p> <pre><code>Jordan: \"All tests passed! Publish launch clearance notification.\"\n\n# Notification sent:\n{\n  \"channel\": \"project-social-sharing\",\n  \"title\": \"\ud83c\udf89 QA COMPLETE: Cleared for Launch!\",\n  \"body\": \"## QA Status: \u2705 PASS\\n\\nAll test cases completed successfully. Social\n  sharing feature ready for production launch!\\n\\n## Test Results\\n\\n- Functional\n  tests: 47/47 passed \u2705\\n- Integration tests: 23/23 passed \u2705\\n- Edge cases:\n  12/12 passed \u2705\\n- Performance: Meets targets \u2705\\n- Accessibility: WCAG AA\n  compliant \u2705\\n\\n## Platforms Tested\\n\\n- iOS: 15.0, 16.0, 17.0 \u2705\\n- Android:\n  11, 12, 13, 14 \u2705\\n\\n## Social Platforms Verified\\n\\n- Facebook: \u2705\\n- Twitter:\n  \u2705\\n- LinkedIn: \u2705\\n- Instagram: \u2705\\n\\n## Known Issues\\n\\nNone! Ready to ship.\n  \ud83d\ude80\\n\\n**Recommendation:** Cleared for production launch.\",\n  \"priority\": \"high\",\n  \"theme\": \"milestone-achieved\",\n  \"tags\": [\"qa\", \"launch-ready\", \"milestone\"],\n  \"sender\": {\n    \"name\": \"Jordan Kim\",\n    \"role\": \"QA Lead\",\n    \"ai_tool\": \"ChatGPT\"\n  }\n}\n</code></pre> <p>Emma (Product Manager launches to production):</p> <pre><code># Notification sent:\n{\n  \"channel\": \"project-social-sharing\",\n  \"title\": \"\ud83d\ude80 LAUNCHED: Social Sharing Live in Production!\",\n  \"body\": \"## \ud83c\udf8a Launch Announcement\\n\\nSocial sharing feature is now LIVE in\n  production for all users!\\n\\n## What We Delivered\\n\\n\u2705 One-tap sharing to\n  Facebook, Twitter, LinkedIn, Instagram\\n\u2705 Beautiful auto-generated share cards\\n\n  \u2705 Dark mode support\\n\u2705 Analytics tracking\\n\u2705 iOS + Android support\\n\\n##\n  Project Summary\\n\\n- **Timeline:** 4 weeks (on time!) \u2705\\n- **Scope:** Original\n  + LinkedIn (scope increase handled smoothly)\\n- **Quality:** All tests passed,\n  zero critical bugs\\n- **Team:** 8 people across 3 time zones\\n\\n## Thank You!\\n\\n\n  Incredible work by:\\n- Alex (iOS)\\n- Maria (Android)\\n- Chris (Backend)\\n\n  - Sam (Design)\\n- Jordan (QA)\\n- And supporting cast!\\n\\n## Metrics to Watch\\n\\n\n  - Share conversion rate (target: 5%)\\n- Social platform distribution\\n- User\n  feedback scores\\n\\nCelebrating this win! \ud83c\udf89\",\n  \"priority\": \"high\",\n  \"theme\": \"project-launched\",\n  \"tags\": [\"launched\", \"milestone\", \"celebration\"],\n  \"sender\": {\n    \"name\": \"Emma Rodriguez\",\n    \"role\": \"Product Manager\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre> <p>All stakeholders see the celebration:</p> <p>Sarah (CEO, using Gemini): <pre><code>Sarah: \"What's new today?\"\nGemini: \"Great news! The social sharing feature just launched in production!\nThe team delivered on time despite adding LinkedIn support mid-sprint. All QA\ntests passed. Emma is tracking share conversion rate with a 5% target.\"\n</code></pre></p> <p>Michael (CFO, using ChatGPT): <pre><code>Michael: \"Did the social sharing project stay on budget?\"\nChatGPT: \"Yes! It launched today, on time and presumably on budget. The team\ncompleted it in the planned 4 weeks despite adding LinkedIn support mid-sprint.\nThe project channel shows smooth execution with early risk mitigation.\"\n</code></pre></p>"},{"location":"use-cases/project-updates/#benefits-demonstrated","title":"Benefits Demonstrated","text":""},{"location":"use-cases/project-updates/#transparent-progress-visibility","title":"\ud83d\udcca Transparent Progress Visibility","text":"<ul> <li>Before: Executives learn about projects in weekly status meetings (7-day lag)</li> <li>After: Real-time visibility into progress, risks, and milestones</li> <li>Impact: Executives can make informed decisions immediately</li> </ul>"},{"location":"use-cases/project-updates/#requirement-change-propagation_1","title":"\ud83c\udfaf Requirement Change Propagation","text":"<ul> <li>LinkedIn requirement change reached entire team in minutes</li> <li>All team members acknowledged the change</li> <li>No one continued working on outdated specs</li> </ul>"},{"location":"use-cases/project-updates/#early-risk-detection","title":"\u26a0\ufe0f Early Risk Detection","text":"<ul> <li>Chris identified Facebook API risk in Week 3 (1 week before launch)</li> <li>Emma made decision within 30 minutes</li> <li>Project stayed on track instead of surprise delay at launch</li> </ul>"},{"location":"use-cases/project-updates/#team-morale-boost","title":"\ud83c\udf89 Team Morale Boost","text":"<ul> <li>Milestones celebrated publicly (design completion, QA pass, launch)</li> <li>Achievements visible to executives</li> <li>Team recognition automatic</li> </ul>"},{"location":"use-cases/project-updates/#reduced-meeting-overhead","title":"\ud83e\udd1d Reduced Meeting Overhead","text":"<ul> <li>No need for daily status update meetings</li> <li>Weekly exec briefings eliminated (self-service via AI assistants)</li> <li>More time for actual work</li> </ul>"},{"location":"use-cases/project-updates/#implementation-guide","title":"Implementation Guide","text":""},{"location":"use-cases/project-updates/#1-create-project-channel","title":"1. Create Project Channel","text":"<pre><code># For each project or sprint\n\"Create a channel called 'project-[name]' for project updates\"\n</code></pre>"},{"location":"use-cases/project-updates/#2-subscribe-stakeholders","title":"2. Subscribe Stakeholders","text":"<pre><code># Team members (all updates)\n\"Subscribe me to project-[name] channel\"\n\n# Executives (major updates only)\n\"Subscribe me to project-[name], high priority only\"\n\n# Interested parties (milestones only)\n\"Subscribe to project-[name], theme=milestone-achieved\"\n</code></pre>"},{"location":"use-cases/project-updates/#3-establish-update-cadence","title":"3. Establish Update Cadence","text":"<pre><code>**Sprint Kickoff:** High priority, project-kickoff theme\n**Weekly Status:** Medium priority, status-update theme\n**Milestones:** High priority, milestone-achieved theme\n**Risks:** High priority, project-risk theme\n**Requirement Changes:** High priority, requirement-change theme\n**Launch:** High priority, project-launched theme\n</code></pre>"},{"location":"use-cases/project-updates/#4-define-notification-themes","title":"4. Define Notification Themes","text":"<pre><code>\"project-kickoff\"      - Sprint/project start\n\"status-update\"        - Regular progress updates\n\"milestone-achieved\"   - Major deliverables completed\n\"project-risk\"         - Risks and blockers identified\n\"requirement-change\"   - Scope or requirement changes\n\"project-decision\"     - Key decisions made\n\"project-launched\"     - Feature/project shipped\n\"project-retrospective\" - Post-mortem insights\n</code></pre>"},{"location":"use-cases/project-updates/#project-communication-patterns","title":"Project Communication Patterns","text":""},{"location":"use-cases/project-updates/#weekly-status-update","title":"Weekly Status Update","text":"<pre><code>{\n  \"title\": \"Week [N] Status: [Project Name]\",\n  \"body\": \"## Progress This Week\\n\\n- [Completed items]\\n\\n## Next Week Goals\\n\\n\n  - [Upcoming work]\\n\\n## Risks/Blockers\\n\\n- [Issues or none]\\n\\n## Timeline\\n\\n\n  \u2705 On track / \u26a0\ufe0f At risk / \ud83d\udea8 Delayed\",\n  \"priority\": \"medium\",\n  \"theme\": \"status-update\"\n}\n</code></pre>"},{"location":"use-cases/project-updates/#milestone-achievement","title":"Milestone Achievement","text":"<pre><code>{\n  \"title\": \"\u2705 Milestone: [Achievement]\",\n  \"body\": \"## What We Delivered\\n\\n[Description]\\n\\n## Impact\\n\\n[Value provided]\\n\\n\n  ## Next Steps\\n\\n[What's next]\",\n  \"priority\": \"high\",\n  \"theme\": \"milestone-achieved\"\n}\n</code></pre>"},{"location":"use-cases/project-updates/#risk-alert","title":"Risk Alert","text":"<pre><code>{\n  \"title\": \"\u26a0\ufe0f RISK: [Risk Description]\",\n  \"body\": \"## Issue\\n\\n[Problem description]\\n\\n## Impact\\n\\n[Timeline/scope/quality\n  impact]\\n\\n## Mitigation Options\\n\\n[Options with pros/cons]\\n\\n## Recommendation\\n\\n\n  [Recommended path]\",\n  \"priority\": \"high\",\n  \"theme\": \"project-risk\"\n}\n</code></pre>"},{"location":"use-cases/project-updates/#launch-announcement","title":"Launch Announcement","text":"<pre><code>{\n  \"title\": \"\ud83d\ude80 LAUNCHED: [Feature Name]\",\n  \"body\": \"## What We Delivered\\n\\n[Features shipped]\\n\\n## Project Summary\\n\\n\n  [Timeline, team, stats]\\n\\n## Thank You\\n\\n[Team recognition]\\n\\n## What's Next\\n\\n\n  [Future plans]\",\n  \"priority\": \"high\",\n  \"theme\": \"project-launched\"\n}\n</code></pre>"},{"location":"use-cases/project-updates/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"use-cases/project-updates/#multi-project-portfolio-view","title":"Multi-Project Portfolio View","text":"<p>Executive asks: <pre><code>\"Show me the status of all active projects\"\n</code></pre></p> <p>AI retrieves from multiple project channels: <pre><code>## Active Projects Portfolio\n\n**Project A (Social Sharing):** \u2705 Launched this week\n**Project B (Search Redesign):** \ud83d\udfe2 On track, Week 2/4\n**Project C (Analytics Dashboard):** \u26a0\ufe0f At risk, API dependency blocker\n**Project D (Mobile Onboarding):** \ud83d\udfe2 On track, QA in progress\n\n3 of 4 projects on track. Project C needs attention.\n</code></pre></p>"},{"location":"use-cases/project-updates/#dependency-tracking","title":"Dependency Tracking","text":"<p>Project A depends on Project B:</p> <pre><code>{\n  \"channel\": \"project-a\",\n  \"title\": \"\u26a0\ufe0f DEPENDENCY: Waiting on Project B API\",\n  \"body\": \"Project A blocked until Project B delivers user API endpoint (expected\n  Week 3).\\n\\nNo action needed, just FYI for timeline planning.\",\n  \"priority\": \"medium\",\n  \"tags\": [\"dependency\", \"project-b\"]\n}\n</code></pre>"},{"location":"use-cases/project-updates/#budget-alert","title":"Budget Alert","text":"<p>Project Manager notices budget concern:</p> <pre><code>{\n  \"channel\": \"project-x\",\n  \"title\": \"\ud83d\udcb0 Budget Alert: 75% Spent at 60% Completion\",\n  \"body\": \"## Budget Status\\n\\n**Spent:** $75K / $100K (75%)\\n**Completion:**\n  60%\\n**Projection:** $125K total (25% over budget)\\n\\n## Cause\\n\\nAdditional\n  design iterations required.\\n\\n## Mitigation\\n\\nReducing scope: Deferring\n  advanced analytics to Phase 2.\",\n  \"priority\": \"high\",\n  \"theme\": \"project-risk\",\n  \"tags\": [\"budget\", \"risk\"]\n}\n</code></pre>"},{"location":"use-cases/project-updates/#best-practices","title":"Best Practices","text":""},{"location":"use-cases/project-updates/#do-this","title":"\u2705 Do This","text":"<ul> <li>Update regularly - Weekly status updates keep stakeholders informed</li> <li>Celebrate milestones - Public recognition boosts morale</li> <li>Alert early on risks - Don't wait until it's a crisis</li> <li>Include metrics - Numbers make progress tangible</li> <li>Acknowledge requirement changes - Ensure team sees scope changes</li> </ul>"},{"location":"use-cases/project-updates/#avoid-this","title":"\u274c Avoid This","text":"<ul> <li>Don't spam - Not every commit needs a notification</li> <li>Don't hide problems - Transparency builds trust</li> <li>Don't forget stakeholders - Executives need visibility too</li> <li>Don't skip launch celebration - Team deserves recognition</li> <li>Don't archive too quickly - Keep project history accessible</li> </ul>"},{"location":"use-cases/project-updates/#measuring-success","title":"Measuring Success","text":""},{"location":"use-cases/project-updates/#communication-metrics","title":"Communication Metrics","text":"<ul> <li>Stakeholder awareness: Do executives know project status in real-time?</li> <li>Meeting time reduction: Fewer status meetings needed?</li> <li>Surprise prevention: Risks identified early vs. at deadline?</li> <li>Team morale: Are achievements celebrated and visible?</li> </ul>"},{"location":"use-cases/project-updates/#expected-outcomes","title":"Expected Outcomes","text":"<ul> <li>\u2705 70% reduction in status meeting time</li> <li>\u2705 Real-time awareness for all stakeholders</li> <li>\u2705 Earlier risk detection (weeks vs. days before deadline)</li> <li>\u2705 Improved team morale from milestone celebrations</li> <li>\u2705 Better project predictability through transparency</li> </ul>"},{"location":"use-cases/project-updates/#integration-with-project-management-tools","title":"Integration with Project Management Tools","text":""},{"location":"use-cases/project-updates/#jira-azure-devops","title":"Jira / Azure DevOps","text":"<pre><code># Link project updates to epics/stories\n{\n  \"body\": \"Milestone: User API Complete\\n\\nJira Epic: PROJ-123\\nhttps://jira.../PROJ-123\"\n}\n</code></pre>"},{"location":"use-cases/project-updates/#roadmapping-tools-aha-productplan","title":"Roadmapping Tools (Aha!, ProductPlan)","text":"<pre><code># Update roadmap status via notifications\nNotify-MCP: \"Feature shipped\" \u2192 Update roadmap to \"Delivered\"\n</code></pre>"},{"location":"use-cases/project-updates/#time-tracking-harvest-toggl","title":"Time Tracking (Harvest, Toggl)","text":"<pre><code># Reference actual time vs. estimates\n{\n  \"body\": \"Sprint complete!\\n\\nEstimate: 80 hours\\nActual: 76 hours\\nVariance: -5% \u2705\"\n}\n</code></pre>"},{"location":"use-cases/project-updates/#next-steps","title":"Next Steps","text":"<ol> <li>Install Notify-MCP - 5-minute setup</li> <li>Create project channel - Start broadcasting updates</li> <li>Subscribe stakeholders - Ensure visibility</li> <li>Establish cadence - Define update patterns</li> </ol>"},{"location":"use-cases/project-updates/#related-use-cases","title":"Related Use Cases","text":"<ul> <li>Team Coordination - Day-to-day team collaboration</li> <li>Architecture Decisions - Technical decision broadcasting</li> <li>Real-World Scenarios - Complete workflow examples</li> </ul> <p>Ready to transform project communication? Get started with Notify-MCP today!</p>"},{"location":"use-cases/real-world-scenarios/","title":"Real-World Workflow Scenarios","text":"<p>This page provides complete, end-to-end examples of how Notify-MCP fits into actual development workflows\u2014from sprint planning to production deployment. These scenarios combine multiple use cases to show the full power of cross-platform AI collaboration.</p>"},{"location":"use-cases/real-world-scenarios/#scenario-1-full-sprint-workflow-4-week-cycle","title":"Scenario 1: Full Sprint Workflow (4-Week Cycle)","text":"<p>Team: 8 developers, 2 QA engineers, 1 product manager, 1 designer, 3 executives AI Platforms: Claude (4 people), ChatGPT (5 people), Gemini (2 people) Project: Build user notification preferences feature</p>"},{"location":"use-cases/real-world-scenarios/#week-0-pre-sprint-planning","title":"Week 0: Pre-Sprint Planning","text":"<p>Product Manager (ChatGPT) publishes sprint goal:</p> <pre><code>{\n  \"channel\": \"sprint-planning\",\n  \"title\": \"Sprint 24: User Notification Preferences\",\n  \"body\": \"## Goal\\n\\nUsers can customize notification preferences (email, push,\n  SMS) per notification type.\\n\\n## User Stories\\n- As a user, I can choose\n  notification channels\\n- As a user, I can set preferences per notification\n  type\\n- As a user, I can snooze notifications temporarily\\n\\n## Success Criteria\\n\n  - Preference UI in settings\\n- Backend API for saving preferences\\n- Respect\n  preferences in notification delivery\\n- Mobile + web support\",\n  \"priority\": \"high\",\n  \"theme\": \"sprint-planning\"\n}\n</code></pre> <p>Architect (Claude Code) reviews and publishes technical approach:</p> <pre><code>{\n  \"channel\": \"architecture\",\n  \"title\": \"ADR-024: Notification Preferences Architecture\",\n  \"body\": \"## Design\\n\\n**Database:**\\n- New table: user_notification_preferences\\n\n  - Columns: user_id, notification_type, channel_email, channel_push, channel_sms,\n  snooze_until\\n\\n**API:**\\n- GET /api/users/:id/notification-preferences\\n\n  - PUT /api/users/:id/notification-preferences\\n\\n**Implementation:**\\n- Notification\n  service checks preferences before delivery\\n- Frontend: Settings page component\\n\n  - Mobile: Native preference screen\\n\\n**Timeline:** 4 weeks feasible\",\n  \"priority\": \"high\",\n  \"theme\": \"architecture-decision\",\n  \"tags\": [\"adr\", \"notifications\", \"architecture\"]\n}\n</code></pre> <p>Everyone (all AI platforms) sees both notifications and aligns on approach.</p>"},{"location":"use-cases/real-world-scenarios/#week-1-development-begins","title":"Week 1: Development Begins","text":"<p>Day 1 - Backend (Claude Code):</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\u2705 Backend: Database Migration Complete\",\n  \"body\": \"Created user_notification_preferences table.\\n\\nMigration: 20250112_add_notification_preferences.sql\\n\n  - user_id (FK to users)\\n- notification_type (enum)\\n- channels (JSONB)\\n\n  - snooze_until (timestamp)\\n\\nReady for API implementation.\",\n  \"theme\": \"milestone-achieved\"\n}\n</code></pre> <p>Day 2 - Frontend (ChatGPT) sees backend progress:</p> <pre><code>Frontend Dev (ChatGPT): \"What's the backend status for notification preferences?\"\n\nChatGPT: \"The database migration was completed yesterday by the backend team\n(via Claude Code). The table structure is ready. However, the API endpoints\naren't implemented yet. The design shows:\n- GET /api/users/:id/notification-preferences\n- PUT /api/users/:id/notification-preferences\n\nYou should wait for the API implementation before starting frontend integration,\nor you can mock the API responses for now.\"\n\nFrontend Dev: \"Let's mock it and start the UI. Publish that I'm starting frontend work.\"\n</code></pre> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\ud83d\udc77 Frontend: Starting Preference UI (Mocked API)\",\n  \"body\": \"Beginning settings page UI component.\\n\\nUsing mocked API responses\n  until backend API is ready.\\n\\n**Design:** Following Figma mockups\\n**Stack:**\n  React + TypeScript\\n**ETA:** Friday\",\n  \"theme\": \"status-update\"\n}\n</code></pre> <p>Day 3 - Design Update (Gemini):</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\ud83d\udcdd Design Change: Added Quiet Hours Feature\",\n  \"body\": \"## Design Update\\n\\nStakeholder feedback: Users want \\\"Quiet Hours\\\"\n  (no notifications 10 PM - 8 AM).\\n\\n## Changes\\n- Added quiet hours toggle\\n\n  - Time range selector\\n- Affects all notification channels\\n\\n**Impact:**\\n\n  - Backend: Add quiet_hours_start, quiet_hours_end columns\\n- Frontend: Add\n  quiet hours UI section\\n- Estimate: +1 day\\n\\n**Figma updated:** [link]\\n\\n\n  Please review and acknowledge.\",\n  \"priority\": \"high\",\n  \"theme\": \"requirement-change\",\n  \"tags\": [\"design-change\", \"quiet-hours\"]\n}\n</code></pre> <p>Backend + Frontend acknowledge:</p> <pre><code># Backend (Claude Code):\n{\n  \"title\": \"\ud83d\udc4d Backend Acknowledges Quiet Hours\",\n  \"body\": \"Will add quiet_hours_start/end to migration. No timeline impact.\",\n  \"in_reply_to\": \"msg-quiet-hours\"\n}\n\n# Frontend (ChatGPT):\n{\n  \"title\": \"\ud83d\udc4d Frontend Acknowledges Quiet Hours\",\n  \"body\": \"UI mockups look good. Will add quiet hours section. +4 hours estimate.\",\n  \"in_reply_to\": \"msg-quiet-hours\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#week-2-integration","title":"Week 2: Integration","text":"<p>Day 8 - Backend API Complete (Claude Code):</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\u2705 Backend API Ready for Integration\",\n  \"body\": \"## API Endpoints Implemented\\n\\n**GET /api/users/:id/notification-preferences**\\n\n  Returns user's current preferences.\\n\\n**PUT /api/users/:id/notification-preferences**\\n\n  Updates preferences (email, push, SMS, quiet hours).\\n\\n## Testing\\n- Unit\n  tests: 23/23 passing \u2705\\n- Integration tests: 8/8 passing \u2705\\n- API docs updated\\n\\n\n  ## Staging\\nDeployed to staging environment.\\n\\nFrontend team: Ready for integration!\",\n  \"priority\": \"high\",\n  \"theme\": \"milestone-achieved\",\n  \"tags\": [\"backend\", \"api\", \"integration-ready\"]\n}\n</code></pre> <p>Frontend switches from mocked to real API:</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\ud83d\udd04 Frontend: Switching to Real API\",\n  \"body\": \"Removing mocked API, integrating with backend staging endpoints.\\n\\n\n  Testing against staging now. Will update with any issues.\",\n  \"theme\": \"status-update\"\n}\n</code></pre> <p>Day 9 - Integration Issue (ChatGPT):</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\ud83d\udea7 BLOCKER: API Returns 500 for Quiet Hours\",\n  \"body\": \"## Problem\\n\\nPUT request fails when quiet_hours_start = quiet_hours_end\n  (user disables quiet hours).\\n\\n**Error:** 500 Internal Server Error\\n\n  **Expected:** Accept null or same time to disable feature\\n\\n## Reproduction\\n\n  curl -X PUT .../preferences -d '{\\\"quiet_hours_start\\\": null, \\\"quiet_hours_end\\\": null}'\\n\\n\n  Backend team: Can you investigate?\",\n  \"priority\": \"high\",\n  \"theme\": \"blocker\",\n  \"tags\": [\"blocker\", \"api\", \"quiet-hours\"]\n}\n</code></pre> <p>Backend fixes within 2 hours (Claude Code):</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\ud83d\udd27 Fix Deployed: Quiet Hours Null Handling\",\n  \"body\": \"## Fix\\n\\nUpdated API to accept null for quiet_hours_* fields.\\n\\n\n  ## Changes\\n- Added null validation\\n- Updated tests\\n- Deployed to staging\\n\\n\n  Frontend: Please retry. Should work now.\",\n  \"priority\": \"high\",\n  \"theme\": \"blocker-resolved\",\n  \"in_reply_to\": \"msg-blocker-quiet-hours\"\n}\n</code></pre> <p>Frontend confirms fix (ChatGPT):</p> <pre><code>{\n  \"title\": \"\u2705 Confirmed: Quiet Hours Working\",\n  \"body\": \"Tested null handling. Working perfectly now. Thanks for the quick fix!\",\n  \"in_reply_to\": \"msg-fix-quiet-hours\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#week-3-mobile-implementation-qa","title":"Week 3: Mobile Implementation &amp; QA","text":"<p>Mobile Developer (Claude Code):</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\ud83d\udcf1 Mobile: iOS + Android Implementation Complete\",\n  \"body\": \"## Mobile Implementation\\n\\n**iOS:**\\n- Native SwiftUI preference\n  screen\\n- Push notification permission handling\\n- Quiet hours native time picker\\n\\n\n  **Android:**\\n- Material Design preference screen\\n- FCM notification channel\n  setup\\n- Quiet hours implemented\\n\\n## Testing\\n- Unit tests passing \u2705\\n\n  - Manual testing complete \u2705\\n\\nReady for QA!\",\n  \"theme\": \"milestone-achieved\",\n  \"tags\": [\"mobile\", \"ios\", \"android\"]\n}\n</code></pre> <p>QA Lead (ChatGPT) begins testing:</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\ud83e\uddea QA: Testing Started\",\n  \"body\": \"## Test Plan\\n\\n- Web UI functional testing\\n- Mobile (iOS + Android)\n  testing\\n- API endpoint validation\\n- Edge cases (timezones, null values)\\n\n  - Cross-device sync testing\\n\\n**ETA:** 3 days\\n\\nWill report issues as they're found.\",\n  \"theme\": \"status-update\"\n}\n</code></pre> <p>Day 16 - QA finds bug (ChatGPT):</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\ud83d\udc1b Bug: Quiet Hours Not Respecting Timezones\",\n  \"body\": \"## Issue\\n\\nQuiet hours work in UTC, not user's local timezone.\\n\\n\n  ## Reproduction\\n1. Set quiet hours 10 PM - 8 AM (PST)\\n2. Notification sent\n  at 11 PM PST\\n3. Notification delivered (should be blocked)\\n\\n## Expected\\n\n  Quiet hours should respect user's timezone.\\n\\n**Priority:** High (core feature\n  broken)\",\n  \"priority\": \"high\",\n  \"theme\": \"bug\",\n  \"tags\": [\"bug\", \"timezone\", \"quiet-hours\"]\n}\n</code></pre> <p>Backend fixes (Claude Code):</p> <pre><code>{\n  \"title\": \"\ud83d\udd27 Fix: Timezone Support for Quiet Hours\",\n  \"body\": \"## Fix\\n\\n- Added user_timezone field\\n- Updated quiet hours logic\n  to convert to user's timezone\\n- Added timezone tests\\n\\n**Deployed to staging.**\\n\\n\n  QA: Please retest.\",\n  \"priority\": \"high\",\n  \"in_reply_to\": \"msg-bug-timezone\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#week-4-launch-preparation","title":"Week 4: Launch Preparation","text":"<p>Day 22 - QA Complete (ChatGPT):</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\u2705 QA COMPLETE: Cleared for Launch\",\n  \"body\": \"## QA Summary\\n\\n**Total Tests:** 156\\n- Functional: 89/89 \u2705\\n\n  - Integration: 34/34 \u2705\\n- Edge cases: 22/22 \u2705\\n- Mobile: 11/11 \u2705\\n\\n**Bugs\n  Found:** 3 (all fixed and retested)\\n\\n## Test Coverage\\n- Web UI \u2705\\n- Mobile\n  (iOS + Android) \u2705\\n- API endpoints \u2705\\n- Timezones \u2705\\n- Null/edge cases \u2705\\n\\n\n  **Status:** APPROVED FOR PRODUCTION LAUNCH \ud83d\ude80\",\n  \"priority\": \"high\",\n  \"theme\": \"milestone-achieved\",\n  \"tags\": [\"qa\", \"launch-ready\"]\n}\n</code></pre> <p>Product Manager launches (ChatGPT):</p> <pre><code>{\n  \"channel\": \"sprint-24\",\n  \"title\": \"\ud83d\ude80 LAUNCHED: Notification Preferences Live!\",\n  \"body\": \"## \ud83c\udf89 Launch Announcement\\n\\nUser notification preferences feature\n  is now LIVE in production!\\n\\n## What We Delivered\\n\\n\u2705 Email/Push/SMS preference\n  toggles\\n\u2705 Per-notification-type preferences\\n\u2705 Quiet hours with timezone\n  support\\n\u2705 Web + iOS + Android support\\n\u2705 156 tests, zero critical bugs\\n\\n\n  ## Sprint Summary\\n\\n- **Timeline:** 4 weeks (on time!) \u2705\\n- **Scope:** Added\n  quiet hours mid-sprint \u2705\\n- **Quality:** 156 tests passing, 3 bugs found\n  and fixed\\n- **Team:** 12 people across 3 AI platforms\\n\\n## Team Recognition\\n\\n\n  Incredible collaboration across Claude, ChatGPT, and Gemini users!\\n\\n**Thank\n  you:**\\n- Backend team (Claude Code)\\n- Frontend team (ChatGPT)\\n- Mobile\n  team (Claude Code)\\n- QA team (ChatGPT)\\n- Design (Gemini)\\n\\nCelebrating\n  this cross-platform collaboration win! \ud83c\udf8a\",\n  \"priority\": \"high\",\n  \"theme\": \"project-launched\",\n  \"tags\": [\"launched\", \"celebration\"]\n}\n</code></pre> <p>Executives (Gemini) see the success:</p> <pre><code>Executive (Gemini): \"What projects launched this week?\"\n\nGemini: \"Great news! The notification preferences feature launched successfully\ntoday. The team delivered on time despite adding a quiet hours feature mid-sprint.\nKey highlights:\n\n- 4-week sprint completed on schedule\n- 156 tests passing, zero critical bugs in production\n- Cross-platform team collaboration (Claude, ChatGPT, Gemini users)\n- Smooth execution with early risk identification and mitigation\n\nThis demonstrates excellent team coordination and quality engineering practices.\"\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#scenario-2-incident-response-workflow","title":"Scenario 2: Incident Response Workflow","text":"<p>Timeline: Saturday 2:47 AM \u2192 3:15 AM (28-minute incident)</p>"},{"location":"use-cases/real-world-scenarios/#247-am-detection-automated-via-claude","title":"2:47 AM: Detection (Automated via Claude)","text":"<pre><code># Monitoring system publishes alert\n{\n  \"channel\": \"incidents\",\n  \"title\": \"\ud83d\udea8 P0: Payment Service Down\",\n  \"body\": \"**Error rate:** 0% \u2192 97% in 2 minutes\\n**Impact:** All payments failing\\n\n  **Affected:** Production payment API\",\n  \"priority\": \"critical\",\n  \"theme\": \"incident-alert\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#249-am-first-response-on-call-sre-chatgpt","title":"2:49 AM: First Response (On-Call SRE, ChatGPT)","text":"<pre><code>{\n  \"title\": \"\ud83d\udc40 Acknowledged - Investigating\",\n  \"body\": \"**Owner:** Sarah Chen (On-Call SRE)\\n**Status:** Investigating\\n\n  **ETA:** 5 minutes\",\n  \"theme\": \"incident-update\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#254-am-root-cause-chatgpt","title":"2:54 AM: Root Cause (ChatGPT)","text":"<pre><code>{\n  \"title\": \"\ud83d\udd0d Root Cause: Stripe API Rate Limit\",\n  \"body\": \"## Cause\\n\\nHit Stripe API rate limit due to retry storm.\\n\\n##\n  Mitigation\\n- Disable automatic retries\\n- Implement backoff\\n- Contact Stripe\n  for rate increase\\n\\n**Immediate action:** Disabling retries now.\",\n  \"theme\": \"incident-update\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#257-am-backup-engineer-joins-claude-code","title":"2:57 AM: Backup Engineer Joins (Claude Code)","text":"<pre><code>Backend Engineer (Claude Code): \"Check current incidents\"\n\nClaude: \"P0 incident ongoing. Sarah identified root cause: Stripe rate limit\nfrom retry storm. She's disabling retries now. You can help by implementing\nexponential backoff.\"\n\nBackend Engineer: \"I'm on it. Publishing that I'm helping.\"\n\n{\n  \"title\": \"\ud83d\udcaa Backup Engineer Helping\",\n  \"body\": \"Implementing exponential backoff while Sarah handles immediate mitigation.\",\n  \"theme\": \"incident-update\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#301-am-mitigation-complete-chatgpt","title":"3:01 AM: Mitigation Complete (ChatGPT)","text":"<pre><code>{\n  \"title\": \"\u2705 Retries Disabled - Error Rate Dropping\",\n  \"body\": \"**Status:** Error rate: 97% \u2192 12%\\n**Recovery:** In progress\\n\n  **Monitoring:** Watching Stripe rate limit metrics\",\n  \"theme\": \"incident-update\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#305-am-long-term-fix-claude-code","title":"3:05 AM: Long-term Fix (Claude Code)","text":"<pre><code>{\n  \"title\": \"\ud83d\udd27 Exponential Backoff Implemented\",\n  \"body\": \"PR #456: Add exponential backoff to Stripe API calls\\n\\nPrevents\n  future retry storms.\\n\\n**Deployed to staging for testing.**\",\n  \"theme\": \"incident-update\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#315-am-incident-resolved-chatgpt","title":"3:15 AM: Incident Resolved (ChatGPT)","text":"<pre><code>{\n  \"title\": \"\u2705 RESOLVED: Payment Service Recovered\",\n  \"body\": \"## Resolution\\n\\n**Duration:** 28 minutes\\n**Cause:** Stripe rate\n  limit hit by retry storm\\n**Fix:** Disabled retries, implemented backoff\\n\\n\n  ## Metrics\\n- Error rate: 0% \u2705\\n- Payment success rate: 100% \u2705\\n\\n**Post-mortem:**\n  Monday 10 AM\",\n  \"priority\": \"high\",\n  \"theme\": \"incident-resolved\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#key-benefits-demonstrated","title":"Key Benefits Demonstrated:","text":"<ul> <li>Cross-platform war room: Sarah (ChatGPT) and backup engineer (Claude Code) coordinated seamlessly</li> <li>Complete timeline: All actions timestamped for post-mortem</li> <li>Fast response: 28-minute resolution despite 2 AM timing</li> <li>No context loss: Complete incident history available instantly</li> </ul>"},{"location":"use-cases/real-world-scenarios/#scenario-3-distributed-team-daily-workflow","title":"Scenario 3: Distributed Team Daily Workflow","text":"<p>Team: 6 developers across 3 continents (Japan, Germany, California)</p>"},{"location":"use-cases/real-world-scenarios/#900-am-jst-japan-morning-updates","title":"9:00 AM JST (Japan) - Morning Updates","text":"<p>Yuki (Tokyo, ChatGPT):</p> <pre><code>{\n  \"channel\": \"team-daily\",\n  \"title\": \"Daily Update - Yuki (Tokyo)\",\n  \"body\": \"**Yesterday:** Completed user API endpoints\\n**Today:** Starting\n  authentication middleware\\n**Blockers:** None\\n\\n**Handoff to Europe:** API\n  endpoints ready for frontend integration\",\n  \"theme\": \"daily-standup\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#900-am-cet-germany-picks-up-work","title":"9:00 AM CET (Germany) - Picks Up Work","text":"<p>Hans (Munich, Gemini):</p> <pre><code>Hans: \"What's new from the Tokyo team?\"\n\nGemini: \"Yuki completed the user API endpoints overnight (your time). They're\nready for frontend integration. He's now starting authentication middleware.\nNo blockers.\"\n\nHans: \"Perfect! I'll start integrating the API.\"\n\n{\n  \"channel\": \"team-daily\",\n  \"title\": \"Daily Update - Hans (Munich)\",\n  \"body\": \"**Today:** Integrating user API (thanks Yuki!)\\n**Status:** Starting\n  frontend work\\n\\n**Handoff to Americas:** Will have frontend PR ready for\n  review by your morning\",\n  \"theme\": \"daily-standup\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#900-am-pst-california-continues-momentum","title":"9:00 AM PST (California) - Continues Momentum","text":"<p>Maria (San Francisco, Claude Code):</p> <pre><code>Maria: \"What's the team status today?\"\n\nClaude: \"Great progress! Yuki (Tokyo) completed user API, Hans (Munich) integrated\nit into frontend. Hans has a PR ready for your review. The team is making excellent\n24-hour progress across time zones.\"\n\nMaria: \"Reviewing Hans' PR now.\"\n\n{\n  \"channel\": \"team-daily\",\n  \"title\": \"Daily Update - Maria (SF)\",\n  \"body\": \"**Today:** Reviewing Hans' frontend PR\\n**Status:** On track\\n\\n\n  **Handoff to Tokyo:** Will merge PR and deploy to staging overnight for Yuki\n  to test tomorrow\",\n  \"theme\": \"daily-standup\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#result-24-hour-development-cycle","title":"Result: 24-Hour Development Cycle","text":"<ul> <li>Tokyo (Morning): Backend API implementation</li> <li>Europe (Morning): Frontend integration</li> <li>Americas (Morning): Code review and deployment</li> <li>Tokyo (Next Morning): Testing and next iteration</li> </ul> <p>All coordination happened via Notify-MCP across 3 AI platforms (ChatGPT, Gemini, Claude Code) with zero meetings required.</p>"},{"location":"use-cases/real-world-scenarios/#scenario-4-architecture-decision-evolution","title":"Scenario 4: Architecture Decision Evolution","text":"<p>Timeline: 2-week architectural discussion across multiple AI platforms</p>"},{"location":"use-cases/real-world-scenarios/#week-1-initial-proposal-claude-code","title":"Week 1: Initial Proposal (Claude Code)","text":"<pre><code>{\n  \"channel\": \"architecture\",\n  \"title\": \"Proposal: Migrate to Microservices\",\n  \"body\": \"## Proposal\\n\\nMigrate monolith to microservices.\\n\\n**Rationale:**\\n\n  - Scaling bottlenecks\\n- Team independence\\n- Technology flexibility\\n\\n\n  **Open for discussion and feedback.**\",\n  \"theme\": \"architecture-proposal\",\n  \"thread_id\": \"microservices-decision\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#week-1-research-input-perplexity-via-gemini","title":"Week 1: Research Input (Perplexity via Gemini)","text":"<pre><code>{\n  \"channel\": \"architecture\",\n  \"title\": \"Research: Microservices Migration Patterns\",\n  \"body\": \"Researched 50+ case studies of microservices migrations.\\n\\n**Key\n  Findings:**\\n- 60% report increased complexity\\n- 40% see performance degradation\n  initially\\n- Average migration: 18 months\\n\\n**Success factors:**\\n- Start\n  with strangler pattern\\n- Strong DevOps culture required\\n- API gateway essential\\n\\n\n  Recommendation: Consider modular monolith first.\",\n  \"theme\": \"research-findings\",\n  \"thread_id\": \"microservices-decision\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#week-1-developer-concerns-chatgpt","title":"Week 1: Developer Concerns (ChatGPT)","text":"<pre><code>{\n  \"channel\": \"architecture\",\n  \"title\": \"Concerns: Microservices Complexity\",\n  \"body\": \"**Concerns from dev team:**\\n\\n1. Distributed debugging harder\\n\n  2. Network latency between services\\n3. Need service mesh (Istio?) - steep\n  learning curve\\n4. Deployment complexity increases\\n\\nDo the benefits outweigh\n  these costs for our team size (8 devs)?\",\n  \"theme\": \"architecture-concern\",\n  \"thread_id\": \"microservices-decision\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#week-2-revised-proposal-claude-code","title":"Week 2: Revised Proposal (Claude Code)","text":"<pre><code>{\n  \"channel\": \"architecture\",\n  \"title\": \"REVISED: Modular Monolith First, Microservices Later\",\n  \"body\": \"## Revised Decision\\n\\nBased on research and team feedback:\\n\\n\n  **Phase 1 (6 months):** Modular monolith\\n- Clear module boundaries\\n- Internal\n  APIs between modules\\n- Preparation for future split\\n\\n**Phase 2 (12 months):**\n  Extract critical services\\n- Start with authentication service\\n- Strangler\n  pattern\\n- Gradual migration\\n\\n**Rationale:**\\n- Addresses complexity concerns\\n\n  - Lower risk approach\\n- Team can learn gradually\\n\\nFeedback welcome.\",\n  \"theme\": \"architecture-decision\",\n  \"thread_id\": \"microservices-decision\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#week-2-team-consensus-multiple-ai-platforms","title":"Week 2: Team Consensus (Multiple AI Platforms)","text":"<pre><code># Developer A (ChatGPT):\n{\n  \"title\": \"\ud83d\udc4d Approved: Modular Monolith Approach\",\n  \"body\": \"Much better! Addresses our concerns. +1\",\n  \"thread_id\": \"microservices-decision\"\n}\n\n# Developer B (Claude Code):\n{\n  \"title\": \"\ud83d\udc4d Agreed: Phased Approach Makes Sense\",\n  \"body\": \"Learning curve is more manageable this way. Support.\",\n  \"thread_id\": \"microservices-decision\"\n}\n\n# Architect (Gemini):\n{\n  \"title\": \"\u2705 DECISION FINALIZED: Modular Monolith \u2192 Microservices\",\n  \"body\": \"Consensus reached. Proceeding with modular monolith in Q1.\\n\\n\n  **ADR-025 published to wiki.**\",\n  \"theme\": \"architecture-decision\",\n  \"thread_id\": \"microservices-decision\"\n}\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#key-benefits-demonstrated_1","title":"Key Benefits Demonstrated:","text":"<ul> <li>Threaded discussion across 2 weeks stayed organized</li> <li>Multiple AI platforms (Claude, Gemini, ChatGPT, Perplexity) contributed</li> <li>Research informed decision (Perplexity research shaped final choice)</li> <li>Consensus building visible and trackable</li> <li>Complete decision history preserved for future reference</li> </ul>"},{"location":"use-cases/real-world-scenarios/#common-patterns-across-scenarios","title":"Common Patterns Across Scenarios","text":""},{"location":"use-cases/real-world-scenarios/#pattern-1-information-cascading","title":"Pattern 1: Information Cascading","text":"<pre><code>Person A (Platform 1) \u2192 Publishes insight\nPerson B (Platform 2) \u2192 Sees it, acts on it\nPerson C (Platform 3) \u2192 Builds on both\nResult: Seamless knowledge flow across platforms\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#pattern-2-asynchronous-collaboration","title":"Pattern 2: Asynchronous Collaboration","text":"<pre><code>Tokyo Morning \u2192 Makes progress, publishes update\nEurope Morning \u2192 Sees update, continues work\nAmericas Morning \u2192 Reviews, deploys\nNo synchronous meetings required \u2705\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#pattern-3-early-problem-detection","title":"Pattern 3: Early Problem Detection","text":"<pre><code>Week 1: Risk identified and published\nWeek 2: Team discusses mitigation options\nWeek 3: Decision made and implemented\nWeek 4: Launch succeeds with no surprises\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#pattern-4-cross-platform-threading","title":"Pattern 4: Cross-Platform Threading","text":"<pre><code>Initial post (Claude) \u2192 thread_id: \"discussion-x\"\nResponse (ChatGPT) \u2192 same thread_id\nFollow-up (Gemini) \u2192 same thread_id\nResult: Organized discussion across AI platforms\n</code></pre>"},{"location":"use-cases/real-world-scenarios/#best-practices-from-real-world-usage","title":"Best Practices from Real-World Usage","text":""},{"location":"use-cases/real-world-scenarios/#do-this","title":"\u2705 Do This","text":"<ul> <li>Tag consistently - Makes historical searches easier</li> <li>Use threads - Keep related discussions organized</li> <li>Publish early - Don't wait for perfect information</li> <li>Cross-reference - Link to related notifications</li> <li>Celebrate wins - Team morale matters</li> </ul>"},{"location":"use-cases/real-world-scenarios/#avoid-this","title":"\u274c Avoid This","text":"<ul> <li>Don't over-notify - Not every action needs a notification</li> <li>Don't skip context - New team members need background</li> <li>Don't forget handoffs - Timezone transitions need explicit communication</li> <li>Don't lose threads - Use thread_id to group related discussions</li> <li>Don't archive too quickly - Historical context is valuable</li> </ul>"},{"location":"use-cases/real-world-scenarios/#measuring-real-world-impact","title":"Measuring Real-World Impact","text":""},{"location":"use-cases/real-world-scenarios/#metrics-from-these-scenarios","title":"Metrics from These Scenarios","text":"<p>Sprint Workflow (Scenario 1): - Decision propagation: Instant (vs. days with meetings) - Blocker resolution: 2 hours (vs. next-day standup) - Cross-platform participation: 100% (Claude, ChatGPT, Gemini users aligned)</p> <p>Incident Response (Scenario 2): - MTTR: 28 minutes (vs. 2-3 hour industry average) - Cross-platform coordination: Seamless (ChatGPT + Claude Code) - Timeline completeness: 100% (perfect post-mortem data)</p> <p>Distributed Team (Scenario 3): - Time zone hand offs: Smooth (zero meeting overhead) - Development velocity: 24-hour cycles (work never stops) - Platform diversity: 3 AI platforms working together</p> <p>Architecture Decision (Scenario 4): - Decision quality: Improved (research from Perplexity informed choice) - Team buy-in: 100% (consensus visible and tracked) - Knowledge preservation: Complete (2-week discussion history intact)</p>"},{"location":"use-cases/real-world-scenarios/#next-steps","title":"Next Steps","text":"<ol> <li>Install Notify-MCP - Start with your first scenario</li> <li>Configure channels - Set up for your team's workflow</li> <li>Review API reference - Understand available tools</li> <li>Implement best practices - Follow proven patterns</li> </ol>"},{"location":"use-cases/real-world-scenarios/#related-resources","title":"Related Resources","text":"<ul> <li>Architecture Decisions - Document technical choices</li> <li>Team Coordination - Daily collaboration patterns</li> <li>Incident Response - Handle production issues</li> <li>Project Updates - Stakeholder communication</li> <li>Cross-Platform AI - Platform-independent collaboration</li> </ul> <p>Ready to transform your team's workflow? Get started with Notify-MCP today!</p>"},{"location":"use-cases/team-coordination/","title":"Team Coordination &amp; Communication","text":"<p>Problem: Distributed teams using different AI assistants work in isolation, missing status updates, blockers, and milestones. Daily standups and sync meetings can't keep everyone aligned in real-time, especially across time zones.</p> <p>Solution: Notify-MCP creates a persistent, cross-platform notification layer for team coordination, ensuring everyone stays synchronized regardless of which AI assistant they use or when they work.</p>"},{"location":"use-cases/team-coordination/#the-challenge","title":"The Challenge","text":"<p>Modern distributed teams face coordination breakdowns:</p> <ul> <li>Morning Team (Asia) makes progress, but Evening Team (Americas) doesn't see updates until next day</li> <li>Developer using Claude completes a critical task, but Developer using ChatGPT starts duplicate work</li> <li>Blocker discovered at 3 PM doesn't reach team members in different time zones until the next standup</li> <li>Milestone achieved gets lost in Slack threads and email chains</li> </ul> <p>This coordination friction causes:</p> <ul> <li>\u274c Duplicated work across team members</li> <li>\u274c Blocked team members waiting for information</li> <li>\u274c Missed deadlines due to poor visibility</li> <li>\u274c Low team morale from feeling disconnected</li> <li>\u274c Inefficient meetings spent catching up</li> </ul>"},{"location":"use-cases/team-coordination/#how-notify-mcp-solves-this","title":"How Notify-MCP Solves This","text":""},{"location":"use-cases/team-coordination/#real-time-status-updates","title":"Real-Time Status Updates","text":"<p>Team members publish status updates through their AI assistant, instantly visible to everyone.</p>"},{"location":"use-cases/team-coordination/#blocker-broadcasting","title":"Blocker Broadcasting","text":"<p>When someone gets blocked, the entire team is notified immediately\u2014not waiting for the next standup.</p>"},{"location":"use-cases/team-coordination/#milestone-celebrations","title":"Milestone Celebrations","text":"<p>Achievements are shared automatically, boosting team morale and visibility.</p>"},{"location":"use-cases/team-coordination/#cross-time-zone-coordination","title":"Cross-Time Zone Coordination","text":"<p>Asynchronous notifications ensure team members in different time zones stay informed without requiring overlapping work hours.</p>"},{"location":"use-cases/team-coordination/#platform-independence","title":"Platform Independence","text":"<p>Claude users, ChatGPT users, and Gemini users all see the same information stream.</p>"},{"location":"use-cases/team-coordination/#real-world-scenario","title":"Real-World Scenario","text":""},{"location":"use-cases/team-coordination/#scenario-distributed-team-building-payment-integration","title":"Scenario: Distributed Team Building Payment Integration","text":"<p>Team: 6 developers across 3 continents (Asia, Europe, Americas), using Claude, ChatGPT, and Gemini</p> <p>Project: Integrate Stripe payment processing into e-commerce platform</p> <p>Timeline: 2-week sprint</p>"},{"location":"use-cases/team-coordination/#day-1-sprint-kickoff","title":"Day 1: Sprint Kickoff","text":"<p>Emma (Product Owner, Europe, using Claude):</p> <pre><code>Emma: \"Create a channel called 'sprint-payments' and publish a notification\nabout sprint goals.\"\n\n# Notification sent:\n{\n  \"channel\": \"sprint-payments\",\n  \"title\": \"Sprint 23: Payment Integration Goals\",\n  \"body\": \"## Sprint Goals\\n\\n1. Stripe API integration\\n2. Payment UI\n  components\\n3. Error handling &amp; retry logic\\n4. Unit + integration tests\\n\\n\n  ## Success Criteria\\n- Process test payments successfully\\n- Handle declined\n  cards gracefully\\n- 90% code coverage\\n\\n## Team Assignments\\n- Yuki: Stripe API\n  backend\\n- Hans: Payment UI\\n- Maria: Error handling\\n- Dev: Testing infrastructure\",\n  \"priority\": \"high\",\n  \"theme\": \"sprint-kickoff\",\n  \"tags\": [\"sprint-23\", \"payments\", \"goals\"],\n  \"sender\": {\n    \"name\": \"Emma Rodriguez\",\n    \"role\": \"Product Owner\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre>"},{"location":"use-cases/team-coordination/#day-2-progress-update-from-asia-time-zone","title":"Day 2: Progress Update from Asia Time Zone","text":"<p>Yuki (Backend Engineer, Japan, using ChatGPT):</p> <pre><code># 9 AM JST (midnight in Europe/Americas)\nYuki: \"Publish a status update: I've completed the Stripe API integration\nfor payment creation. The endpoint is ready for frontend consumption.\"\n\n# Notification sent:\n{\n  \"channel\": \"sprint-payments\",\n  \"title\": \"\u2705 Stripe API Integration Complete\",\n  \"body\": \"Backend payment endpoint implemented:\\n\\n- POST /api/payments/create\\n\n  - Handles card tokenization\\n- Creates Stripe PaymentIntent\\n- Returns client_secret\n  for frontend\\n\\nEndpoint tested with Stripe test cards. Ready for frontend\n  integration.\\n\\n**Next:** Starting error handling for declined payments.\",\n  \"priority\": \"medium\",\n  \"theme\": \"status-update\",\n  \"tags\": [\"sprint-23\", \"backend\", \"completed\"],\n  \"sender\": {\n    \"name\": \"Yuki Tanaka\",\n    \"role\": \"Backend Engineer\",\n    \"ai_tool\": \"ChatGPT\"\n  }\n}\n</code></pre> <p>Hans (Frontend Engineer, Germany, using Gemini) - wakes up 8 hours later:</p> <pre><code># 9 AM CET\nHans: \"What's the latest status on the payment sprint?\"\n\nGemini: \"Yuki completed the Stripe API integration 8 hours ago! The backend\nendpoint is ready at POST /api/payments/create. You can start integrating it\ninto the payment UI. Yuki is now working on error handling for declined payments.\"\n\nHans: \"Perfect! I'll start the frontend integration right away.\"\n</code></pre>"},{"location":"use-cases/team-coordination/#day-3-blocker-encountered","title":"Day 3: Blocker Encountered","text":"<p>Hans (Frontend Engineer, Germany, using Gemini):</p> <pre><code># 2 PM CET (morning in Americas, evening in Asia)\nHans: \"I'm blocked. Publish a blocker notification about the payment UI.\"\n\n# Notification sent:\n{\n  \"channel\": \"sprint-payments\",\n  \"title\": \"\ud83d\udea7 BLOCKER: Stripe Elements Not Loading\",\n  \"body\": \"## Problem\\n\\nStripe Elements not rendering in payment form. Console\n  error: 'Invalid publishable key'\\n\\n## Impact\\n\\nBlocks payment UI development.\n  Can't proceed with card input component.\\n\\n## What I've Tried\\n- Verified\n  API key in .env\\n- Checked Stripe dashboard\\n- Tested in different browsers\\n\\n\n  ## Need Help\\n\\nNeed backend team to verify the Stripe publishable key configuration.\",\n  \"priority\": \"high\",\n  \"theme\": \"blocker\",\n  \"tags\": [\"sprint-23\", \"frontend\", \"blocker\"],\n  \"sender\": {\n    \"name\": \"Hans Mueller\",\n    \"role\": \"Frontend Engineer\",\n    \"ai_tool\": \"Gemini\"\n  }\n}\n</code></pre> <p>Yuki (Japan) sees the notification 3 hours later:</p> <pre><code># 11 PM JST\nYuki: \"Check notifications for my team.\"\n\nChatGPT: \"Hans published a blocker 3 hours ago. Stripe Elements aren't loading\ndue to an 'Invalid publishable key' error. He needs help verifying the backend\nStripe configuration.\"\n\nYuki: \"I see the issue! Publish a response notification.\"\n\n# Notification sent:\n{\n  \"channel\": \"sprint-payments\",\n  \"title\": \"\ud83d\udd27 Solution: Stripe Key Configuration\",\n  \"body\": \"Found the issue! The publishable key in the backend config is using\n  the test environment key, but the frontend is configured for production.\\n\\n\n  ## Fix\\n\\nUpdate frontend .env:\\n```\\nVITE_STRIPE_KEY=pk_test_51ABC...\\n```\\n\\n\n  The correct test key is in 1Password under 'Stripe Test Keys'.\\n\\nSorry for the\n  confusion!\",\n  \"priority\": \"high\",\n  \"theme\": \"blocker-resolved\",\n  \"tags\": [\"sprint-23\", \"resolved\"],\n  \"in_reply_to\": \"msg-blocker-123\",\n  \"sender\": {\n    \"name\": \"Yuki Tanaka\",\n    \"role\": \"Backend Engineer\",\n    \"ai_tool\": \"ChatGPT\"\n  }\n}\n</code></pre> <p>Hans (next morning):</p> <pre><code># 9 AM CET next day\nHans: \"Any updates on my blocker?\"\n\nGemini: \"Yes! Yuki responded 5 hours ago. The issue was a mismatch between test\nand production Stripe keys. You need to update your frontend .env with the test\nkey from 1Password. Yuki provided the exact environment variable name.\"\n\nHans: \"Excellent! That fixed it. Updating my status.\"\n</code></pre>"},{"location":"use-cases/team-coordination/#day-7-mid-sprint-milestone","title":"Day 7: Mid-Sprint Milestone","text":"<p>Maria (Backend Engineer, Mexico, using Claude):</p> <pre><code># 11 AM CST\nMaria: \"We've reached a milestone. Publish a celebration notification.\"\n\n# Notification sent:\n{\n  \"channel\": \"sprint-payments\",\n  \"title\": \"\ud83c\udf89 Milestone: First Successful Test Payment!\",\n  \"body\": \"## Achievement Unlocked\\n\\nWe just processed our first end-to-end\n  test payment!\\n\\n## What Works\\n- Frontend payment form \u2705\\n- Stripe API\n  integration \u2705\\n- Payment intent creation \u2705\\n- Card tokenization \u2705\\n\n  - Success/failure handling \u2705\\n\\n## Next Steps\\n- Edge case testing\\n\n  - Error message UX polish\\n- Integration test suite\\n\\nGreat teamwork everyone! \ud83d\udcaa\",\n  \"priority\": \"medium\",\n  \"theme\": \"milestone\",\n  \"tags\": [\"sprint-23\", \"milestone\", \"celebration\"],\n  \"sender\": {\n    \"name\": \"Maria Santos\",\n    \"role\": \"Backend Engineer\",\n    \"ai_tool\": \"Claude\"\n  }\n}\n</code></pre> <p>Team members across all time zones see the celebration:</p> <ul> <li>Yuki (Japan, evening): \"Awesome! Great team effort!\"</li> <li>Hans (Germany, afternoon): \"Proud of this team! \ud83d\ude80\"</li> <li>Emma (Europe): \"Fantastic progress! Sharing with stakeholders.\"</li> </ul>"},{"location":"use-cases/team-coordination/#day-10-sprint-retrospective-preparation","title":"Day 10: Sprint Retrospective Preparation","text":"<p>Emma (Product Owner, using Claude):</p> <pre><code>Emma: \"Summarize all notifications from the sprint-payments channel for our\nretrospective.\"\n\nClaude: \"Here's the sprint summary from Notify-MCP:\n\n## Sprint 23 Highlights\n\n**Total Notifications:** 24\n**Team Members Active:** 6\n**Blockers Encountered:** 3 (all resolved within 12 hours)\n**Milestones Achieved:** 4\n\n## Key Events:\n- Day 1: Sprint goals published\n- Day 2: Stripe API completed (Yuki)\n- Day 3: Blocker (Hans) resolved same day (Yuki)\n- Day 5: Payment UI completed (Hans)\n- Day 7: First successful test payment \ud83c\udf89\n- Day 9: Integration tests passing (Dev)\n- Day 10: Sprint goals achieved ahead of schedule\n\n## Team Collaboration:\n- Cross-timezone coordination worked smoothly\n- Blockers resolved quickly due to instant notifications\n- Milestone celebrations boosted team morale\"\n\nEmma: \"Perfect! This gives us concrete data for the retrospective.\"\n</code></pre>"},{"location":"use-cases/team-coordination/#benefits-demonstrated","title":"Benefits Demonstrated","text":""},{"location":"use-cases/team-coordination/#instant-coordination","title":"\u26a1 Instant Coordination","text":"<ul> <li>Before: Hans waits 16 hours for standup to report blocker</li> <li>After: Yuki sees blocker within 3 hours, unblocks Hans same day</li> <li>Impact: 13-hour reduction in blocker resolution time</li> </ul>"},{"location":"use-cases/team-coordination/#cross-time-zone-collaboration","title":"\ud83c\udf0d Cross-Time Zone Collaboration","text":"<ul> <li>Team in 3 continents (12-hour time difference)</li> <li>No overlapping work hours required</li> <li>Everyone stays informed asynchronously</li> <li>Progress continues 24/7</li> </ul>"},{"location":"use-cases/team-coordination/#platform-independence_1","title":"\ud83c\udfaf Platform Independence","text":"<ul> <li>Emma (Claude), Yuki (ChatGPT), Hans (Gemini) all synchronized</li> <li>No \"I didn't see that Slack message\" excuses</li> <li>Single source of truth across all AI platforms</li> </ul>"},{"location":"use-cases/team-coordination/#visibility-accountability","title":"\ud83d\udcca Visibility &amp; Accountability","text":"<ul> <li>Product owner sees real-time progress</li> <li>Team members aware of each other's work</li> <li>Automatic sprint history for retrospectives</li> <li>Reduced need for status meetings</li> </ul>"},{"location":"use-cases/team-coordination/#team-morale-boost","title":"\ud83e\udd1d Team Morale Boost","text":"<ul> <li>Milestone celebrations visible to everyone</li> <li>Achievements recognized immediately</li> <li>Team feels connected despite distance</li> <li>Psychological safety (asking for help is easy)</li> </ul>"},{"location":"use-cases/team-coordination/#implementation-guide","title":"Implementation Guide","text":""},{"location":"use-cases/team-coordination/#1-create-sprint-channel","title":"1. Create Sprint Channel","text":"<pre><code># At sprint kickoff\n\"Create a channel called 'sprint-[number]' for this sprint's coordination\"\n</code></pre>"},{"location":"use-cases/team-coordination/#2-subscribe-all-team-members","title":"2. Subscribe All Team Members","text":"<pre><code># Each team member:\n\"Subscribe me to sprint-[number] channel\"\n</code></pre>"},{"location":"use-cases/team-coordination/#3-establish-notification-patterns","title":"3. Establish Notification Patterns","text":""},{"location":"use-cases/team-coordination/#daily-status-updates","title":"Daily Status Updates","text":"<pre><code>Theme: \"status-update\"\nPriority: \"medium\"\nInclude: What was completed, what's next, any concerns\n</code></pre>"},{"location":"use-cases/team-coordination/#blockers","title":"Blockers","text":"<pre><code>Theme: \"blocker\"\nPriority: \"high\"\nInclude: Problem description, impact, what you've tried, what you need\n</code></pre>"},{"location":"use-cases/team-coordination/#milestones","title":"Milestones","text":"<pre><code>Theme: \"milestone\"\nPriority: \"medium\"\nInclude: What was achieved, team members involved, next steps\n</code></pre>"},{"location":"use-cases/team-coordination/#questions","title":"Questions","text":"<pre><code>Theme: \"question\"\nPriority: \"low\" or \"medium\"\nInclude: Clear question, context, urgency\n</code></pre>"},{"location":"use-cases/team-coordination/#4-set-team-norms","title":"4. Set Team Norms","text":"<ul> <li>Daily updates: Optional but encouraged</li> <li>Blockers: Must be published immediately (priority: high)</li> <li>Milestones: Celebrate together (boosts morale)</li> <li>Questions: Use medium priority unless urgent</li> </ul>"},{"location":"use-cases/team-coordination/#coordination-patterns","title":"Coordination Patterns","text":""},{"location":"use-cases/team-coordination/#daily-standup-replacement","title":"Daily Standup Replacement","text":"<p>Instead of synchronous standup:</p> <pre><code># Each team member publishes daily status\n{\n  \"theme\": \"daily-standup\",\n  \"body\": \"**Yesterday:** Completed payment API\\n**Today:** Starting error handling\\n\n  **Blockers:** None\"\n}\n</code></pre> <p>Team lead retrieves summary:</p> <pre><code>\"Show me all daily-standup notifications from the last 24 hours\"\n</code></pre> <p>Result: Complete standup picture without requiring meeting.</p>"},{"location":"use-cases/team-coordination/#handoff-between-time-zones","title":"Handoff Between Time Zones","text":"<p>End of day (Asia timezone):</p> <pre><code>{\n  \"theme\": \"timezone-handoff\",\n  \"body\": \"Handing off to Europe team. PR #234 ready for review. Blocker on\n  database migration resolved. Payment tests all passing.\"\n}\n</code></pre> <p>Start of day (Europe timezone):</p> <pre><code>\"Show me timezone-handoff notifications from the last 12 hours\"\n</code></pre>"},{"location":"use-cases/team-coordination/#sprint-planning-coordination","title":"Sprint Planning Coordination","text":"<p>Before sprint planning:</p> <pre><code># Product owner:\n{\n  \"theme\": \"sprint-planning-prep\",\n  \"body\": \"Please review stories in Jira SPRINT-45. Add your estimates and\n  flag any concerns before Friday's planning meeting.\"\n}\n</code></pre> <p>Team members respond with concerns:</p> <pre><code>{\n  \"theme\": \"sprint-planning-concern\",\n  \"in_reply_to\": \"msg-planning-123\",\n  \"body\": \"Story ABC-234 needs backend API first. Suggest moving to next sprint.\"\n}\n</code></pre>"},{"location":"use-cases/team-coordination/#advanced-coordination-scenarios","title":"Advanced Coordination Scenarios","text":""},{"location":"use-cases/team-coordination/#cross-team-dependencies","title":"Cross-Team Dependencies","text":"<p>Backend team blocks frontend:</p> <pre><code>{\n  \"channel\": \"cross-team-dependencies\",\n  \"title\": \"API Endpoint Delayed\",\n  \"body\": \"GET /api/users/:id will be ready Tuesday instead of Monday due to\n  schema changes. Frontend team: please adjust timeline accordingly.\",\n  \"priority\": \"high\",\n  \"tags\": [\"dependency\", \"backend\", \"frontend\"]\n}\n</code></pre>"},{"location":"use-cases/team-coordination/#feature-flag-toggles","title":"Feature Flag Toggles","text":"<p>DevOps enables new feature:</p> <pre><code>{\n  \"channel\": \"feature-flags\",\n  \"title\": \"Payment Integration Enabled in Staging\",\n  \"body\": \"Feature flag 'stripe_payments' enabled in staging environment. QA\n  team can begin testing.\",\n  \"priority\": \"medium\",\n  \"tags\": [\"feature-flag\", \"staging\", \"qa\"]\n}\n</code></pre>"},{"location":"use-cases/team-coordination/#on-call-rotation","title":"On-Call Rotation","text":"<p>DevOps handoff:</p> <pre><code>{\n  \"channel\": \"on-call\",\n  \"title\": \"On-Call Rotation: Maria \u2192 Dev\",\n  \"body\": \"On-call rotation handoff:\\n- No active incidents\\n- Database backup\n  completed successfully\\n- Monitoring: all green\\n\\nDev is now primary on-call.\",\n  \"priority\": \"medium\",\n  \"tags\": [\"on-call\", \"handoff\"]\n}\n</code></pre>"},{"location":"use-cases/team-coordination/#best-practices","title":"Best Practices","text":""},{"location":"use-cases/team-coordination/#do-this","title":"\u2705 Do This","text":"<ul> <li>Publish blockers immediately - Don't wait for standup</li> <li>Celebrate milestones - Boosts team morale</li> <li>Use consistent themes - Makes filtering easier</li> <li>Be specific in status updates - \"Completed payment API\" not \"Made progress\"</li> <li>Cross-time zone awareness - Publish handoffs when ending your day</li> </ul>"},{"location":"use-cases/team-coordination/#avoid-this","title":"\u274c Avoid This","text":"<ul> <li>Don't spam - Not every git commit needs a notification</li> <li>Don't use for chat - Notify-MCP is for important updates, not conversation</li> <li>Don't forget context - Include enough info for team members who weren't involved</li> <li>Don't skip priority - High for blockers, medium for status, low for FYI</li> <li>Don't ignore notifications - Check at start of each day</li> </ul>"},{"location":"use-cases/team-coordination/#measuring-success","title":"Measuring Success","text":""},{"location":"use-cases/team-coordination/#coordination-metrics","title":"Coordination Metrics","text":"<ul> <li>Blocker resolution time: How long from report to resolution?</li> <li>Meeting time reduction: Can daily standups be shorter/eliminated?</li> <li>Sprint predictability: Fewer surprises at sprint end?</li> <li>Team satisfaction: Do team members feel connected and informed?</li> </ul>"},{"location":"use-cases/team-coordination/#expected-outcomes","title":"Expected Outcomes","text":"<ul> <li>\u2705 50% reduction in blocker resolution time</li> <li>\u2705 30% less time in status meetings</li> <li>\u2705 Improved predictability in sprint completion</li> <li>\u2705 Higher team morale from milestone celebrations</li> <li>\u2705 Better work-life balance (no need for early/late meetings across time zones)</li> </ul>"},{"location":"use-cases/team-coordination/#integration-with-other-tools","title":"Integration with Other Tools","text":""},{"location":"use-cases/team-coordination/#jiraissue-trackers","title":"Jira/Issue Trackers","text":"<pre><code># Link notifications to Jira issues\n{\n  \"body\": \"Completed story ABC-123: Payment Integration\\n\\nJira: https://jira.company.com/browse/ABC-123\"\n}\n</code></pre>"},{"location":"use-cases/team-coordination/#slackteams","title":"Slack/Teams","text":"<ul> <li>Notify-MCP provides immediate AI assistant visibility</li> <li>Optionally forward critical notifications to Slack</li> <li>Use Notify-MCP for team coordination, Slack for discussion</li> </ul>"},{"location":"use-cases/team-coordination/#cicd-pipelines","title":"CI/CD Pipelines","text":"<pre><code># CI pipeline publishes deployment notification\n{\n  \"channel\": \"deployments\",\n  \"title\": \"Payment Service Deployed to Production\",\n  \"body\": \"Version 2.3.0 deployed successfully\\n\\nCommit: abc123\\nDeployed by: DevOps Bot\",\n  \"priority\": \"medium\"\n}\n</code></pre>"},{"location":"use-cases/team-coordination/#next-steps","title":"Next Steps","text":"<ol> <li>Install Notify-MCP - 5-minute setup</li> <li>Create sprint channel - Start coordinating</li> <li>Set team norms - Establish notification patterns</li> <li>Configure filters - Subscribe with relevant tags</li> </ol>"},{"location":"use-cases/team-coordination/#related-use-cases","title":"Related Use Cases","text":"<ul> <li>Architecture Decisions - Coordinate technical decisions</li> <li>Project Updates - Broadcast milestones to stakeholders</li> <li>Real-World Scenarios - Complete workflow examples</li> </ul> <p>Ready to eliminate coordination friction? Get started with Notify-MCP today!</p>"}]}